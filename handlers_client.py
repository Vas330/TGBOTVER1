# handlers_client.py
from datetime import datetime
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import ContextTypes
from state_manager import user_state
from utils import format_order_info, is_valid_number, parse_number, calculate_end_time, format_time_remaining


async def client_menu(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–ú–µ–Ω—é –∑–∞–∫–∞–∑—á–∏–∫–∞ - –ø—Ä–æ–≤–µ—Ä—è–µ–º –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é"""
    user_id = update.callback_query.from_user.id
    logged_in_client = user_state.get_client_by_chat_id(user_id)

    if logged_in_client:
        # –ê–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω—ã–π –∫–ª–∏–µ–Ω—Ç - –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–Ω–æ–ø–∫–∏ "–°–æ–∑–¥–∞—Ç—å –∑–∞–∫–∞–∑", "–ù–∞—à–∏ —Ä–∞–±–æ—Ç—ã" –∏ "–í—ã–π—Ç–∏"
        keyboard = [
            [InlineKeyboardButton("–°–æ–∑–¥–∞—Ç—å –∑–∞–∫–∞–∑", callback_data='create_order')],
            [InlineKeyboardButton("–ù–∞—à–∏ —Ä–∞–±–æ—Ç—ã", callback_data='our_works')],
            [InlineKeyboardButton("–í—ã–π—Ç–∏", callback_data='client_logout')]
        ]
        context.user_data['client_login'] = logged_in_client
        message_text = f'–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, {logged_in_client}!'
    else:
        # –ù–µ–∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω—ã–π –∫–ª–∏–µ–Ω—Ç - –ø–æ–∫–∞–∑—ã–≤–∞–µ–º 4 –∫–Ω–æ–ø–∫–∏
        keyboard = [
            [InlineKeyboardButton("–í–æ–π—Ç–∏", callback_data='client_login')],
            [InlineKeyboardButton("–ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è", callback_data='client_register')],
            [InlineKeyboardButton("–ù–∞—à–∏ —Ä–∞–±–æ—Ç—ã", callback_data='our_works')],
            [InlineKeyboardButton("–ú–Ω–µ –Ω—É–∂–Ω–∞ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è", callback_data='consultation')]
        ]
        message_text = '–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ (–ó–∞–∫–∞–∑—á–∏–∫):'

    reply_markup = InlineKeyboardMarkup(keyboard)
    await update.callback_query.edit_message_text(message_text, reply_markup=reply_markup)


async def show_portfolio(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–ü–æ–∫–∞–∑ –ø–æ—Ä—Ç—Ñ–æ–ª–∏–æ —É—Å–ª—É–≥"""
    portfolio = "–ù–∞—à–∏ —É—Å–ª—É–≥–∏:\n1. –í–µ–±-—Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∞\n2. –î–∏–∑–∞–π–Ω —Å–∞–π—Ç–æ–≤\n3. SEO-–æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è"
    await update.callback_query.edit_message_text(portfolio)


async def create_order(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–ù–∞—á–∞–ª–æ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–∫–∞–∑–∞ (—Ç–æ–ª—å–∫–æ –¥–ª—è –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω—ã—Ö –∫–ª–∏–µ–Ω—Ç–æ–≤)"""
    user_id = update.callback_query.from_user.id
    client_login = user_state.get_client_by_chat_id(user_id)

    if not client_login:
        await update.callback_query.edit_message_text(
            "–î–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–∫–∞–∑–∞ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –≤–æ–π—Ç–∏ –≤ –∞–∫–∫–∞—É–Ω—Ç."
        )
        return

    await update.callback_query.edit_message_text("–û–ø–∏—à–∏—Ç–µ –≤–∞—à –∑–∞–∫–∞–∑:")
    user_state.set_state(user_id, 'order_description')


async def consultation(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–ó–∞–ø—Ä–æ—Å –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏"""
    await update.callback_query.edit_message_text(
        "–ó–∞–ø—Ä–æ—Å –Ω–∞ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—é –ø—Ä–∏–Ω—è—Ç! –°–ø–µ—Ü–∏–∞–ª–∏—Å—Ç —Å–∫–æ—Ä–æ —Å –≤–∞–º–∏ —Å–≤—è–∂–µ—Ç—Å—è."
    )


async def client_login(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–ù–∞—á–∞–ª–æ –ø—Ä–æ—Ü–µ—Å—Å–∞ –≤—Ö–æ–¥–∞ –∫–ª–∏–µ–Ω—Ç–∞"""
    await update.callback_query.edit_message_text("–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –ª–æ–≥–∏–Ω:")
    user_state.set_state(update.callback_query.from_user.id, 'client_login_username')


async def client_register(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–ù–∞—á–∞–ª–æ –ø—Ä–æ—Ü–µ—Å—Å–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –∫–ª–∏–µ–Ω—Ç–∞"""
    await update.callback_query.edit_message_text("–í–≤–µ–¥–∏—Ç–µ –∂–µ–ª–∞–µ–º—ã–π –ª–æ–≥–∏–Ω:")
    user_state.set_state(update.callback_query.from_user.id, 'client_register_username')


async def client_logout(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–í—ã—Ö–æ–¥ –∏–∑ –∞–∫–∫–∞—É–Ω—Ç–∞ –∫–ª–∏–µ–Ω—Ç–∞"""
    user_id = update.callback_query.from_user.id
    client_login = user_state.get_client_by_chat_id(user_id)

    if client_login:
        user_state.remove_client_chat_id(client_login)

        if 'client_login' in context.user_data:
            del context.user_data['client_login']

        keyboard = [
            [InlineKeyboardButton("–í–æ–π—Ç–∏", callback_data='client_login')],
            [InlineKeyboardButton("–ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è", callback_data='client_register')],
            [InlineKeyboardButton("–ú–Ω–µ –Ω—É–∂–Ω–∞ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è", callback_data='consultation')]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        await update.callback_query.edit_message_text(
            "–í—ã —É—Å–ø–µ—à–Ω–æ –≤—ã—à–ª–∏ –∏–∑ –∞–∫–∫–∞—É–Ω—Ç–∞.\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ (–ó–∞–∫–∞–∑—á–∏–∫):",
            reply_markup=reply_markup
        )
    else:
        await update.callback_query.edit_message_text("–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã—Ö–æ–¥–µ –∏–∑ –∞–∫–∫–∞—É–Ω—Ç–∞.")


async def my_client_orders(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–ü–æ–∫–∞–∑ –∑–∞–∫–∞–∑–æ–≤ –∫–ª–∏–µ–Ω—Ç–∞"""
    query = update.callback_query
    await query.answer()

    user_id = query.from_user.id
    client_login = user_state.get_client_by_chat_id(user_id)

    if client_login:
        orders = user_state.get_client_orders(client_login)

        if orders:
            await query.edit_message_text(f"–í–∞—à–∏ –∑–∞–∫–∞–∑—ã ({len(orders)}):")

            for i, order in enumerate(orders, start=1):
                status = "‚úÖ –ü—Ä–∏–Ω—è—Ç" if order.get('accepted', False) else "‚è≥ –û–∂–∏–¥–∞–µ—Ç"
                contractor = order.get('contractor_login', '–ù–µ –Ω–∞–∑–Ω–∞—á–µ–Ω')

                order_text = f"üìã –ó–∞–∫–∞–∑ {i}:\n{order.get('description', '–û–ø–∏—Å–∞–Ω–∏–µ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç')}"
                order_text += f"\nüë®‚Äçüíº –ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å: {contractor}"
                order_text += f"\nüìä –°—Ç–∞—Ç—É—Å: {status}"

                if order.get('timer_active', False) and 'timer_end' in order:
                    end_time = datetime.fromisoformat(order['timer_end']) if isinstance(order['timer_end'], str) else \
                        order['timer_end']
                    timer_info = format_time_remaining(end_time)
                    order_text += f"\n{timer_info}"

                await query.message.reply_text(order_text)
        else:
            await query.edit_message_text("–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –∑–∞–∫–∞–∑–æ–≤.")
    else:
        await query.edit_message_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–æ–π–¥–∏—Ç–µ –≤ —Å–∏—Å—Ç–µ–º—É.")


async def our_works(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–ü–æ–∫–∞–∑ –∫–∞—Ç–µ–≥–æ—Ä–∏–π –Ω–∞—à–∏—Ö —Ä–∞–±–æ—Ç"""
    keyboard = [
        [InlineKeyboardButton("üåê –°–∞–π—Ç—ã", callback_data='category_sites')],
        [InlineKeyboardButton("üé¨ –í–∏–¥–µ–æ", callback_data='category_video')],
        [InlineKeyboardButton("‚Üê –ù–∞–∑–∞–¥", callback_data='client')]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    await update.callback_query.edit_message_text(
        "–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é:",
        reply_markup=reply_markup
    )


async def category_sites(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–ü–æ–∫–∞–∑ –ø—Ä–æ–µ–∫—Ç–æ–≤ –≤ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ —Å–∞–π—Ç–æ–≤"""
    portfolio_items = user_state.get_portfolio_items('sites')
    print(f"DEBUG: –ó–∞–≥—Ä—É–∂–µ–Ω–æ —Å–∞–π—Ç–æ–≤ –∏–∑ –ø–æ—Ä—Ç—Ñ–æ–ª–∏–æ: {len(portfolio_items)}")

    for i, item in enumerate(portfolio_items):
        print(
            f"DEBUG: –°–∞–π—Ç {i + 1}: title='{item.get('title', '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è')}', description='{item.get('description', '–ë–µ–∑ –æ–ø–∏—Å–∞–Ω–∏—è')[:50]}...', images={len(item.get('images', []))}, links={len(item.get('links', []))}")

    keyboard = []

    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –ø—Ä–æ–µ–∫—Ç–∞
    for i, item in enumerate(portfolio_items):
        button_title = item['title']
        print(f"DEBUG: –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫—É –¥–ª—è —Å–∞–π—Ç–∞: {button_title}")
        keyboard.append([InlineKeyboardButton(button_title, callback_data=f'portfolio_item_sites_{i}')])

    # –ï—Å–ª–∏ –Ω–µ—Ç –ø—Ä–æ–µ–∫—Ç–æ–≤, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏–∏
    if not portfolio_items:
        print("DEBUG: –ù–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã—Ö —Å–∞–π—Ç–æ–≤, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏")
        keyboard = [
            [InlineKeyboardButton("üìÑ –õ–µ–Ω–¥–∏–Ω–≥–∏", callback_data='subcategory_landing')],
            [InlineKeyboardButton("üõí –ò–Ω—Ç–µ—Ä–Ω–µ—Ç –º–∞–≥–∞–∑–∏–Ω—ã", callback_data='subcategory_shop')],
            [InlineKeyboardButton("üé® –°–∞–π—Ç—ã –Ω–∞ –¢–∏–ª—å–¥–∞", callback_data='subcategory_tilda')],
            [InlineKeyboardButton("‚öôÔ∏è –°–∞–π—Ç—ã –Ω–∞ WordPress", callback_data='subcategory_wordpress')]
        ]

    keyboard.append([InlineKeyboardButton("‚Üê –ù–∞–∑–∞–¥", callback_data='our_works')])
    reply_markup = InlineKeyboardMarkup(keyboard)

    message_text = "–ù–∞—à–∏ —Å–∞–π—Ç—ã:" if portfolio_items else "–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø —Å–∞–π—Ç–∞:"
    print(f"DEBUG: –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ: {message_text}")
    await update.callback_query.edit_message_text(message_text, reply_markup=reply_markup)


async def category_video(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–ü–æ–∫–∞–∑ –ø—Ä–æ–µ–∫—Ç–æ–≤ –≤ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –≤–∏–¥–µ–æ"""
    portfolio_items = user_state.get_portfolio_items('video')

    keyboard = []

    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –ø—Ä–æ–µ–∫—Ç–∞
    for i, item in enumerate(portfolio_items):
        keyboard.append([InlineKeyboardButton(item['title'], callback_data=f'portfolio_item_video_{i}')])

    # –ï—Å–ª–∏ –Ω–µ—Ç –ø—Ä–æ–µ–∫—Ç–æ–≤, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏–∏
    if not portfolio_items:
        keyboard = [
            [InlineKeyboardButton("üì∫ –í–∏–¥–µ–æ —Ä–µ–∫–ª–∞–º–∞", callback_data='subcategory_ads')],
            [InlineKeyboardButton("üé≠ –ö—Ä–µ–∞—Ç–∏–≤—ã", callback_data='subcategory_creative')],
            [InlineKeyboardButton("‚ú® –ê–Ω–∏–º–∞—Ü–∏–∏", callback_data='subcategory_animation')],
            [InlineKeyboardButton("üé¨ –ú–æ—É—à–µ–Ω –≥—Ä–∞—Ñ–∏–∫–∞", callback_data='subcategory_motion')],
            [InlineKeyboardButton("üéÆ 3D –≤–∏–¥–µ–æ", callback_data='subcategory_3d')]
        ]

    keyboard.append([InlineKeyboardButton("‚Üê –ù–∞–∑–∞–¥", callback_data='our_works')])
    reply_markup = InlineKeyboardMarkup(keyboard)

    message_text = "–ù–∞—à–∏ –≤–∏–¥–µ–æ:" if portfolio_items else "–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –≤–∏–¥–µ–æ:"
    await update.callback_query.edit_message_text(message_text, reply_markup=reply_markup)


async def show_portfolio_item(update: Update, context: ContextTypes.DEFAULT_TYPE, category: str, index: int) -> None:
    """–ü–æ–∫–∞–∑ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ —ç–ª–µ–º–µ–Ω—Ç–∞ –ø–æ—Ä—Ç—Ñ–æ–ª–∏–æ - –ü–û–õ–ù–û–°–¢–¨–Æ –ò–°–ü–†–ê–í–õ–ï–ù–ù–ê–Ø –í–ï–†–°–ò–Ø"""
    portfolio_items = user_state.get_portfolio_items(category)

    if 0 <= index < len(portfolio_items):
        item = portfolio_items[index]

        # –ò–°–ü–†–ê–í–õ–ï–ù–ù–ê–Ø –∫–Ω–æ–ø–∫–∞ "–ù–∞–∑–∞–¥" - –∏—Å–ø–æ–ª—å–∑—É–µ–º –Ω–æ–≤—ã–µ callback_data
        back_callback = f'back_to_{category}' if category in ['sites', 'video'] else 'back_to_our_works'

        keyboard = [
            [InlineKeyboardButton("‚Üê –ù–∞–∑–∞–¥", callback_data=back_callback)]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)

        if item.get('images') and len(item['images']) > 0:
            # –§–æ—Ä–º–∏—Ä—É–µ–º –ø–æ–¥–ø–∏—Å—å: –ù–ê–ó–í–ê–ù–ò–ï –ë–û–õ–¨–®–ò–ú–ò –ë–£–ö–í–ê–ú–ò + –æ–ø–∏—Å–∞–Ω–∏–µ
            caption = f"üî• {item['title'].upper()}\n"
            caption += "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n\n"
            caption += f"{item['description']}"

            # –î–æ–±–∞–≤–ª—è–µ–º —Å—Å—ã–ª–∫–∏ –µ—Å–ª–∏ –µ—Å—Ç—å
            if item.get('links'):
                caption += "\n\nüîó –°—Å—ã–ª–∫–∏:"
                for link in item['links']:
                    caption += f"\n‚Ä¢ {link}"

            try:
                image = item['images'][0]

                # –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–æ—Ç–æ –∏ —É–¥–∞–ª—è–µ–º –∏—Å—Ö–æ–¥–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
                await context.bot.send_photo(
                    chat_id=update.callback_query.from_user.id,
                    photo=image,
                    caption=caption,
                    reply_markup=reply_markup
                )

                # –£–¥–∞–ª—è–µ–º –∏—Å—Ö–æ–¥–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–æ —Å–ø–∏—Å–∫–æ–º
                await update.callback_query.delete_message()

            except Exception as e:
                print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: {e}")
                # –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Ñ–æ—Ç–æ, —Ä–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–∞ —Ç–µ–∫—Å—Ç
                text = f"üî• {item['title'].upper()}\n‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n\n{item['description']}"
                if item.get('links'):
                    text += "\n\nüîó –°—Å—ã–ª–∫–∏:"
                    for link in item['links']:
                        text += f"\n‚Ä¢ {link}"

                await update.callback_query.edit_message_text(text, reply_markup=reply_markup)
        else:
            # –ï—Å–ª–∏ –Ω–µ—Ç –∫–∞—Ä—Ç–∏–Ω–∫–∏, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ —Ç–µ–∫—Å—Ç
            text = f"üî• {item['title'].upper()}\n‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n\n{item['description']}"
            if item.get('links'):
                text += "\n\nüîó –°—Å—ã–ª–∫–∏:"
                for link in item['links']:
                    text += f"\n‚Ä¢ {link}"

            await update.callback_query.edit_message_text(text, reply_markup=reply_markup)
    else:
        await update.callback_query.edit_message_text("–ü—Ä–æ–µ–∫—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω.")


async def show_subcategory_works(update: Update, context: ContextTypes.DEFAULT_TYPE, subcategory: str) -> None:
    """–ü–æ–∫–∞–∑ —Ä–∞–±–æ—Ç –≤ –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏–∏ (—Å—Ç–∞—Ä–∞—è –≤–µ—Ä—Å–∏—è –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏)"""

    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏–∏
    subcategory_names = {
        'landing': 'üìÑ –õ–µ–Ω–¥–∏–Ω–≥–∏',
        'shop': 'üõí –ò–Ω—Ç–µ—Ä–Ω–µ—Ç –º–∞–≥–∞–∑–∏–Ω—ã',
        'tilda': 'üé® –°–∞–π—Ç—ã –Ω–∞ –¢–∏–ª—å–¥–∞',
        'wordpress': '‚öôÔ∏è –°–∞–π—Ç—ã –Ω–∞ WordPress',
        'ads': 'üì∫ –í–∏–¥–µ–æ —Ä–µ–∫–ª–∞–º–∞',
        'creative': 'üé≠ –ö—Ä–µ–∞—Ç–∏–≤—ã',
        'animation': '‚ú® –ê–Ω–∏–º–∞—Ü–∏–∏',
        'motion': 'üé¨ –ú–æ—É—à–µ–Ω –≥—Ä–∞—Ñ–∏–∫–∞',
        '3d': 'üéÆ 3D –≤–∏–¥–µ–æ'
    }

    category_name = subcategory_names.get(subcategory, subcategory)

    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∫ –∫–∞–∫–æ–π –æ—Å–Ω–æ–≤–Ω–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –æ—Ç–Ω–æ—Å–∏—Ç—Å—è
    sites_subcategories = ['landing', 'shop', 'tilda', 'wordpress']
    back_callback = 'back_to_sites' if subcategory in sites_subcategories else 'back_to_video'

    keyboard = [
        [InlineKeyboardButton("‚Üê –ù–∞–∑–∞–¥", callback_data=back_callback)]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)

    # –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å —Ä–µ–∞–ª—å–Ω—ã–µ –ø—Ä–∏–º–µ—Ä—ã —Ä–∞–±–æ—Ç
    works_text = f"{category_name}\n\n–ü—Ä–∏–º–µ—Ä—ã –Ω–∞—à–∏—Ö —Ä–∞–±–æ—Ç:\n‚Ä¢ –ü—Ä–æ–µ–∫—Ç 1\n‚Ä¢ –ü—Ä–æ–µ–∫—Ç 2\n‚Ä¢ –ü—Ä–æ–µ–∫—Ç 3"

    await update.callback_query.edit_message_text(
        works_text,
        reply_markup=reply_markup
    )


async def handle_order_creation(update: Update, context: ContextTypes.DEFAULT_TYPE, state: str) -> bool:
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Å–æ–∑–¥–∞–Ω–∏–µ –∑–∞–∫–∞–∑–∞"""
    user_id = update.message.from_user.id
    client_login = user_state.get_client_by_chat_id(user_id)

    if not client_login:
        await update.message.reply_text("–û—à–∏–±–∫–∞: –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –≤–æ–π—Ç–∏ –≤ –∞–∫–∫–∞—É–Ω—Ç.")
        user_state.set_state(user_id, None)
        return True

    if state == 'order_description':
        context.user_data['order_description'] = update.message.text
        context.user_data['client_login'] = client_login
        await update.message.reply_text("1. –ö–∞–∫–∏–µ —É –Ω–∞—Å –µ—Å—Ç—å —Å—Ä–æ–∫–∏?")
        user_state.set_state(user_id, 'order_deadline')
        return True

    elif state == 'order_deadline':
        context.user_data['deadline'] = update.message.text
        await update.message.reply_text(
            "2. –ö–∞–∫–æ–π —É –≤–∞—Å –æ—Ä–∏–µ–Ω—Ç–∏—Ä–æ–≤–æ—á–Ω—ã–π –±—é–¥–∂–µ—Ç? (–í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ, –Ω–∞–ø—Ä–∏–º–µ—Ä 15 000)"
        )
        user_state.set_state(user_id, 'order_budget')
        return True

    elif state == 'order_budget':
        if is_valid_number(update.message.text):
            budget = parse_number(update.message.text)
            context.user_data['budget'] = update.message.text
            context.user_data['order_amount'] = budget

            await update.message.reply_text(
                "–°–ø–∞—Å–∏–±–æ –∑–∞ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é. –ú—ã —Å–∫–æ—Ä–æ —Å–≤—è–∂–µ–º—Å—è —Å –≤–∞–º–∏."
            )

            top_entrepreneur = user_state.get_top_entrepreneur()
            if top_entrepreneur:
                top_entrepreneur_data = user_state.entrepreneurs[top_entrepreneur]
                top_entrepreneur_chat_id = top_entrepreneur_data.get('chat_id')

                if top_entrepreneur_chat_id:
                    order_info_text = format_order_info(
                        context.user_data.get('order_description', '–ù–µ —É–∫–∞–∑–∞–Ω–æ'),
                        context.user_data.get('deadline', '–ù–µ —É–∫–∞–∑–∞–Ω–æ'),
                        context.user_data['budget'],
                        client_login
                    )

                    keyboard = [
                        [InlineKeyboardButton("–ü—Ä–∏–Ω—è—Ç—å –∑–∞–∫–∞–∑", callback_data=f'accept_order_{user_id}')],
                        [InlineKeyboardButton("–û—Ç–∫–∞–∑–∞—Ç—å—Å—è", callback_data=f'decline_order_{user_id}')]
                    ]
                    reply_markup = InlineKeyboardMarkup(keyboard)

                    await context.bot.send_message(
                        chat_id=top_entrepreneur_chat_id,
                        text=order_info_text,
                        reply_markup=reply_markup
                    )

                    order_obj = {
                        'description': order_info_text,
                        'client_login': client_login,
                        'client_chat_id': user_id,
                        'budget': budget,
                        'deadline_text': context.user_data.get('deadline', '–ù–µ —É–∫–∞–∑–∞–Ω–æ'),
                        'created_at': datetime.now(),
                        'accepted': False,
                        'timer_active': False
                    }

                    user_state.add_order(top_entrepreneur, order_obj)

                    end_time = calculate_end_time(context.user_data.get('deadline', ''))
                    if end_time:
                        orders_list = user_state.get_orders(top_entrepreneur)
                        if orders_list:
                            order_index = len(orders_list) - 1
                            user_state.update_order_timer(top_entrepreneur, order_index, end_time)
                            await update.message.reply_text(
                                f"‚è± –¢–∞–π–º–µ—Ä –∑–∞–∫–∞–∑–∞ –∑–∞–ø—É—â–µ–Ω! –°—Ä–æ–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è: {format_time_remaining(end_time)}"
                            )
                else:
                    await update.message.reply_text(
                        "–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å —Å –Ω–∞–∏–≤—ã—Å—à–∏–º —Ä–µ–π—Ç–∏–Ω–≥–æ–º —Å–µ–π—á–∞—Å –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω."
                    )
            else:
                await update.message.reply_text(
                    "–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –≤ —Å–∏—Å—Ç–µ–º–µ –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª–µ–π."
                )

            user_state.set_state(user_id, None)
        else:
            await update.message.reply_text(
                "–ü—Ä–æ—Å–∏–º –≤–∞—Å –Ω–∞–ø–∏—Å–∞—Ç—å —á–∏—Å–ª–æ. –≠—Ç–æ –ø–æ–º–æ–∂–µ—Ç –Ω–∞–º –ø–æ–¥–æ–±—Ä–∞—Ç—å –ª—É—á—à–µ–µ —Ä–µ—à–µ–Ω–∏–µ –¥–ª—è –≤–∞—à–µ–π —Å–∏—Ç—É–∞—Ü–∏–∏."
            )
        return True

    return False


async def handle_client_auth(update: Update, context: ContextTypes.DEFAULT_TYPE, state: str) -> bool:
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é –∏ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é –∫–ª–∏–µ–Ω—Ç–æ–≤"""
    user_id = update.message.from_user.id
    print(f"DEBUG: handle_client_auth –≤—ã–∑–≤–∞–Ω —Å —Å–æ—Å—Ç–æ—è–Ω–∏–µ–º: {state}")

    # –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è
    if state == 'client_register_username':
        context.user_data['register_client_login'] = update.message.text
        await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å:")
        user_state.set_state(user_id, 'client_register_password')
        return True

    elif state == 'client_register_password':
        login = context.user_data.get('register_client_login')
        password = update.message.text

        if login:
            if user_state.register_client(login, password, chat_id=user_id):
                keyboard = [
                    [InlineKeyboardButton("–°–æ–∑–¥–∞—Ç—å –∑–∞–∫–∞–∑", callback_data='create_order')],
                    [InlineKeyboardButton("–ù–∞—à–∏ —Ä–∞–±–æ—Ç—ã", callback_data='our_works')],
                    [InlineKeyboardButton("–í—ã–π—Ç–∏", callback_data='client_logout')]
                ]
                reply_markup = InlineKeyboardMarkup(keyboard)
                await update.message.reply_text(
                    f"–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, {login}!",
                    reply_markup=reply_markup
                )
                context.user_data['client_login'] = login
            else:
                await update.message.reply_text(
                    "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å —Ç–∞–∫–∏–º –ª–æ–≥–∏–Ω–æ–º —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –¥—Ä—É–≥–æ–π –ª–æ–≥–∏–Ω."
                )
        else:
            await update.message.reply_text("–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏.")

        user_state.set_state(user_id, None)
        return True

    # –í—Ö–æ–¥
    elif state == 'client_login_username':
        context.user_data['login_client_login'] = update.message.text
        await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å:")
        user_state.set_state(user_id, 'client_login_password')
        return True

    elif state == 'client_login_password':
        login = context.user_data.get('login_client_login')
        password = update.message.text

        if login and user_state.check_client(login, password):
            user_state.set_client_chat_id(login, user_id)

            keyboard = [
                [InlineKeyboardButton("–°–æ–∑–¥–∞—Ç—å –∑–∞–∫–∞–∑", callback_data='create_order')],
                [InlineKeyboardButton("–ù–∞—à–∏ —Ä–∞–±–æ—Ç—ã", callback_data='our_works')],
                [InlineKeyboardButton("–í—ã–π—Ç–∏", callback_data='client_logout')]
            ]
            reply_markup = InlineKeyboardMarkup(keyboard)
            await update.message.reply_text(
                f"–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, {login}!",
                reply_markup=reply_markup
            )
            context.user_data['client_login'] = login
        else:
            await update.message.reply_text("–ù–µ–≤–µ—Ä–Ω—ã–π –ª–æ–≥–∏–Ω –∏–ª–∏ –ø–∞—Ä–æ–ª—å. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")

        user_state.set_state(user_id, None)
        return True

    return False


async def handle_order_response(update: Update, context: ContextTypes.DEFAULT_TYPE, action: str,
                                customer_id: int) -> None:
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –æ—Ç–≤–µ—Ç –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è –Ω–∞ –∑–∞–∫–∞–∑"""
    query = update.callback_query
    contractor_login = user_state.get_entrepreneur_by_chat_id(query.from_user.id)

    if not contractor_login:
        await query.edit_message_text("–û—à–∏–±–∫–∞: –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        return

    if action == 'accept':
        order_amount = context.user_data.get('order_amount', 0)
        if order_amount > 0:
            user_state.update_entrepreneur_balance(contractor_login, order_amount)

        orders = user_state.get_orders(contractor_login)
        client_login = None
        chat_id = None

        for i, order in enumerate(orders):
            if isinstance(order, dict) and order.get('client_chat_id') == customer_id and not order.get('accepted',
                                                                                                        False):
                orders[i]['accepted'] = True
                client_login = order.get('client_login')

                # –°–æ–∑–¥–∞–µ–º —á–∞—Ç –º–µ–∂–¥—É –∫–ª–∏–µ–Ω—Ç–æ–º –∏ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª–µ–º
                if client_login:
                    chat_id = user_state.create_chat(
                        client_login,
                        customer_id,
                        contractor_login,
                        query.from_user.id,
                        f"order_{i}"
                    )

                deadline_text = order.get('deadline_text', '')
                end_time = calculate_end_time(deadline_text)

                if end_time:
                    user_state.update_order_timer(contractor_login, i, end_time)
                    timer_info = format_time_remaining(end_time)

                    # –ö–Ω–æ–ø–∫–∞ "–ß–∞—Ç —Å –∫–ª–∏–µ–Ω—Ç–æ–º" –¥–ª—è –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è
                    if chat_id:
                        keyboard = [
                            [InlineKeyboardButton("üí¨ –ß–∞—Ç —Å –∫–ª–∏–µ–Ω—Ç–æ–º", callback_data=f'open_chat_{chat_id}')]
                        ]
                        reply_markup = InlineKeyboardMarkup(keyboard)
                        await query.edit_message_text(
                            f"‚úÖ –í—ã –ø—Ä–∏–Ω—è–ª–∏ –∑–∞–∫–∞–∑!\n{timer_info}",
                            reply_markup=reply_markup
                        )
                    else:
                        await query.edit_message_text(f"‚úÖ –í—ã –ø—Ä–∏–Ω—è–ª–∏ –∑–∞–∫–∞–∑!\n{timer_info}")

                    # –°–æ–æ–±—â–µ–Ω–∏–µ –∫–ª–∏–µ–Ω—Ç—É —Å –∫–Ω–æ–ø–∫–æ–π —á–∞—Ç–∞
                    if chat_id:
                        client_keyboard = [
                            [InlineKeyboardButton("üí¨ –ß–∞—Ç —Å –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª–µ–º", callback_data=f'open_chat_{chat_id}')]
                        ]
                        client_reply_markup = InlineKeyboardMarkup(client_keyboard)
                        await context.bot.send_message(
                            chat_id=customer_id,
                            text=f"‚úÖ –ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å –ø—Ä–∏–Ω—è–ª –≤–∞—à –∑–∞–∫–∞–∑!\n{timer_info}",
                            reply_markup=client_reply_markup
                        )
                    else:
                        await context.bot.send_message(
                            chat_id=customer_id,
                            text=f"‚úÖ –ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å –ø—Ä–∏–Ω—è–ª –≤–∞—à –∑–∞–∫–∞–∑!\n{timer_info}"
                        )
                else:
                    # –ë–µ–∑ —Ç–∞–π–º–µ—Ä–∞
                    if chat_id:
                        keyboard = [
                            [InlineKeyboardButton("üí¨ –ß–∞—Ç —Å –∫–ª–∏–µ–Ω—Ç–æ–º", callback_data=f'open_chat_{chat_id}')]
                        ]
                        reply_markup = InlineKeyboardMarkup(keyboard)
                        await query.edit_message_text("‚úÖ –í—ã –ø—Ä–∏–Ω—è–ª–∏ –∑–∞–∫–∞–∑!", reply_markup=reply_markup)

                        client_keyboard = [
                            [InlineKeyboardButton("üí¨ –ß–∞—Ç —Å –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª–µ–º", callback_data=f'open_chat_{chat_id}')]
                        ]
                        client_reply_markup = InlineKeyboardMarkup(client_keyboard)
                        await context.bot.send_message(
                            chat_id=customer_id,
                            text="‚úÖ –ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å –ø—Ä–∏–Ω—è–ª –≤–∞—à –∑–∞–∫–∞–∑!",
                            reply_markup=client_reply_markup
                        )
                    else:
                        await query.edit_message_text("‚úÖ –í—ã –ø—Ä–∏–Ω—è–ª–∏ –∑–∞–∫–∞–∑!")
                        await context.bot.send_message(
                            chat_id=customer_id,
                            text="‚úÖ –ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å –ø—Ä–∏–Ω—è–ª –≤–∞—à –∑–∞–∫–∞–∑!"
                        )

                user_state.save_data()
                break

    elif action == 'decline':
        await query.edit_message_text("‚ùå –í—ã –æ—Ç–∫–∞–∑–∞–ª–∏—Å—å –æ—Ç –∑–∞–∫–∞–∑–∞!")
        await context.bot.send_message(
            chat_id=customer_id,
            text="‚ùå –ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å –æ—Ç–∫–∞–∑–∞–ª—Å—è –æ—Ç –≤–∞—à–µ–≥–æ –∑–∞–∫–∞–∑–∞!"
        )


async def open_chat(update: Update, context: ContextTypes.DEFAULT_TYPE, chat_id: str) -> None:
    """–û—Ç–∫—Ä—ã–≤–∞–µ—Ç —á–∞—Ç –º–µ–∂–¥—É –∫–ª–∏–µ–Ω—Ç–æ–º –∏ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª–µ–º"""
    query = update.callback_query
    user_chat_id = query.from_user.id

    chat_info = user_state.get_chat_info(chat_id)
    if not chat_info or not chat_info.get('active', False):
        await query.edit_message_text("–ß–∞—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ –Ω–µ–∞–∫—Ç–∏–≤–µ–Ω.")
        return

    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ä–æ–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    if chat_info.get('client_chat_id') == user_chat_id:
        partner_name = chat_info.get('contractor_login', '–ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å')
        await query.edit_message_text(f"üí¨ –û—Ç–∫—Ä—ã—Ç —á–∞—Ç —Å –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª–µ–º {partner_name}\n\n–ù–∞–ø–∏—à–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ:")
    elif chat_info.get('contractor_chat_id') == user_chat_id:
        partner_name = chat_info.get('client_login', '–ö–ª–∏–µ–Ω—Ç')
        await query.edit_message_text(f"üí¨ –û—Ç–∫—Ä—ã—Ç —á–∞—Ç —Å –∫–ª–∏–µ–Ω—Ç–æ–º {partner_name}\n\n–ù–∞–ø–∏—à–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ:")
    else:
        await query.edit_message_text("–û—à–∏–±–∫–∞: –≤—ã –Ω–µ —É—á–∞—Å—Ç–Ω–∏–∫ —ç—Ç–æ–≥–æ —á–∞—Ç–∞.")
        return

    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ —á–∞—Ç–∞
    user_state.set_state(user_chat_id, f'in_chat_{chat_id}')


async def handle_chat_messages(update: Update, context: ContextTypes.DEFAULT_TYPE, state: str) -> bool:
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –≤ —á–∞—Ç–µ"""
    if not state.startswith('in_chat_'):
        return False

    chat_id = state.replace('in_chat_', '')
    user_chat_id = update.message.from_user.id
    message_text = update.message.text

    # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —á–∞—Ç–µ
    chat_info = user_state.get_chat_info(chat_id)
    if not chat_info or not chat_info.get('active', False):
        await update.message.reply_text("–ß–∞—Ç –Ω–µ–∞–∫—Ç–∏–≤–µ–Ω.")
        user_state.set_state(user_chat_id, None)
        return True

    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø–æ–ª—É—á–∞—Ç–µ–ª—è
    partner_chat_id = user_state.get_chat_partner(chat_id, user_chat_id)
    if not partner_chat_id:
        await update.message.reply_text("–ü–∞—Ä—Ç–Ω–µ—Ä –ø–æ —á–∞—Ç—É –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        return True

    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ä–æ–ª—å –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—è
    from utils import get_user_role_in_chat, format_chat_message
    sender_role = get_user_role_in_chat(user_chat_id, chat_info)

    # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
    formatted_message = format_chat_message(sender_role, message_text)

    try:
        await context.bot.send_message(chat_id=partner_chat_id, text=formatted_message)
        await update.message.reply_text("‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ –¥–æ—Å—Ç–∞–≤–ª–µ–Ω–æ")
    except Exception as e:
        await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è")
        print(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")

    return True