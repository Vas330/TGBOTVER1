# handlers_client.py - –ø–æ–ª–Ω–∞—è –≤–µ—Ä—Å–∏—è —Å —á–∞—Ç–æ–º –∏ –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–º –º–µ–Ω—é
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import ContextTypes
from datetime import datetime


async def client_menu(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–ú–µ–Ω—é –∑–∞–∫–∞–∑—á–∏–∫–∞ —Å Firebase"""
    firebase = context.bot_data['firebase']
    user_id = update.callback_query.from_user.id
    logged_in_user = firebase.get_client_by_chat_id(user_id)

    keyboard = []

    if logged_in_user:
        # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω
        keyboard.append([InlineKeyboardButton("üìù –°–æ–∑–¥–∞—Ç—å –∑–∞–∫–∞–∑", callback_data='create_order')])
        keyboard.append([InlineKeyboardButton("üìã –ú–æ–∏ –∑–∞–∫–∞–∑—ã", callback_data='my_client_orders')])
        keyboard.append([InlineKeyboardButton("üéØ –ù–∞—à–∏ —É—Å–ª—É–≥–∏", callback_data='our_services')])
        keyboard.append([InlineKeyboardButton("üé® –ù–∞—à–∏ —Ä–∞–±–æ—Ç—ã", callback_data='our_works')])
        keyboard.append([InlineKeyboardButton("üö™ –í—ã–π—Ç–∏", callback_data='client_logout')])

        context.user_data['client_login'] = logged_in_user
        message_text = f'–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, {logged_in_user}!\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:'
    else:
        # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω
        keyboard.append([InlineKeyboardButton("üîë –í–æ–π—Ç–∏", callback_data='client_login')])
        keyboard.append([InlineKeyboardButton("üìù –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è", callback_data='client_register')])
        keyboard.append([InlineKeyboardButton("üéØ –ù–∞—à–∏ —É—Å–ª—É–≥–∏", callback_data='our_services')])
        keyboard.append([InlineKeyboardButton("üé® –ù–∞—à–∏ —Ä–∞–±–æ—Ç—ã", callback_data='our_works')])
        keyboard.append([InlineKeyboardButton("üí¨ –ö–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è", callback_data='consultation')])

        message_text = '–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ (–ó–∞–∫–∞–∑—á–∏–∫):'

    reply_markup = InlineKeyboardMarkup(keyboard)
    await update.callback_query.edit_message_text(message_text, reply_markup=reply_markup)


async def show_portfolio(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–ü–æ–∫–∞–∑ –ø–æ—Ä—Ç—Ñ–æ–ª–∏–æ —Å Firebase"""
    firebase = context.bot_data['firebase']
    portfolio_items = firebase.get_portfolio()

    if portfolio_items:
        for item in portfolio_items:
            caption = f"{item.get('title', '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è')}\n{item.get('description', '–û–ø–∏—Å–∞–Ω–∏–µ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç')}"
            if item.get('photo_type') == 'file_id':
                await update.callback_query.message.reply_photo(item['photo'], caption=caption)
            else:
                await update.callback_query.message.reply_text(f"–§–æ—Ç–æ: {item.get('photo', '–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç')}\n{caption}")
    else:
        await update.callback_query.edit_message_text("–ü–æ—Ä—Ç—Ñ–æ–ª–∏–æ –ø—É—Å—Ç–æ.")


async def create_order(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–ù–∞—á–∞–ª–æ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–∫–∞–∑–∞ —Å Firebase"""
    firebase = context.bot_data['firebase']
    user_id = update.callback_query.from_user.id
    client_login = firebase.get_client_by_chat_id(user_id)

    if client_login:
        await update.callback_query.edit_message_text(
            "–†–∞—Å—Å–∫–∞–∂–∏—Ç–µ –ø–æ–¥—Ä–æ–±–Ω–æ, —á—Ç–æ –≤–∞–º –Ω—É–∂–Ω–æ.\n"
            "–ù–∞–ø—Ä–∏–º–µ—Ä: –Ω—É–∂–µ–Ω –ª–µ–Ω–¥–∏–Ω–≥ –¥–ª—è –ø—Ä–æ–¥–∞–∂–∏ –∫—É—Ä—Å–æ–≤, –∞–¥–∞–ø—Ç–∏–≤–Ω—ã–π –¥–∏–∑–∞–π–Ω, –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å –ø–ª–∞—Ç–µ–∂–∫–æ–π."
        )
        firebase.set_user_state(user_id, 'order_description')
    else:
        await update.callback_query.edit_message_text("–î–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–∫–∞–∑–∞ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –≤–æ–π—Ç–∏ –≤ –∞–∫–∫–∞—É–Ω—Ç.")


async def consultation(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–ö–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è"""
    await update.callback_query.edit_message_text(
        "–ë–µ—Å–ø–ª–∞—Ç–Ω–∞—è –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è!\n\n"
        "–û—Å—Ç–∞–≤—å—Ç–µ –∑–∞—è–≤–∫—É, –∏ –Ω–∞—à –º–µ–Ω–µ–¥–∂–µ—Ä —Å–≤—è–∂–µ—Ç—Å—è —Å –≤–∞–º–∏ –≤ —Ç–µ—á–µ–Ω–∏–µ —á–∞—Å–∞:\n"
        "@YourManagerUsername"
    )


async def client_login(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –∫–ª–∏–µ–Ω—Ç–∞"""
    firebase = context.bot_data['firebase']
    await update.callback_query.edit_message_text("–í–≤–µ–¥–∏—Ç–µ –ª–æ–≥–∏–Ω:")
    firebase.set_user_state(update.callback_query.from_user.id, 'client_login_username')


async def client_register(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∫–ª–∏–µ–Ω—Ç–∞"""
    firebase = context.bot_data['firebase']
    await update.callback_query.edit_message_text("–í–≤–µ–¥–∏—Ç–µ –ª–æ–≥–∏–Ω –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏:")
    firebase.set_user_state(update.callback_query.from_user.id, 'client_register_username')


async def client_logout(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–í—ã—Ö–æ–¥ –∫–ª–∏–µ–Ω—Ç–∞"""
    firebase = context.bot_data['firebase']
    user_id = update.callback_query.from_user.id
    client_login = firebase.get_client_by_chat_id(user_id)

    if client_login:
        firebase.set_client_chat_id(client_login, None)

        if 'client_login' in context.user_data:
            del context.user_data['client_login']

        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –º–µ–Ω—é –∑–∞–∫–∞–∑—á–∏–∫–∞ –ø–æ—Å–ª–µ –≤—ã—Ö–æ–¥–∞
        keyboard = [
            [InlineKeyboardButton("üîë –í–æ–π—Ç–∏", callback_data='client_login')],
            [InlineKeyboardButton("üìù –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è", callback_data='client_register')],
            [InlineKeyboardButton("üéØ –ù–∞—à–∏ —É—Å–ª—É–≥–∏", callback_data='our_services')],
            [InlineKeyboardButton("üé® –ù–∞—à–∏ —Ä–∞–±–æ—Ç—ã", callback_data='our_works')],
            [InlineKeyboardButton("üí¨ –ö–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è", callback_data='consultation')]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        await update.callback_query.edit_message_text(
            "–í—ã —É—Å–ø–µ—à–Ω–æ –≤—ã—à–ª–∏ –∏–∑ –∞–∫–∫–∞—É–Ω—Ç–∞.\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ (–ó–∞–∫–∞–∑—á–∏–∫):",
            reply_markup=reply_markup
        )
    else:
        await update.callback_query.edit_message_text("–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã—Ö–æ–¥–µ –∏–∑ –∞–∫–∫–∞—É–Ω—Ç–∞.")


async def my_client_orders(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–ü–æ–∫–∞–∑ –∑–∞–∫–∞–∑–æ–≤ –∫–ª–∏–µ–Ω—Ç–∞ —Å Firebase –∏ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º–∏ –∫–Ω–æ–ø–∫–∞–º–∏"""
    firebase = context.bot_data['firebase']
    query = update.callback_query
    await query.answer()

    user_id = query.from_user.id
    client_login = firebase.get_client_by_chat_id(user_id)

    if client_login:
        orders = firebase.get_orders_by_customer(client_login)

        if orders:
            await query.edit_message_text(f"–£ –≤–∞—Å {len(orders)} –∑–∞–∫–∞–∑(–∞/–æ–≤):")

            for i, order in enumerate(orders, start=1):
                status = order.get('status', 'unknown')

                status_map = {
                    'completed': ('–ó–∞–≤–µ—Ä—à–µ–Ω', '‚úÖ'),
                    'on_review': ('–ù–∞ –ø—Ä–æ–≤–µ—Ä–∫–µ', 'üîç'),
                    'in_work': ('–í —Ä–∞–±–æ—Ç–µ', 'üîÑ'),
                    'cancelled': ('–û—Ç–º–µ–Ω–µ–Ω', '‚ùå'),
                    'dispute': ('–°–ø–æ—Ä', '‚ö†Ô∏è'),
                    'pending': ('–û–∂–∏–¥–∞–µ—Ç –ø—Ä–∏–Ω—è—Ç–∏—è', 'üìã'),
                    'waiting_payment': ('–û–∂–∏–¥–∞–µ—Ç –æ–ø–ª–∞—Ç—ã', 'üí≥'),
                    'payment_confirmed': ('–û–ø–ª–∞—Ç–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞', 'üí∞'),
                    'accepted_waiting_payment': ('–ü—Ä–∏–Ω—è—Ç, –æ–∂–∏–¥–∞–µ—Ç –æ–ø–ª–∞—Ç—ã', 'üïê')
                }

                status_text, status_icon = status_map.get(status, ('–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ', '‚ùì'))

                executor = order.get('executor', {}).get('username', '–ù–µ –Ω–∞–∑–Ω–∞—á–µ–Ω')
                amount = order.get('amount', 0)

                order_text = f"{status_icon} –ó–∞–∫–∞–∑ {i}: {order.get('title', '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è')}\n"
                order_text += f"–û–ø–∏—Å–∞–Ω–∏–µ: {order.get('description', '–û–ø–∏—Å–∞–Ω–∏–µ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç')[:100]}...\n"
                order_text += f"–ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å: {executor}\n"
                order_text += f"–ë—é–¥–∂–µ—Ç: {amount} —Ä—É–±.\n"
                order_text += f"–°—Ç–∞—Ç—É—Å: {status_text}"

                # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –∑–∞–∫–∞–∑–∞ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Å—Ç–∞—Ç—É—Å–∞
                keyboard = []

                # –ö–Ω–æ–ø–∫–∞ —á–∞—Ç–∞ –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç—Å—è –¥–ª—è –∑–∞–∫–∞–∑–æ–≤ –≤ —Ä–∞–±–æ—Ç–µ –∏–ª–∏ –Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫–µ
                if status in ['in_work', 'on_review']:
                    keyboard.append(
                        [InlineKeyboardButton("üí¨ –û—Ç–∫—Ä—ã—Ç—å —á–∞—Ç", callback_data=f'open_client_chat_{order["id"]}')])

                # –ö–Ω–æ–ø–∫–∏ –¥–ª—è –∑–∞–∫–∞–∑–∞ –Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫–µ
                if status == 'on_review':
                    keyboard.append([
                        InlineKeyboardButton("‚úÖ –ü—Ä–∏–Ω—è—Ç—å —Ä–∞–±–æ—Ç—É", callback_data=f'accept_work_{order["id"]}'),
                        InlineKeyboardButton("üîÑ –ù–∞ –¥–æ—Ä–∞–±–æ—Ç–∫—É", callback_data=f'request_revision_{order["id"]}')
                    ])

                # –ö–Ω–æ–ø–∫–∞ –¥–µ—Ç–∞–ª–µ–π –∑–∞–∫–∞–∑–∞
                keyboard.append([InlineKeyboardButton("üìã –î–µ—Ç–∞–ª–∏", callback_data=f'client_order_{order["id"]}')])

                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–Ω–æ–ø–∫–∞–º–∏
                if keyboard:
                    reply_markup = InlineKeyboardMarkup(keyboard)
                    await query.message.reply_text(order_text, reply_markup=reply_markup)
                else:
                    await query.message.reply_text(order_text)

        else:
            await query.edit_message_text("–£ –≤–∞—Å –Ω–µ—Ç –∑–∞–∫–∞–∑–æ–≤.")
    else:
        await query.edit_message_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–æ–π–¥–∏—Ç–µ –≤ —Å–∏—Å—Ç–µ–º—É —Å–Ω–∞—á–∞–ª–∞.")


async def show_client_order_details(update: Update, context: ContextTypes.DEFAULT_TYPE, order_id: str) -> None:
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –¥–µ—Ç–∞–ª–∏ –∑–∞–∫–∞–∑–∞ –∫–ª–∏–µ–Ω—Ç–∞ —Å –∫–Ω–æ–ø–∫–∞–º–∏ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Å—Ç–∞—Ç—É—Å–∞"""
    firebase = context.bot_data['firebase']
    user_id = update.callback_query.from_user.id
    client_login = firebase.get_client_by_chat_id(user_id)

    if not client_login:
        await update.callback_query.edit_message_text("–ù–µ–æ–±—Ö–æ–¥–∏–º–æ –≤–æ–π—Ç–∏ –≤ —Å–∏—Å—Ç–µ–º—É.")
        return

    order = firebase.get_order_by_id(order_id)
    if not order:
        await update.callback_query.edit_message_text("–ó–∞–∫–∞–∑ –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        return

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–æ –∑–∞–∫–∞–∑ –∫–ª–∏–µ–Ω—Ç–∞
    if order.get('customer', {}).get('username') != client_login:
        await update.callback_query.edit_message_text("–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–º—É –∑–∞–∫–∞–∑—É.")
        return

    status = order.get('status', 'unknown')
    status_map = {
        'in_work': '–í —Ä–∞–±–æ—Ç–µ',
        'on_review': '–ù–∞ –ø—Ä–æ–≤–µ—Ä–∫–µ',
        'completed': '–ó–∞–≤–µ—Ä—à–µ–Ω',
        'cancelled': '–û—Ç–º–µ–Ω–µ–Ω',
        'dispute': '–°–ø–æ—Ä',
        'pending': '–û–∂–∏–¥–∞–µ—Ç –ø—Ä–∏–Ω—è—Ç–∏—è',
        'waiting_payment': '–û–∂–∏–¥–∞–µ—Ç –æ–ø–ª–∞—Ç—ã',
        'payment_confirmed': '–û–ø–ª–∞—Ç–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞'
    }

    status_text = status_map.get(status, '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')
    executor_name = order.get('executor', {}).get('username', '–ù–µ –Ω–∞–∑–Ω–∞—á–µ–Ω')

    details_text = f"–î–ï–¢–ê–õ–ò –ó–ê–ö–ê–ó–ê\n"
    details_text += f"‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n\n"
    details_text += f"–ù–∞–∑–≤–∞–Ω–∏–µ: {order.get('title', '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è')}\n"
    details_text += f"–û–ø–∏—Å–∞–Ω–∏–µ: {order.get('description', '–û–ø–∏—Å–∞–Ω–∏–µ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç')}\n"
    details_text += f"–ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å: {executor_name}\n"
    details_text += f"–ë—é–¥–∂–µ—Ç: {order.get('amount', 0)} —Ä—É–±.\n"
    details_text += f"–°—Ç–∞—Ç—É—Å: {status_text}\n"

    keyboard = []

    # –ö–Ω–æ–ø–∫–∞ —á–∞—Ç–∞ –¥–ª—è –∑–∞–∫–∞–∑–æ–≤ –≤ —Ä–∞–±–æ—Ç–µ –∏–ª–∏ –Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫–µ
    if status in ['in_work', 'on_review']:
        keyboard.append([InlineKeyboardButton("üí¨ –û—Ç–∫—Ä—ã—Ç—å —á–∞—Ç", callback_data=f'open_client_chat_{order_id}')])

    # –ö–Ω–æ–ø–∫–∏ –¥–ª—è –∑–∞–∫–∞–∑–∞ –Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫–µ
    if status == 'on_review':
        keyboard.append([
            InlineKeyboardButton("‚úÖ –ü—Ä–∏–Ω—è—Ç—å —Ä–∞–±–æ—Ç—É", callback_data=f'accept_work_{order_id}'),
            InlineKeyboardButton("üîÑ –ù–∞ –¥–æ—Ä–∞–±–æ—Ç–∫—É", callback_data=f'request_revision_{order_id}')
        ])

    keyboard.append([InlineKeyboardButton("‚óÄÔ∏è –ö –º–æ–∏–º –∑–∞–∫–∞–∑–∞–º", callback_data='my_client_orders')])

    reply_markup = InlineKeyboardMarkup(keyboard)
    await update.callback_query.edit_message_text(details_text, reply_markup=reply_markup)


async def open_client_chat(update: Update, context: ContextTypes.DEFAULT_TYPE, order_id: str) -> None:
    """–û—Ç–∫—Ä—ã–≤–∞–µ—Ç —á–∞—Ç –¥–ª—è –∫–ª–∏–µ–Ω—Ç–∞"""
    firebase = context.bot_data['firebase']
    user_id = update.callback_query.from_user.id
    client_login = firebase.get_client_by_chat_id(user_id)

    if not client_login:
        await update.callback_query.edit_message_text("–ù–µ–æ–±—Ö–æ–¥–∏–º–æ –≤–æ–π—Ç–∏ –≤ —Å–∏—Å—Ç–µ–º—É.")
        return

    order = firebase.get_order_by_id(order_id)
    if not order:
        await update.callback_query.edit_message_text("–ó–∞–∫–∞–∑ –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        return

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞
    if order.get('customer', {}).get('username') != client_login:
        await update.callback_query.edit_message_text("–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–º—É –∑–∞–∫–∞–∑—É.")
        return

    executor_name = order.get('executor', {}).get('username', '–ù–µ –Ω–∞–∑–Ω–∞—á–µ–Ω')

    # –ü–æ–ª—É—á–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è –∏–∑ —á–∞—Ç–∞
    messages = firebase.get_messages_by_order(order_id)

    chat_text = f"–ß–ê–¢ –ü–û –ó–ê–ö–ê–ó–£\n"
    chat_text += f"‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n"
    chat_text += f"–ó–∞–∫–∞–∑: {order.get('title', '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è')}\n"
    chat_text += f"–ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å: {executor_name}\n\n"

    if messages:
        chat_text += "–ü–æ—Å–ª–µ–¥–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è:\n"
        chat_text += "‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ\n"

        for msg in messages[-10:]:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ 10 —Å–æ–æ–±—â–µ–Ω–∏–π
            role_text = "–í—ã" if msg.get('user_role') == 'customer' else "–ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å"
            if msg.get('user_role') == 'admin':
                role_text = "–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä"

            chat_text += f"{role_text}: {msg.get('text', '')}\n\n"
    else:
        chat_text += "–°–æ–æ–±—â–µ–Ω–∏–π –ø–æ–∫–∞ –Ω–µ—Ç\n\n"

    chat_text += "–î–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –ø—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏—Ç–µ —Ç–µ–∫—Å—Ç."

    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ —á–∞—Ç–∞
    firebase.set_user_state(user_id, f'in_client_chat_{order_id}')

    keyboard = [
        [InlineKeyboardButton("üîÑ –û–±–Ω–æ–≤–∏—Ç—å", callback_data=f'open_client_chat_{order_id}')],
        [InlineKeyboardButton("‚óÄÔ∏è –ö –¥–µ—Ç–∞–ª—è–º –∑–∞–∫–∞–∑–∞", callback_data=f'client_order_{order_id}')]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)

    await update.callback_query.edit_message_text(chat_text, reply_markup=reply_markup)


async def accept_work(update: Update, context: ContextTypes.DEFAULT_TYPE, order_id: str) -> None:
    """–ü—Ä–∏–Ω—è—Ç–∏–µ —Ä–∞–±–æ—Ç—ã –∫–ª–∏–µ–Ω—Ç–æ–º"""
    firebase = context.bot_data['firebase']
    user_id = update.callback_query.from_user.id
    client_login = firebase.get_client_by_chat_id(user_id)

    if not client_login:
        await update.callback_query.edit_message_text("–ù–µ–æ–±—Ö–æ–¥–∏–º–æ –≤–æ–π—Ç–∏ –≤ —Å–∏—Å—Ç–µ–º—É.")
        return

    order = firebase.get_order_by_id(order_id)
    if not order or order.get('customer', {}).get('username') != client_login:
        await update.callback_query.edit_message_text("–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–º—É –∑–∞–∫–∞–∑—É.")
        return

    # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –∑–∞–∫–∞–∑–∞
    firebase.update_order(order_id, {
        'status': 'completed',
        'completed_at': datetime.now(),
        'client_accepted': True
    })

    # –ü–µ—Ä–µ–≤–æ–¥–∏–º –¥–µ–Ω—å–≥–∏ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—é
    executor_username = order.get('executor', {}).get('username')
    if executor_username:
        order_amount = order.get('amount', 0)
        firebase.update_balance(executor_username, order_amount)

        # –£–≤–µ–¥–æ–º–ª—è–µ–º –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è
        executor_chat_id = firebase.get_user_chat_id_by_username(executor_username)
        if executor_chat_id:
            try:
                await context.bot.send_message(
                    chat_id=executor_chat_id,
                    text=f"üéâ –ó–ê–ö–ê–ó –ü–†–ò–ù–Ø–¢ –ö–õ–ò–ï–ù–¢–û–ú!\n\n"
                         f"üìã –ó–∞–∫–∞–∑: {order.get('title', '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è')}\n"
                         f"üí∞ –í—ã –ø–æ–ª—É—á–∏–ª–∏: {order_amount} —Ä—É–±.\n\n"
                         f"–°–ø–∞—Å–∏–±–æ –∑–∞ –æ—Ç–ª–∏—á–Ω—É—é —Ä–∞–±–æ—Ç—É!"
                )
            except Exception as e:
                print(f"–û—à–∏–±–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è: {e}")

    await update.callback_query.edit_message_text(
        "‚úÖ –†–ê–ë–û–¢–ê –ü–†–ò–ù–Ø–¢–ê!\n\n"
        f"–ó–∞–∫–∞–∑: {order.get('title', '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è')}\n"
        f"–ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å –ø–æ–ª—É—á–∏–ª –æ–ø–ª–∞—Ç—É: {order.get('amount', 0)} —Ä—É–±.\n\n"
        "–°–ø–∞—Å–∏–±–æ –∑–∞ —Ä–∞–±–æ—Ç—É —Å –Ω–∞–º–∏!"
    )


async def request_revision(update: Update, context: ContextTypes.DEFAULT_TYPE, order_id: str) -> None:
    """–û—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞–∫–∞–∑–∞ –Ω–∞ –¥–æ—Ä–∞–±–æ—Ç–∫—É"""
    firebase = context.bot_data['firebase']
    user_id = update.callback_query.from_user.id
    client_login = firebase.get_client_by_chat_id(user_id)

    if not client_login:
        await update.callback_query.edit_message_text("–ù–µ–æ–±—Ö–æ–¥–∏–º–æ –≤–æ–π—Ç–∏ –≤ —Å–∏—Å—Ç–µ–º—É.")
        return

    order = firebase.get_order_by_id(order_id)
    if not order or order.get('customer', {}).get('username') != client_login:
        await update.callback_query.edit_message_text("–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–º—É –∑–∞–∫–∞–∑—É.")
        return

    # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –∑–∞–∫–∞–∑–∞
    firebase.update_order(order_id, {
        'status': 'in_work',
        'revision_requested_at': datetime.now(),
        'revision_count': order.get('revision_count', 0) + 1
    })

    # –£–≤–µ–¥–æ–º–ª—è–µ–º –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è
    executor_username = order.get('executor', {}).get('username')
    if executor_username:
        executor_chat_id = firebase.get_user_chat_id_by_username(executor_username)
        if executor_chat_id:
            # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è
            keyboard = [
                [InlineKeyboardButton("üí¨ –û—Ç–∫—Ä—ã—Ç—å —á–∞—Ç —Å –∫–ª–∏–µ–Ω—Ç–æ–º", callback_data=f'open_contractor_chat_{order_id}')],
                [InlineKeyboardButton("üéØ –°–¥–∞—Ç—å –∑–∞–∫–∞–∑ –Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫—É", callback_data=f'submit_work_{order_id}')]
            ]
            reply_markup = InlineKeyboardMarkup(keyboard)

            try:
                await context.bot.send_message(
                    chat_id=executor_chat_id,
                    text=f"üîÑ –ó–ê–ö–ê–ó –û–¢–ü–†–ê–í–õ–ï–ù –ù–ê –î–û–†–ê–ë–û–¢–ö–£\n\n"
                         f"üìã –ó–∞–∫–∞–∑: {order.get('title', '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è')}\n"
                         f"üë§ –ö–ª–∏–µ–Ω—Ç: {client_login}\n\n"
                         f"–ö–ª–∏–µ–Ω—Ç –ø—Ä–æ—Å–∏—Ç –≤–Ω–µ—Å—Ç–∏ –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤ —Ä–∞–±–æ—Ç—É.\n"
                         f"–°–≤—è–∂–∏—Ç–µ—Å—å —Å –Ω–∏–º —á–µ—Ä–µ–∑ —á–∞—Ç –¥–ª—è —É—Ç–æ—á–Ω–µ–Ω–∏—è –¥–µ—Ç–∞–ª–µ–π.",
                    reply_markup=reply_markup
                )
            except Exception as e:
                print(f"–û—à–∏–±–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è: {e}")

    await update.callback_query.edit_message_text(
        "üîÑ –ó–ê–ö–ê–ó –û–¢–ü–†–ê–í–õ–ï–ù –ù–ê –î–û–†–ê–ë–û–¢–ö–£\n\n"
        f"–ó–∞–∫–∞–∑: {order.get('title', '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è')}\n\n"
        "–ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å –ø–æ–ª—É—á–∏–ª —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ –¥–æ—Ä–∞–±–æ—Ç–∫–∏.\n"
        "–í—ã –º–æ–∂–µ—Ç–µ –æ–±—Å—É–¥–∏—Ç—å –¥–µ—Ç–∞–ª–∏ –≤ —á–∞—Ç–µ –∑–∞–∫–∞–∑–∞."
    )


async def our_works(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–ü–æ–∫–∞–∑ –Ω–∞—à–∏—Ö —Ä–∞–±–æ—Ç –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º —Å Firebase"""
    firebase = context.bot_data['firebase']

    works_text = "üé® –ù–ê–®–ò –†–ê–ë–û–¢–´\n\n"
    works_text += "–ü–æ—Å–º–æ—Ç—Ä–∏—Ç–µ –ø—Ä–∏–º–µ—Ä—ã –Ω–∞—à–∏—Ö –ø—Ä–æ–µ–∫—Ç–æ–≤ –ø–æ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è–º:"

    keyboard = [
        [InlineKeyboardButton("üåê –°–∞–π—Ç—ã", callback_data='category_sites')],
        [InlineKeyboardButton("üé¨ –í–∏–¥–µ–æ", callback_data='category_video')],
        [InlineKeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data='client')]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)

    await update.callback_query.edit_message_text(works_text, reply_markup=reply_markup)


async def category_sites(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–ü–æ–∫–∞–∑ —Ä–∞–±–æ—Ç –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ '–°–∞–π—Ç—ã'"""
    firebase = context.bot_data['firebase']

    sites_text = "üåê –ù–ê–®–ò –°–ê–ô–¢–´\n\n"
    sites_text += "–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –ø—Ä–æ–µ–∫—Ç–∞:"

    keyboard = [
        [InlineKeyboardButton("üìÑ –õ–µ–Ω–¥–∏–Ω–≥–∏", callback_data='subcategory_landing')],
        [InlineKeyboardButton("üõí –ò–Ω—Ç–µ—Ä–Ω–µ—Ç-–º–∞–≥–∞–∑–∏–Ω—ã", callback_data='subcategory_shop')],
        [InlineKeyboardButton("üè¢ –ö–æ—Ä–ø–æ—Ä–∞—Ç–∏–≤–Ω—ã–µ —Å–∞–π—Ç—ã", callback_data='subcategory_corporate')],
        [InlineKeyboardButton("‚óÄÔ∏è –ö —Ä–∞–±–æ—Ç–∞–º", callback_data='our_works')]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)

    await update.callback_query.edit_message_text(sites_text, reply_markup=reply_markup)


async def category_video(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–ü–æ–∫–∞–∑ —Ä–∞–±–æ—Ç –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ '–í–∏–¥–µ–æ'"""
    firebase = context.bot_data['firebase']

    video_text = "üé¨ –ù–ê–®–ò –í–ò–î–ï–û\n\n"
    video_text += "–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –ø—Ä–æ–µ–∫—Ç–∞:"

    keyboard = [
        [InlineKeyboardButton("üì∫ –†–µ–∫–ª–∞–º–Ω—ã–µ —Ä–æ–ª–∏–∫–∏", callback_data='subcategory_ads')],
        [InlineKeyboardButton("üì± –ö—Ä–µ–∞—Ç–∏–≤—ã –¥–ª—è —Å–æ—Ü—Å–µ—Ç–µ–π", callback_data='subcategory_social')],
        [InlineKeyboardButton("üé® –ê–Ω–∏–º–∞—Ü–∏—è", callback_data='subcategory_animation')],
        [InlineKeyboardButton("‚óÄÔ∏è –ö —Ä–∞–±–æ—Ç–∞–º", callback_data='our_works')]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)

    await update.callback_query.edit_message_text(video_text, reply_markup=reply_markup)


async def show_subcategory_works(update: Update, context: ContextTypes.DEFAULT_TYPE, subcategory: str) -> None:
    """–ü–æ–∫–∞–∑ —Ä–∞–±–æ—Ç –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏–∏"""
    firebase = context.bot_data['firebase']
    works = firebase.get_works_by_subcategory(subcategory)

    subcategory_names = {
        'landing': '–õ–µ–Ω–¥–∏–Ω–≥–∏',
        'shop': '–ò–Ω—Ç–µ—Ä–Ω–µ—Ç-–º–∞–≥–∞–∑–∏–Ω—ã',
        'corporate': '–ö–æ—Ä–ø–æ—Ä–∞—Ç–∏–≤–Ω—ã–µ —Å–∞–π—Ç—ã',
        'ads': '–†–µ–∫–ª–∞–º–Ω—ã–µ —Ä–æ–ª–∏–∫–∏',
        'social': '–ö—Ä–µ–∞—Ç–∏–≤—ã –¥–ª—è —Å–æ—Ü—Å–µ—Ç–µ–π',
        'animation': '–ê–Ω–∏–º–∞—Ü–∏—è'
    }

    category_name = subcategory_names.get(subcategory, '–†–∞–±–æ—Ç—ã')

    if works:
        works_text = f"{category_name.upper()}\n\n"
        works_text += f"–ù–∞–π–¥–µ–Ω–æ –ø—Ä–æ–µ–∫—Ç–æ–≤: {len(works)}"

        keyboard = []
        for i, work in enumerate(works):
            keyboard.append([InlineKeyboardButton(
                f"{i + 1}. {work.get('title', '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è')}",
                callback_data=f'portfolio_item_{subcategory}_{i}'
            )])

        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∫–Ω–æ–ø–∫—É "–ù–∞–∑–∞–¥" –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
        if subcategory in ['landing', 'shop', 'corporate']:
            keyboard.append([InlineKeyboardButton("‚óÄÔ∏è –ö —Å–∞–π—Ç–∞–º", callback_data='category_sites')])
        else:
            keyboard.append([InlineKeyboardButton("‚óÄÔ∏è –ö –≤–∏–¥–µ–æ", callback_data='category_video')])

        reply_markup = InlineKeyboardMarkup(keyboard)
        await update.callback_query.edit_message_text(works_text, reply_markup=reply_markup)
    else:
        back_callback = 'category_sites' if subcategory in ['landing', 'shop', 'corporate'] else 'category_video'

        keyboard = [[InlineKeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data=back_callback)]]
        reply_markup = InlineKeyboardMarkup(keyboard)

        await update.callback_query.edit_message_text(
            f"{category_name}\n\n–í —ç—Ç–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –ø–æ–∫–∞ –Ω–µ—Ç —Ä–∞–±–æ—Ç.",
            reply_markup=reply_markup
        )


async def show_portfolio_item(update: Update, context: ContextTypes.DEFAULT_TYPE, category: str, index: int) -> None:
    """–ü–æ–∫–∞–∑ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ —ç–ª–µ–º–µ–Ω—Ç–∞ –ø–æ—Ä—Ç—Ñ–æ–ª–∏–æ"""
    firebase = context.bot_data['firebase']
    works = firebase.get_works_by_subcategory(category)

    if works and index < len(works):
        work = works[index]

        caption = f"üìã {work.get('title', '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è')}\n"
        caption += f"üìù {work.get('description', '–û–ø–∏—Å–∞–Ω–∏–µ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç')}\n"

        if work.get('url'):
            caption += f"üîó –°—Å—ã–ª–∫–∞: {work['url']}\n"

        if work.get('price'):
            caption += f"üí∞ –°—Ç–æ–∏–º–æ—Å—Ç—å: {work['price']} —Ä—É–±."

        keyboard = [[InlineKeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥ –∫ —Å–ø–∏—Å–∫—É", callback_data=f'subcategory_{category}')]]
        reply_markup = InlineKeyboardMarkup(keyboard)

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–æ—Ç–æ –∏–ª–∏ —Ç–µ–∫—Å—Ç
        if work.get('photo') and work.get('photo_type') == 'file_id':
            await update.callback_query.message.reply_photo(
                work['photo'],
                caption=caption,
                reply_markup=reply_markup
            )
        else:
            await update.callback_query.edit_message_text(caption, reply_markup=reply_markup)
    else:
        keyboard = [[InlineKeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data=f'subcategory_{category}')]]
        reply_markup = InlineKeyboardMarkup(keyboard)
        await update.callback_query.edit_message_text("–†–∞–±–æ—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.", reply_markup=reply_markup)


async def handle_order_response(update: Update, context: ContextTypes.DEFAULT_TYPE, action: str,
                                customer_id: int) -> None:
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–≤–µ—Ç–∞ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è –Ω–∞ –∑–∞–∫–∞–∑"""
    firebase = context.bot_data['firebase']
    query = update.callback_query
    contractor_user_id = query.from_user.id
    contractor_login = firebase.get_entrepreneur_by_chat_id(contractor_user_id)

    if not contractor_login:
        await query.edit_message_text("–û—à–∏–±–∫–∞: –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –≤–æ–π—Ç–∏ –≤ —Å–∏—Å—Ç–µ–º—É.")
        return

    if action == 'accept':
        # –ò—â–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–π –∑–∞–∫–∞–∑ –¥–ª—è –¥–∞–Ω–Ω–æ–≥–æ –∫–ª–∏–µ–Ω—Ç–∞ —Å –¥–∞–Ω–Ω—ã–º –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª–µ–º
        orders_ref = firebase.db.collection('orders')

        # –ü–æ–ª—É—á–∞–µ–º –∫–ª–∏–µ–Ω—Ç–∞ –ø–æ customer_id
        customer_login = firebase.get_client_by_chat_id(customer_id)
        if not customer_login:
            await query.edit_message_text("–û—à–∏–±–∫–∞: –∫–ª–∏–µ–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω.")
            return

        # –ò—â–µ–º –∑–∞–∫–∞–∑—ã –∫–ª–∏–µ–Ω—Ç–∞ —Å–æ —Å—Ç–∞—Ç—É—Å–æ–º pending
        query_orders = orders_ref.where('customer.username', '==', customer_login).where('status', '==',
                                                                                         'pending').where(
            'executor.username', '==', contractor_login)
        orders = query_orders.get()

        if orders:
            # –ë–µ—Ä–µ–º –ø–µ—Ä–≤—ã–π –Ω–∞–π–¥–µ–Ω–Ω—ã–π –∑–∞–∫–∞–∑
            order_doc = orders[0]
            order_id = order_doc.id

            # –û–±–Ω–æ–≤–ª—è–µ–º –∑–∞–∫–∞–∑ –≤ Firebase
            firebase.update_order(order_id, {
                'accepted': True,
                'status': 'accepted_waiting_payment',
                'executor': {
                    'id': str(contractor_user_id),
                    'username': contractor_login
                },
                'accepted_at': datetime.now()
            })

            await query.edit_message_text("–ó–∞–∫–∞–∑ –ø—Ä–∏–Ω—è—Ç! –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–ª–∏–µ–Ω—Ç—É QR-–∫–æ–¥ –¥–ª—è –æ–ø–ª–∞—Ç—ã...")

            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º QR-–∫–æ–¥ –¥–ª—è –æ–ø–ª–∞—Ç—ã
            from payment_handlers import send_payment_request
            await send_payment_request(update, context, order_id)

            # –£–≤–µ–¥–æ–º–ª—è–µ–º –∫–ª–∏–µ–Ω—Ç–∞
            try:
                await context.bot.send_message(
                    chat_id=customer_id,
                    text=f"üéâ –û—Ç–ª–∏—á–Ω–æ! –ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å {contractor_login} –ø—Ä–∏–Ω—è–ª –≤–∞—à –∑–∞–∫–∞–∑.\n\n"
                         f"–î–ª—è –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –ø—Ä–æ–∏–∑–≤–µ—Å—Ç–∏ –æ–ø–ª–∞—Ç—É.\n"
                         f"QR-–∫–æ–¥ –¥–ª—è –æ–ø–ª–∞—Ç—ã –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –≤–∞–º –æ—Ç–¥–µ–ª—å–Ω—ã–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º."
                )
            except Exception as e:
                print(f"–û—à–∏–±–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∫–ª–∏–µ–Ω—Ç–∞: {e}")

        else:
            await query.edit_message_text("–û—à–∏–±–∫–∞: –ø–æ–¥—Ö–æ–¥—è—â–∏–π –∑–∞–∫–∞–∑ –Ω–µ –Ω–∞–π–¥–µ–Ω.")

    elif action == 'decline':
        await query.edit_message_text("–ó–∞–∫–∞–∑ –æ—Ç–∫–ª–æ–Ω–µ–Ω.")

        try:
            await context.bot.send_message(
                chat_id=customer_id,
                text="–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å –Ω–µ –º–æ–∂–µ—Ç –≤–∑—è—Ç—å –≤–∞—à –∑–∞–∫–∞–∑. –ú—ã –Ω–∞–π–¥–µ–º –¥—Ä—É–≥–æ–≥–æ —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–∞."
            )
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∫–ª–∏–µ–Ω—Ç–∞: {e}")


async def open_chat(update: Update, context: ContextTypes.DEFAULT_TYPE, chat_id: str) -> None:
    """–£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –æ—Ç–∫—Ä—ã—Ç–∏—è —á–∞—Ç–∞"""
    await update.callback_query.edit_message_text(
        f"–ß–∞—Ç {chat_id}\n\n–ó–¥–µ—Å—å –±—É–¥—É—Ç –æ—Ç–æ–±—Ä–∞–∂–∞—Ç—å—Å—è —Å–æ–æ–±—â–µ–Ω–∏—è..."
    )


async def process_order_acceptance(update: Update, context: ContextTypes.DEFAULT_TYPE, order_name: str,
                                   customer_id: int) -> None:
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø—Ä–∏–Ω—è—Ç–∏—è –∑–∞–∫–∞–∑–∞ –ø–æ—Å–ª–µ –≤–≤–æ–¥–∞ –Ω–∞–∑–≤–∞–Ω–∏—è"""
    firebase = context.bot_data['firebase']
    user_id = update.message.from_user.id
    contractor_login = firebase.get_entrepreneur_by_chat_id(user_id)

    if not contractor_login:
        await update.message.reply_text("–û—à–∏–±–∫–∞: –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –≤–æ–π—Ç–∏ –≤ —Å–∏—Å—Ç–µ–º—É.")
        return

    # –°–æ–∑–¥–∞–µ–º –∑–∞–∫–∞–∑ —Å –Ω–∞–∑–≤–∞–Ω–∏–µ–º
    order_data = {
        'title': order_name,
        'description': context.user_data.get('order_description', '–û–ø–∏—Å–∞–Ω–∏–µ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç'),
        'customer': {'id': str(customer_id)},
        'executor': {
            'id': str(user_id),
            'username': contractor_login
        },
        'amount': context.user_data.get('order_amount', 0),
        'status': 'in_work',
        'accepted': True,
        'created_date': datetime.now()
    }

    order_id = firebase.create_order(order_data)

    await update.message.reply_text(f"–ó–∞–∫–∞–∑ '{order_name}' –ø—Ä–∏–Ω—è—Ç –∏ —Å–æ–∑–¥–∞–Ω!")

    # –£–≤–µ–¥–æ–º–ª—è–µ–º –∫–ª–∏–µ–Ω—Ç–∞
    try:
        await context.bot.send_message(
            chat_id=customer_id,
            text=f"–ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å {contractor_login} –ø—Ä–∏–Ω—è–ª –≤–∞—à –∑–∞–∫–∞–∑ '{order_name}' –∏ –ø—Ä–∏—Å—Ç—É–ø–∞–µ—Ç –∫ —Ä–∞–±–æ—Ç–µ!"
        )
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∫–ª–∏–µ–Ω—Ç–∞: {e}")