# utils.py
import re
from typing import Optional, Tuple
from datetime import datetime, timedelta


def format_order_info(description: str, deadline: str, budget: str, client_login: str = "–ù–µ —É–∫–∞–∑–∞–Ω") -> str:
    """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∑–∞–∫–∞–∑–µ"""
    return (f"–ù–æ–≤—ã–π –∑–∞–∫–∞–∑:\n"
            f"–û–ø–∏—Å–∞–Ω–∏–µ: {description}\n"
            f"–°—Ä–æ–∫–∏: {deadline}\n"
            f"–ë—é–¥–∂–µ—Ç: {budget}\n"
            f"–ó–∞–∫–∞–∑—á–∏–∫: {client_login}")


def is_valid_number(text: str) -> bool:
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Å—Ç—Ä–æ–∫–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–º —á–∏—Å–ª–æ–º"""
    try:
        float(text.replace(' ', ''))
        return True
    except ValueError:
        return False


def parse_number(text: str) -> Optional[float]:
    """–ü–∞—Ä—Å–∏—Ç —á–∏—Å–ª–æ –∏–∑ —Å—Ç—Ä–æ–∫–∏"""
    try:
        return float(text.replace(' ', ''))
    except ValueError:
        return None


def is_valid_rating(rating: int) -> bool:
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –∫–æ—Ä—Ä–µ–∫—Ç–µ–Ω –ª–∏ —Ä–µ–π—Ç–∏–Ω–≥"""
    return 1 <= rating <= 10


def format_entrepreneur_info(login: str, password: str, rating: int, balance: float, chat_id: Optional[int]) -> str:
    """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª–µ"""
    chat_id_str = str(chat_id) if chat_id is not None else '–ù–µ —É–∫–∞–∑–∞–Ω'
    return (f"–õ–æ–≥–∏–Ω: {login}\n"
            f"–ü–∞—Ä–æ–ª—å: {password}\n"
            f"–†–µ–π—Ç–∏–Ω–≥: {rating}/10\n"
            f"–ë–∞–ª–∞–Ω—Å: {balance} —Ä—É–±.\n"
            f"Chat ID: {chat_id_str}")


def format_entrepreneur_list_item(login: str, rating: int, balance: float) -> str:
    """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —ç–ª–µ–º–µ–Ω—Ç —Å–ø–∏—Å–∫–∞ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª–µ–π"""
    return f"{login} (‚òÖ{rating} | {balance}‚ÇΩ)"


def parse_deadline_to_hours(deadline_text: str) -> Optional[int]:
    """
    –ü–∞—Ä—Å–∏—Ç –≤—Ä–µ–º—è –∏–∑ —Ç–µ–∫—Å—Ç–∞ —Å—Ä–æ–∫–æ–≤ –≤ —á–∞—Å—ã.
    –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç —Ñ–æ—Ä–º–∞—Ç—ã:
    - "2 –¥–Ω—è" -> 48 —á–∞—Å–æ–≤
    - "3 —á–∞—Å–∞" -> 3 —á–∞—Å–∞
    - "1 –Ω–µ–¥–µ–ª—è" -> 168 —á–∞—Å–æ–≤
    - "30 –º–∏–Ω—É—Ç" -> 0.5 —á–∞—Å–∞ (–æ–∫—Ä—É–≥–ª—è–µ—Ç—Å—è –¥–æ 1)
    """
    deadline_text = deadline_text.lower().strip()

    # –†–µ–≥—É–ª—è—Ä–Ω—ã–µ –≤—ã—Ä–∞–∂–µ–Ω–∏—è –¥–ª—è —Ä–∞–∑–Ω—ã—Ö —Ñ–æ—Ä–º–∞—Ç–æ–≤
    patterns = [
        (r'(\d+)\s*(?:–¥–Ω—è|–¥–µ–Ω—å|–¥–Ω–µ–π)', lambda x: int(x) * 24),
        (r'(\d+)\s*(?:—á–∞—Å–∞|—á–∞—Å|—á–∞—Å–æ–≤)', lambda x: int(x)),
        (r'(\d+)\s*(?:–Ω–µ–¥–µ–ª–∏|–Ω–µ–¥–µ–ª—è|–Ω–µ–¥–µ–ª—å)', lambda x: int(x) * 24 * 7),
        (r'(\d+)\s*(?:–º–∏–Ω—É—Ç|–º–∏–Ω—É—Ç–∞|–º–∏–Ω—É—Ç—ã)', lambda x: max(1, int(x) // 60)),  # –º–∏–Ω–∏–º—É–º 1 —á–∞—Å
    ]

    for pattern, converter in patterns:
        match = re.search(pattern, deadline_text)
        if match:
            return converter(match.group(1))

    return None


def calculate_end_time(deadline_text: str) -> Optional[datetime]:
    """–í—ã—á–∏—Å–ª—è–µ—Ç –≤—Ä–µ–º—è –æ–∫–æ–Ω—á–∞–Ω–∏—è –∑–∞–∫–∞–∑–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ç–µ–∫—Å—Ç–∞ —Å—Ä–æ–∫–æ–≤"""
    hours = parse_deadline_to_hours(deadline_text)
    if hours:
        return datetime.now() + timedelta(hours=hours)
    return None


def format_time_remaining(end_time: datetime) -> str:
    """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –æ—Å—Ç–∞–≤—à–µ–µ—Å—è –≤—Ä–µ–º—è –¥–æ –æ–∫–æ–Ω—á–∞–Ω–∏—è"""
    now = datetime.now()
    if now >= end_time:
        return "‚è∞ –í—Ä–µ–º—è –∏—Å—Ç–µ–∫–ª–æ!"

    diff = end_time - now
    days = diff.days
    hours, remainder = divmod(diff.seconds, 3600)
    minutes, _ = divmod(remainder, 60)

    if days > 0:
        return f"‚è± –û—Å—Ç–∞–ª–æ—Å—å: {days} –¥–Ω. {hours} —á. {minutes} –º–∏–Ω."
    elif hours > 0:
        return f"‚è± –û—Å—Ç–∞–ª–æ—Å—å: {hours} —á. {minutes} –º–∏–Ω."
    else:
        return f"‚è± –û—Å—Ç–∞–ª–æ—Å—å: {minutes} –º–∏–Ω."


def is_order_expired(end_time: datetime) -> bool:
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –∏—Å—Ç–µ–∫ –ª–∏ —Å—Ä–æ–∫ –∑–∞–∫–∞–∑–∞"""
    return datetime.now() >= end_time


def get_user_role_in_chat(user_chat_id: int, chat_data: dict) -> str:
    """–û–ø—Ä–µ–¥–µ–ª—è–µ—Ç —Ä–æ–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —á–∞—Ç–µ (client/contractor)"""
    if chat_data.get('client_chat_id') == user_chat_id:
        return 'client'
    elif chat_data.get('contractor_chat_id') == user_chat_id:
        return 'contractor'
    return 'unknown'


def format_chat_message(sender_role: str, message: str) -> str:
    """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è —á–∞—Ç–∞"""
    role_name = "üë§ –ó–∞–∫–∞–∑—á–∏–∫" if sender_role == 'client' else "üë®‚Äçüíº –ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å"
    return f"{role_name}: {message}"