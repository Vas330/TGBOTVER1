# utils.py - –≤—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–∞–Ω–Ω—ã—Ö
import re


def is_valid_number(text: str) -> bool:
    """
    –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Å—Ç—Ä–æ–∫–∞ –≤–∞–ª–∏–¥–Ω—ã–º —á–∏—Å–ª–æ–º
    –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç —Ñ–æ—Ä–º–∞—Ç—ã: 1000, 1 000, 1,000, 1000.50, etc.
    """
    if not text or not isinstance(text, str):
        return False

    # –£–±–∏—Ä–∞–µ–º –ø—Ä–æ–±–µ–ª—ã –∏ –∑–∞–º–µ–Ω—è–µ–º –∑–∞–ø—è—Ç—ã–µ –Ω–∞ —Ç–æ—á–∫–∏
    cleaned = text.strip().replace(' ', '').replace(',', '.')

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å –ø–æ–º–æ—â—å—é —Ä–µ–≥—É–ª—è—Ä–Ω–æ–≥–æ –≤—ã—Ä–∞–∂–µ–Ω–∏—è
    # –ü–æ–∑–≤–æ–ª—è–µ—Ç —á–∏—Å–ª–∞ –≤–∏–¥–∞: 123, 123.45, .45
    number_pattern = r'^\d*\.?\d+$'

    if re.match(number_pattern, cleaned):
        try:
            float(cleaned)
            return True
        except ValueError:
            return False

    return False


def parse_number(text: str) -> float:
    """
    –ü–∞—Ä—Å–∏—Ç —Å—Ç—Ä–æ–∫—É –≤ —á–∏—Å–ª–æ
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç 0.0 –µ—Å–ª–∏ –ø–∞—Ä—Å–∏–Ω–≥ –Ω–µ–≤–æ–∑–º–æ–∂–µ–Ω
    """
    if not is_valid_number(text):
        return 0.0

    # –£–±–∏—Ä–∞–µ–º –ø—Ä–æ–±–µ–ª—ã –∏ –∑–∞–º–µ–Ω—è–µ–º –∑–∞–ø—è—Ç—ã–µ –Ω–∞ —Ç–æ—á–∫–∏
    cleaned = text.strip().replace(' ', '').replace(',', '.')

    try:
        return float(cleaned)
    except ValueError:
        return 0.0


def format_order_info(description: str, deadline: str, budget: str, customer: str) -> str:
    """
    –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∑–∞–∫–∞–∑–µ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—é
    """
    budget_num = parse_number(budget)

    formatted_info = f"""üìã –î–ï–¢–ê–õ–ò –ó–ê–ö–ê–ó–ê

üìù –û–ø–∏—Å–∞–Ω–∏–µ: {description}

‚è∞ –°—Ä–æ–∫–∏: {deadline}

üí∞ –ë—é–¥–∂–µ—Ç: {budget_num:,.0f} —Ä—É–±.

üë§ –ó–∞–∫–∞–∑—á–∏–∫: {customer}

–ì–æ—Ç–æ–≤—ã –≤–∑—è—Ç—å—Å—è –∑–∞ —ç—Ç–æ—Ç –ø—Ä–æ–µ–∫—Ç?"""

    return formatted_info


def format_currency(amount: float) -> str:
    """
    –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —Å—É–º–º—É –≤ —Ä—É–±–ª—è—Ö —Å —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª—è–º–∏ —Ç—ã—Å—è—á
    """
    return f"{amount:,.0f} —Ä—É–±.".replace(',', ' ')


def validate_phone(phone: str) -> bool:
    """
    –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞
    –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç —Ä–æ—Å—Å–∏–π—Å–∫–∏–µ –Ω–æ–º–µ—Ä–∞
    """
    if not phone or not isinstance(phone, str):
        return False

    # –£–±–∏—Ä–∞–µ–º –≤—Å–µ –ª–∏—à–Ω–∏–µ —Å–∏–º–≤–æ–ª—ã
    cleaned = re.sub(r'[^\d+]', '', phone.strip())

    # –ü–∞—Ç—Ç–µ—Ä–Ω—ã –¥–ª—è —Ä–æ—Å—Å–∏–π—Å–∫–∏—Ö –Ω–æ–º–µ—Ä–æ–≤
    patterns = [
        r'^\+7\d{10}$',  # +7XXXXXXXXXX
        r'^8\d{10}$',  # 8XXXXXXXXXX
        r'^7\d{10}$',  # 7XXXXXXXXXX
        r'^\d{10}$'  # XXXXXXXXXX
    ]

    return any(re.match(pattern, cleaned) for pattern in patterns)


def format_phone(phone: str) -> str:
    """
    –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –≤ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π –≤–∏–¥
    """
    if not validate_phone(phone):
        return phone

    # –£–±–∏—Ä–∞–µ–º –≤—Å–µ –ª–∏—à–Ω–∏–µ —Å–∏–º–≤–æ–ª—ã
    cleaned = re.sub(r'[^\d+]', '', phone.strip())

    # –ü—Ä–∏–≤–æ–¥–∏–º –∫ —Ñ–æ—Ä–º–∞—Ç—É +7XXXXXXXXXX
    if cleaned.startswith('+7') and len(cleaned) == 12:
        return cleaned
    elif cleaned.startswith('8') and len(cleaned) == 11:
        return '+7' + cleaned[1:]
    elif cleaned.startswith('7') and len(cleaned) == 11:
        return '+' + cleaned
    elif len(cleaned) == 10:
        return '+7' + cleaned

    return phone


def sanitize_string(text: str, max_length: int = 1000) -> str:
    """
    –û—á–∏—â–∞–µ—Ç —Å—Ç—Ä–æ–∫—É –æ—Ç –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω–æ –æ–ø–∞—Å–Ω—ã—Ö —Å–∏–º–≤–æ–ª–æ–≤
    """
    if not text or not isinstance(text, str):
        return ""

    # –£–±–∏—Ä–∞–µ–º –ª–∏—à–Ω–∏–µ –ø—Ä–æ–±–µ–ª—ã
    cleaned = ' '.join(text.split())

    # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –¥–ª–∏–Ω—É
    if len(cleaned) > max_length:
        cleaned = cleaned[:max_length] + "..."

    return cleaned


def extract_order_id_from_state(state: str, prefix: str) -> str:
    """
    –ò–∑–≤–ª–µ–∫–∞–µ—Ç ID –∑–∞–∫–∞–∑–∞ –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    –ù–∞–ø—Ä–∏–º–µ—Ä: 'in_client_chat_ORDER123' -> 'ORDER123'
    """
    if not state or not isinstance(state, str):
        return ""

    if state.startswith(prefix):
        return state[len(prefix):]

    return ""


def format_datetime(dt) -> str:
    """
    –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –¥–∞—Ç—É –∏ –≤—Ä–µ–º—è –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
    –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç Firebase Timestamp –∏ datetime –æ–±—ä–µ–∫—Ç—ã
    """
    try:
        if hasattr(dt, 'toDate'):  # Firebase Timestamp
            date_obj = dt.toDate()
        elif hasattr(dt, 'seconds'):  # Firebase Timestamp dict
            from datetime import datetime
            date_obj = datetime.fromtimestamp(dt.seconds)
        elif hasattr(dt, 'strftime'):  # datetime –æ–±—ä–µ–∫—Ç
            date_obj = dt
        else:
            return "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"

        return date_obj.strftime("%d.%m.%Y %H:%M")
    except:
        return "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"


def get_user_role_display(role: str) -> str:
    """
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —á–µ–ª–æ–≤–µ–∫–æ—á–∏—Ç–∞–µ–º–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ä–æ–ª–∏
    """
    roles = {
        'customer': '–ó–∞–∫–∞–∑—á–∏–∫',
        'client': '–ó–∞–∫–∞–∑—á–∏–∫',
        'executor': '–ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å',
        'entrepreneur': '–ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å',
        'admin': '–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä'
    }
    return roles.get(role, '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å')


def validate_username(username: str) -> tuple[bool, str]:
    """
    –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å –∏–º–µ–Ω–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç (is_valid, error_message)
    """
    if not username or not isinstance(username, str):
        return False, "–ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º"

    username = username.strip()

    if len(username) < 3:
        return False, "–ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–æ–ª–∂–Ω–æ —Å–æ–¥–µ—Ä–∂–∞—Ç—å –º–∏–Ω–∏–º—É–º 3 —Å–∏–º–≤–æ–ª–∞"

    if len(username) > 50:
        return False, "–ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ –¥–æ–ª–∂–Ω–æ –ø—Ä–µ–≤—ã—à–∞—Ç—å 50 —Å–∏–º–≤–æ–ª–æ–≤"

    # –†–∞–∑—Ä–µ—à–µ–Ω—ã —Ç–æ–ª—å–∫–æ –±—É–∫–≤—ã, —Ü–∏—Ñ—Ä—ã –∏ –ø–æ–¥—á–µ—Ä–∫–∏–≤–∞–Ω–∏–µ
    if not re.match(r'^[a-zA-Z–∞-—è–ê-–Ø0-9_]+$', username):
        return False, "–ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –º–æ–∂–µ—Ç —Å–æ–¥–µ—Ä–∂–∞—Ç—å —Ç–æ–ª—å–∫–æ –±—É–∫–≤—ã, —Ü–∏—Ñ—Ä—ã –∏ –ø–æ–¥—á–µ—Ä–∫–∏–≤–∞–Ω–∏–µ"

    return True, ""


def validate_password(password: str) -> tuple[bool, str]:
    """
    –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å –ø–∞—Ä–æ–ª—è
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç (is_valid, error_message)
    """
    if not password or not isinstance(password, str):
        return False, "–ü–∞—Ä–æ–ª—å –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º"

    if len(password) < 3:  # –£–ø—Ä–æ—â–µ–Ω–Ω–æ–µ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏–µ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
        return False, "–ü–∞—Ä–æ–ª—å –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å –º–∏–Ω–∏–º—É–º 3 —Å–∏–º–≤–æ–ª–∞"

    if len(password) > 100:
        return False, "–ü–∞—Ä–æ–ª—å –Ω–µ –¥–æ–ª–∂–µ–Ω –ø—Ä–µ–≤—ã—à–∞—Ç—å 100 —Å–∏–º–≤–æ–ª–æ–≤"

    return True, ""


def truncate_text(text: str, max_length: int = 100, suffix: str = "...") -> str:
    """
    –û–±—Ä–µ–∑–∞–µ—Ç —Ç–µ–∫—Å—Ç –¥–æ —É–∫–∞–∑–∞–Ω–Ω–æ–π –¥–ª–∏–Ω—ã —Å –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ–º —Å—É—Ñ—Ñ–∏–∫—Å–∞
    """
    if not text or len(text) <= max_length:
        return text or ""

    return text[:max_length - len(suffix)] + suffix


def generate_order_id() -> str:
    """
    –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —É–Ω–∏–∫–∞–ª—å–Ω—ã–π ID –¥–ª—è –∑–∞–∫–∞–∑–∞
    """
    import secrets
    import string

    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Å–ª—É—á–∞–π–Ω—É—é —Å—Ç—Ä–æ–∫—É –∏–∑ –±—É–∫–≤ –∏ —Ü–∏—Ñ—Ä
    chars = string.ascii_uppercase + string.digits
    return ''.join(secrets.choice(chars) for _ in range(12))


def is_admin_user(user_id: int, admin_ids: list = None) -> bool:
    """
    –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º
    """
    from config import ADMIN_ID

    if admin_ids is None:
        admin_ids = [ADMIN_ID]

    return user_id in admin_ids


def debug_print(message: str, level: str = "INFO"):
    """
    –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–ª–∞–¥–æ—á–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
    """
    from datetime import datetime
    timestamp = datetime.now().strftime("%H:%M:%S")
    print(f"[{timestamp}] [{level}] {message}")


# –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã –¥–ª—è –≤–∞–ª–∏–¥–∞—Ü–∏–∏
MAX_ORDER_TITLE_LENGTH = 200
MAX_ORDER_DESCRIPTION_LENGTH = 2000
MAX_MESSAGE_LENGTH = 4000
MIN_ORDER_AMOUNT = 100
MAX_ORDER_AMOUNT = 1000000