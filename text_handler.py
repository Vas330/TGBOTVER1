# text_handler.py
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import ContextTypes

from state_manager import user_state
from handlers_common import handle_admin_command


async def handle_text(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–ü—Ä–æ—Å—Ç–æ–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π"""
    user_id = update.message.from_user.id
    text = update.message.text.strip() if update.message.text else ""
    state = user_state.get_state(user_id)

    print(f"üî• –û–¢–õ–ê–î–ö–ê: User={user_id}, Text='{text}', State='{state}'")

    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã –∞–¥–º–∏–Ω
    if text.lower() == "–∞–¥–º–∏–Ω":
        await handle_admin_command(update, context)
        return

    # –¢–ï–°–¢–û–í–ê–Ø –ö–û–ú–ê–ù–î–ê
    if text.lower() == "—Ç–µ—Å—Ç":
        try:
            user_state.add_portfolio_item('sites', '–¢–µ—Å—Ç —Å–∞–π—Ç', '–¢–µ—Å—Ç –æ–ø–∏—Å–∞–Ω–∏–µ', ['https://test.jpg'],
                                          ['https://test.com'])
            sites = user_state.get_portfolio_items('sites')
            await update.message.reply_text(f"‚úÖ –¢–µ—Å—Ç: –≤ –ø–æ—Ä—Ç—Ñ–æ–ª–∏–æ {len(sites)} —Å–∞–π—Ç–æ–≤")
            return
        except Exception as e:
            await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∞: {e}")
            return

    # –û–ë–†–ê–ë–û–¢–ö–ê –°–û–°–¢–û–Ø–ù–ò–ô
    if state:
        print(f"üî• –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ: {state}")

        try:
            # –ê–í–¢–û–†–ò–ó–ê–¶–ò–Ø –ö–õ–ò–ï–ù–¢–û–í
            if state == 'client_login_username':
                context.user_data['login_client_login'] = text
                await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å:")
                user_state.set_state(user_id, 'client_login_password')
                return

            elif state == 'client_login_password':
                login = context.user_data.get('login_client_login')
                password = text

                if login and user_state.check_client(login, password):
                    user_state.set_client_chat_id(login, user_id)
                    
                    keyboard = [
                        [InlineKeyboardButton("–°–æ–∑–¥–∞—Ç—å –∑–∞–∫–∞–∑", callback_data='create_order')],
                        [InlineKeyboardButton("–ù–∞—à–∏ —Ä–∞–±–æ—Ç—ã", callback_data='our_works')],
                        [InlineKeyboardButton("–í—ã–π—Ç–∏", callback_data='client_logout')]
                    ]
                    reply_markup = InlineKeyboardMarkup(keyboard)
                    await update.message.reply_text(
                        f"‚úÖ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, {login}!",
                        reply_markup=reply_markup
                    )
                    context.user_data['client_login'] = login
                else:
                    await update.message.reply_text("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –ª–æ–≥–∏–Ω –∏–ª–∏ –ø–∞—Ä–æ–ª—å. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")

                user_state.set_state(user_id, None)
                return

            # –†–ï–ì–ò–°–¢–†–ê–¶–ò–Ø –ö–õ–ò–ï–ù–¢–û–í
            elif state == 'client_register_username':
                context.user_data['register_client_login'] = text
                await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å:")
                user_state.set_state(user_id, 'client_register_password')
                return

            elif state == 'client_register_password':
                login = context.user_data.get('register_client_login')
                password = text

                if login:
                    if user_state.register_client(login, password, chat_id=user_id):
                        keyboard = [
                            [InlineKeyboardButton("–°–æ–∑–¥–∞—Ç—å –∑–∞–∫–∞–∑", callback_data='create_order')],
                            [InlineKeyboardButton("–ù–∞—à–∏ —Ä–∞–±–æ—Ç—ã", callback_data='our_works')],
                            [InlineKeyboardButton("–í—ã–π—Ç–∏", callback_data='client_logout')]
                        ]
                        reply_markup = InlineKeyboardMarkup(keyboard)
                        await update.message.reply_text(
                            f"‚úÖ –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞! –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, {login}!",
                            reply_markup=reply_markup
                        )
                        context.user_data['client_login'] = login
                    else:
                        await update.message.reply_text(
                            "‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å —Ç–∞–∫–∏–º –ª–æ–≥–∏–Ω–æ–º —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –¥—Ä—É–≥–æ–π –ª–æ–≥–∏–Ω."
                        )
                else:
                    await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏.")

                user_state.set_state(user_id, None)
                return

            # –ê–í–¢–û–†–ò–ó–ê–¶–ò–Ø –ò–°–ü–û–õ–ù–ò–¢–ï–õ–ï–ô
            elif state == 'login':
                context.user_data['login'] = text
                await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å:")
                user_state.set_state(user_id, 'password')
                return

            elif state == 'password':
                login = context.user_data.get('login')
                password = text

                if login and user_state.check_entrepreneur(login, password):
                    # –£—Å–ø–µ—à–Ω—ã–π –≤—Ö–æ–¥
                    user_state.set_entrepreneur_chat_id(login, user_id)
                    balance = user_state.get_entrepreneur_balance(login)

                    keyboard = [
                        [InlineKeyboardButton("–ú–æ–∏ –∑–∞–∫–∞–∑—ã", callback_data='my_orders')],
                        [InlineKeyboardButton("–í—ã–π—Ç–∏", callback_data='logout')]
                    ]
                    reply_markup = InlineKeyboardMarkup(keyboard)
                    await update.message.reply_text(
                        f"‚úÖ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ —Å–∏—Å—Ç–µ–º—É, {login}!\n–í–∞—à –±–∞–ª–∞–Ω—Å: {balance} —Ä—É–±.",
                        reply_markup=reply_markup
                    )
                    context.user_data['contractor_login'] = login
                else:
                    await update.message.reply_text("‚ùå –î–∞–Ω–Ω—ã–µ –Ω–µ–≤–µ—Ä–Ω—ã–µ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")

                user_state.set_state(user_id, None)
                return

            # –†–ï–ì–ò–°–¢–†–ê–¶–ò–Ø –ò–°–ü–û–õ–ù–ò–¢–ï–õ–ï–ô (–ê–î–ú–ò–ù)
            elif state == 'register_login':
                context.user_data['register_login'] = text
                await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å:")
                user_state.set_state(user_id, 'register_password')
                return

            elif state == 'register_password':
                login = context.user_data.get('register_login')
                password = text

                if login:
                    user_state.register_entrepreneur(login, password, chat_id=user_id)
                    await update.message.reply_text(f"‚úÖ –ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å {login} –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω!")
                else:
                    await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏.")

                user_state.set_state(user_id, None)
                return

            # –°–û–ó–î–ê–ù–ò–ï –ó–ê–ö–ê–ó–û–í
            elif state == 'order_description':
                client_login = user_state.get_client_by_chat_id(user_id)
                if not client_login:
                    await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞: –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –≤–æ–π—Ç–∏ –≤ –∞–∫–∫–∞—É–Ω—Ç.")
                    user_state.set_state(user_id, None)
                    return

                context.user_data['order_description'] = text
                context.user_data['client_login'] = client_login
                await update.message.reply_text("1. –ö–∞–∫–∏–µ —É –Ω–∞—Å –µ—Å—Ç—å —Å—Ä–æ–∫–∏?")
                user_state.set_state(user_id, 'order_deadline')
                return

            elif state == 'order_deadline':
                context.user_data['deadline'] = text
                await update.message.reply_text(
                    "2. –ö–∞–∫–æ–π —É –≤–∞—Å –æ—Ä–∏–µ–Ω—Ç–∏—Ä–æ–≤–æ—á–Ω—ã–π –±—é–¥–∂–µ—Ç? (–í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ, –Ω–∞–ø—Ä–∏–º–µ—Ä 15 000)"
                )
                user_state.set_state(user_id, 'order_budget')
                return

            elif state == 'order_budget':
                from utils import is_valid_number, parse_number
                if is_valid_number(text):
                    budget = parse_number(text)
                    context.user_data['budget'] = text
                    context.user_data['order_amount'] = budget

                    await update.message.reply_text(
                        "‚úÖ –°–ø–∞—Å–∏–±–æ –∑–∞ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é. –ú—ã —Å–∫–æ—Ä–æ —Å–≤—è–∂–µ–º—Å—è —Å –≤–∞–º–∏."
                    )

                    # –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ª–æ–≥–∏–∫—É –æ—Ç–ø—Ä–∞–≤–∫–∏ –∑–∞–∫–∞–∑–∞ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—é
                    user_state.set_state(user_id, None)
                else:
                    await update.message.reply_text(
                        "‚ùå –ü—Ä–æ—Å–∏–º –≤–∞—Å –Ω–∞–ø–∏—Å–∞—Ç—å —á–∏—Å–ª–æ. –≠—Ç–æ –ø–æ–º–æ–∂–µ—Ç –Ω–∞–º –ø–æ–¥–æ–±—Ä–∞—Ç—å –ª—É—á—à–µ–µ —Ä–µ—à–µ–Ω–∏–µ –¥–ª—è –≤–∞—à–µ–π —Å–∏—Ç—É–∞—Ü–∏–∏."
                    )
                return

            # –û–ë–†–ê–ë–û–¢–ö–ê –ü–û–†–¢–§–û–õ–ò–û (—Å—Ç–∞—Ä—ã–π —Ñ–æ—Ä–º–∞—Ç)
            elif state.startswith('add_'):
                await handle_old_portfolio_format(update, context, state, text)
                return

            # –ê–î–ú–ò–ù–°–ö–ò–ï –û–ü–ï–†–ê–¶–ò–ò
            elif state.startswith('new_rating_'):
                login = state.split('_')[2]
                try:
                    rating = int(text)
                    if 1 <= rating <= 10:
                        if user_state.update_entrepreneur_rating(login, rating):
                            await update.message.reply_text("‚úÖ –†–µ–π—Ç–∏–Ω–≥ –æ–±–Ω–æ–≤–ª–µ–Ω!")
                        else:
                            await update.message.reply_text("‚ùå –ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.")
                    else:
                        await update.message.reply_text("‚ùå –†–µ–π—Ç–∏–Ω–≥ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –æ—Ç 1 –¥–æ 10.")
                except ValueError:
                    await update.message.reply_text("‚ùå –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ.")
                user_state.set_state(user_id, None)
                return

            elif state.startswith('new_balance_'):
                login = state.split('_')[2]
                try:
                    balance = float(text.replace(' ', ''))
                    if user_state.set_entrepreneur_balance(login, balance):
                        await update.message.reply_text("‚úÖ –ë–∞–ª–∞–Ω—Å –æ–±–Ω–æ–≤–ª–µ–Ω!")
                    else:
                        await update.message.reply_text("‚ùå –ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.")
                except ValueError:
                    await update.message.reply_text("‚ùå –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é —Å—É–º–º—É.")
                user_state.set_state(user_id, None)
                return

            elif state.startswith('delete_confirm_') and not state.startswith('delete_confirm_sites') and not state.startswith('delete_confirm_video'):
                # –£–¥–∞–ª–µ–Ω–∏–µ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è
                parts = state.split('_')
                if len(parts) >= 3:
                    login = '_'.join(parts[2:])  # –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ª–æ–≥–∏–Ω, –µ—Å–ª–∏ –≤ –Ω–µ–º –µ—Å—Ç—å –ø–æ–¥—á–µ—Ä–∫–∏–≤–∞–Ω–∏—è
                    response = text.lower().strip()

                    if response == '–¥–∞':
                        if user_state.delete_entrepreneur(login):
                            await update.message.reply_text(f"‚úÖ –ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å {login} —É–¥–∞–ª–µ–Ω.")
                        else:
                            await update.message.reply_text("‚ùå –ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.")
                    elif response == '–Ω–µ—Ç':
                        await update.message.reply_text("‚ùå –£–¥–∞–ª–µ–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.")
                    else:
                        await update.message.reply_text("‚ùì –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ '–¥–∞' –∏–ª–∏ '–Ω–µ—Ç'.")
                        return  # –ù–µ —Å–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ

                user_state.set_state(user_id, None)
                return

            # –£–î–ê–õ–ï–ù–ò–ï –ü–û–†–¢–§–û–õ–ò–û
            elif state.startswith('delete_confirm_'):
                response = text.lower().strip()
                
                category = context.user_data.get('delete_category')
                index = context.user_data.get('delete_index')
                title = context.user_data.get('delete_title', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —ç–ª–µ–º–µ–Ω—Ç')

                if response == '–¥–∞':
                    if user_state.delete_portfolio_item(category, index):
                        await update.message.reply_text(f"‚úÖ –≠–ª–µ–º–µ–Ω—Ç '{title}' —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω!")
                    else:
                        await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —ç–ª–µ–º–µ–Ω—Ç–∞.")
                        
                elif response == '–Ω–µ—Ç':
                    await update.message.reply_text("‚ùå –£–¥–∞–ª–µ–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.")
                else:
                    await update.message.reply_text("‚ùì –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞–ø–∏—à–∏—Ç–µ '–¥–∞' –∏–ª–∏ '–Ω–µ—Ç'.")
                    return  # –ù–µ —Å–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ

                # –û—á–∏—â–∞–µ–º –¥–∞–Ω–Ω—ã–µ
                context.user_data.pop('delete_category', None)
                context.user_data.pop('delete_index', None)
                context.user_data.pop('delete_title', None)
                user_state.set_state(user_id, None)
                return

            # –ß–ê–¢–´
            elif state.startswith('in_chat_'):
                chat_id = state.replace('in_chat_', '')
                message_text = text

                chat_info = user_state.get_chat_info(chat_id)
                if not chat_info or not chat_info.get('active', False):
                    await update.message.reply_text("‚ùå –ß–∞—Ç –Ω–µ–∞–∫—Ç–∏–≤–µ–Ω.")
                    user_state.set_state(user_id, None)
                    return

                partner_chat_id = user_state.get_chat_partner(chat_id, user_id)
                if not partner_chat_id:
                    await update.message.reply_text("‚ùå –ü–∞—Ä—Ç–Ω–µ—Ä –ø–æ —á–∞—Ç—É –Ω–µ –Ω–∞–π–¥–µ–Ω.")
                    return

                from utils import get_user_role_in_chat, format_chat_message
                sender_role = get_user_role_in_chat(user_id, chat_info)
                formatted_message = format_chat_message(sender_role, message_text)

                try:
                    await context.bot.send_message(chat_id=partner_chat_id, text=formatted_message)
                    await update.message.reply_text("‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ –¥–æ—Å—Ç–∞–≤–ª–µ–Ω–æ")
                except Exception as e:
                    await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è")
                    print(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
                return

            else:
                print(f"üî• –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ: {state}")
                await update.message.reply_text(f"‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ: {state}")
                user_state.set_state(user_id, None)

        except Exception as e:
            print(f"üí• –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê: {e}")
            import traceback
            traceback.print_exc()
            await update.message.reply_text(f"üí• –û—à–∏–±–∫–∞: {str(e)}")
            user_state.set_state(user_id, None)


async def handle_old_portfolio_format(update: Update, context: ContextTypes.DEFAULT_TYPE, state: str, text: str) -> None:
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Å—Ç–∞—Ä—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ø–æ—Ä—Ç—Ñ–æ–ª–∏–æ"""
    user_id = update.message.from_user.id
    
    print(f"üî• –°–¢–ê–†–´–ô –§–û–†–ú–ê–¢: —Å–æ—Å—Ç–æ—è–Ω–∏–µ {state}")

    if state == 'add_sites_title':
        print(f"üî• –®–∞–≥ 1: –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ '{text}'")
        context.user_data['site_title'] = text
        await update.message.reply_text("–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ (–∫–∞—Ä—Ç–∏–Ω–∫–æ–π) –∏–ª–∏ —Å—Å—ã–ª–∫—É –Ω–∞ —Ñ–æ—Ç–æ:")
        user_state.set_state(user_id, 'add_sites_photo')

    elif state == 'add_sites_photo':
        if text:  # –ï—Å–ª–∏ —ç—Ç–æ —Ç–µ–∫—Å—Ç (—Å—Å—ã–ª–∫–∞)
            print(f"üî• –®–∞–≥ 2: –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å—Å—ã–ª–∫—É –Ω–∞ —Ñ–æ—Ç–æ '{text}'")
            context.user_data['site_photo'] = text
            context.user_data['site_photo_type'] = 'url'
            await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ:")
            user_state.set_state(user_id, 'add_sites_description')
        else:
            await update.message.reply_text("–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ –∏–ª–∏ —Å—Å—ã–ª–∫—É –Ω–∞ —Ñ–æ—Ç–æ")

    elif state == 'add_sites_description':
        print(f"üî• –®–∞–≥ 3: –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ–ø–∏—Å–∞–Ω–∏–µ '{text}'")
        context.user_data['site_description'] = text
        await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ —Å–∞–π—Ç:")
        user_state.set_state(user_id, 'add_sites_link')

    elif state == 'add_sites_link':
        print(f"üî• –®–∞–≥ 4: –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å—Å—ã–ª–∫—É '{text}'")

        title = context.user_data.get('site_title', '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è')
        photo = context.user_data.get('site_photo', '')
        description = context.user_data.get('site_description', '–ë–µ–∑ –æ–ø–∏—Å–∞–Ω–∏—è')

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º
        user_state.add_portfolio_item('sites', title, description, [photo], [text])
        await update.message.reply_text(f"‚úÖ –°–∞–π—Ç '{title}' –¥–æ–±–∞–≤–ª–µ–Ω!")

        # –û—á–∏—Å—Ç–∫–∞
        for key in ['site_title', 'site_photo', 'site_photo_type', 'site_description']:
            context.user_data.pop(key, None)

        user_state.set_state(user_id, None)

    # –í–ò–î–ï–û –∞–Ω–∞–ª–æ–≥–∏—á–Ω–æ
    elif state == 'add_video_title':
        context.user_data['video_title'] = text
        await update.message.reply_text("–û—Ç–ø—Ä–∞–≤—å—Ç–µ –ø—Ä–µ–≤—å—é (–∫–∞—Ä—Ç–∏–Ω–∫–æ–π) –∏–ª–∏ —Å—Å—ã–ª–∫—É:")
        user_state.set_state(user_id, 'add_video_photo')

    elif state == 'add_video_photo':
        if text:
            context.user_data['video_photo'] = text
            context.user_data['video_photo_type'] = 'url'
            await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ:")
            user_state.set_state(user_id, 'add_video_description')
        else:
            await update.message.reply_text("–û—Ç–ø—Ä–∞–≤—å—Ç–µ –ø—Ä–µ–≤—å—é –∏–ª–∏ —Å—Å—ã–ª–∫—É")

    elif state == 'add_video_description':
        context.user_data['video_description'] = text
        await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ –≤–∏–¥–µ–æ:")
        user_state.set_state(user_id, 'add_video_link')

    elif state == 'add_video_link':
        title = context.user_data.get('video_title', '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è')
        photo = context.user_data.get('video_photo', '')
        description = context.user_data.get('video_description', '–ë–µ–∑ –æ–ø–∏—Å–∞–Ω–∏—è')

        user_state.add_portfolio_item('video', title, description, [photo], [text])
        await update.message.reply_text(f"‚úÖ –í–∏–¥–µ–æ '{title}' –¥–æ–±–∞–≤–ª–µ–Ω–æ!")

        for key in ['video_title', 'video_photo', 'video_photo_type', 'video_description']:
            context.user_data.pop(key, None)

        user_state.set_state(user_id, None)


async def handle_photo(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π"""
    user_id = update.message.from_user.id
    state = user_state.get_state(user_id)

    print(f"üì∏ –§–û–¢–û: User={user_id}, State='{state}'")

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—Å–µ –≤–æ–∑–º–æ–∂–Ω—ã–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è —Ñ–æ—Ç–æ
    if state in ['add_sites_photo', 'add_video_photo']:
        try:
            # –ü–æ–ª—É—á–∞–µ–º file_id —Å–∞–º–æ–≥–æ –±–æ–ª—å—à–æ–≥–æ —Ä–∞–∑–º–µ—Ä–∞ —Ñ–æ—Ç–æ
            photo_file_id = update.message.photo[-1].file_id
            print(f"üì∏ –°–æ—Ö—Ä–∞–Ω—è–µ–º file_id: {photo_file_id}")

            if state == 'add_sites_photo':
                context.user_data['site_photo'] = photo_file_id
                context.user_data['site_photo_type'] = 'file_id'
                await update.message.reply_text("‚úÖ –§–æ—Ç–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ! –í–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ:")
                user_state.set_state(user_id, 'add_sites_description')

            elif state == 'add_video_photo':
                context.user_data['video_photo'] = photo_file_id
                context.user_data['video_photo_type'] = 'file_id'
                await update.message.reply_text("‚úÖ –ü—Ä–µ–≤—å—é —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ! –í–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ:")
                user_state.set_state(user_id, 'add_video_description')

        except Exception as e:
            print(f"üí• –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ñ–æ—Ç–æ: {e}")
            await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ —Ñ–æ—Ç–æ: {e}")
    else:
        print(f"üì∏ –ù–µ–ø–æ–¥—Ö–æ–¥—è—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è —Ñ–æ—Ç–æ: {state}")
        await update.message.reply_text("‚ùå –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ –≤ –Ω—É–∂–Ω—ã–π –º–æ–º–µ–Ω—Ç –ø—Ä–æ—Ü–µ—Å—Å–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è.")
