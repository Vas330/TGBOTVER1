# text_handler.py - –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è —Å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π telegram_id
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import ContextTypes
from datetime import datetime

from handlers_common import handle_admin_command
from payment_handlers import handle_paid_text_message


async def handle_text(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π —Å Firebase –∏ –Ω–æ–≤–æ–π —Å—Ç—Ä—É–∫—Ç—É—Ä–æ–π —Å–æ–æ–±—â–µ–Ω–∏–π"""
    firebase = context.bot_data['firebase']
    user_id = update.message.from_user.id
    text = update.message.text.strip() if update.message.text else ""
    state = firebase.get_user_state(user_id)

    print(f"DEBUG: User={user_id}, Text='{text}', State='{state}'")

    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã –∞–¥–º–∏–Ω
    if text.lower() == "–∞–¥–º–∏–Ω":
        await handle_admin_command(update, context)
        return

    # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–ª–æ–≤–∞ "–æ–ø–ª–∞—Ç–∏–ª"
    if text.lower() == "–æ–ø–ª–∞—Ç–∏–ª":
        await handle_paid_text_message(update, context)
        return

    # –û–ë–†–ê–ë–û–¢–ö–ê –°–û–°–¢–û–Ø–ù–ò–ô
    if state:
        print(f"–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ: {state}")

        try:
            # –û–ë–†–ê–ë–û–¢–ö–ê –í–í–û–î–ê –ù–ê–ó–í–ê–ù–ò–Ø –ó–ê–ö–ê–ó–ê
            if state == 'order_name_input':
                order_name = text.strip()
                if not order_name:
                    await update.message.reply_text("–ù–∞–∑–≤–∞–Ω–∏–µ –∑–∞–∫–∞–∑–∞ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º. –í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ:")
                    return

                customer_id = context.user_data.get('pending_order_customer_id')
                if customer_id:
                    from handlers_client import process_order_acceptance
                    await process_order_acceptance(update, context, order_name, customer_id)
                    context.user_data.pop('pending_order_customer_id', None)
                    context.user_data.pop('pending_order_action', None)
                else:
                    await update.message.reply_text("–û—à–∏–±–∫–∞: –¥–∞–Ω–Ω—ã–µ –∑–∞–∫–∞–∑–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.")

                firebase.clear_user_state(user_id)
                return

            # –ê–í–¢–û–†–ò–ó–ê–¶–ò–Ø –ö–õ–ò–ï–ù–¢–û–í
            elif state == 'client_login_username':
                context.user_data['login_client_login'] = text
                await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å:")
                firebase.set_user_state(user_id, 'client_login_password')
                return

            elif state == 'client_login_password':
                login = context.user_data.get('login_client_login')
                password = text

                if login and firebase.check_client(login, password):
                    firebase.set_client_chat_id(login, user_id)

                    keyboard = [
                        [InlineKeyboardButton("üìù –°–æ–∑–¥–∞—Ç—å –∑–∞–∫–∞–∑", callback_data='create_order')],
                        [InlineKeyboardButton("üìã –ú–æ–∏ –∑–∞–∫–∞–∑—ã", callback_data='my_client_orders')],
                        [InlineKeyboardButton("üéØ –ù–∞—à–∏ —É—Å–ª—É–≥–∏", callback_data='our_services')],
                        [InlineKeyboardButton("üé® –ù–∞—à–∏ —Ä–∞–±–æ—Ç—ã", callback_data='our_works')],
                        [InlineKeyboardButton("üö™ –í—ã–π—Ç–∏", callback_data='client_logout')]
                    ]
                    reply_markup = InlineKeyboardMarkup(keyboard)
                    await update.message.reply_text(
                        f"–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, {login}!",
                        reply_markup=reply_markup
                    )
                    context.user_data['client_login'] = login
                else:
                    await update.message.reply_text("–ù–µ–≤–µ—Ä–Ω—ã–π –ª–æ–≥–∏–Ω –∏–ª–∏ –ø–∞—Ä–æ–ª—å. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")

                firebase.clear_user_state(user_id)
                return

            # –†–ï–ì–ò–°–¢–†–ê–¶–ò–Ø –ö–õ–ò–ï–ù–¢–û–í - –ò–°–ü–†–ê–í–õ–ï–ù–û
            elif state == 'client_register_username':
                context.user_data['register_client_login'] = text
                await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å:")
                firebase.set_user_state(user_id, 'client_register_password')
                return

            elif state == 'client_register_password':
                login = context.user_data.get('register_client_login')
                password = text

                if login:
                    # –ò–°–ü–†–ê–í–õ–ï–ù–û: –¥–æ–±–∞–≤–ª—è–µ–º telegram_id –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏
                    if firebase.register_client(login, password, chat_id=user_id, telegram_id=str(user_id)):
                        keyboard = [
                            [InlineKeyboardButton("üìù –°–æ–∑–¥–∞—Ç—å –∑–∞–∫–∞–∑", callback_data='create_order')],
                            [InlineKeyboardButton("üìã –ú–æ–∏ –∑–∞–∫–∞–∑—ã", callback_data='my_client_orders')],
                            [InlineKeyboardButton("üéØ –ù–∞—à–∏ —É—Å–ª—É–≥–∏", callback_data='our_services')],
                            [InlineKeyboardButton("üé® –ù–∞—à–∏ —Ä–∞–±–æ—Ç—ã", callback_data='our_works')],
                            [InlineKeyboardButton("üö™ –í—ã–π—Ç–∏", callback_data='client_logout')]
                        ]
                        reply_markup = InlineKeyboardMarkup(keyboard)
                        await update.message.reply_text(
                            f"–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞! –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, {login}!",
                            reply_markup=reply_markup
                        )
                        context.user_data['client_login'] = login
                    else:
                        await update.message.reply_text(
                            "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å —Ç–∞–∫–∏–º –ª–æ–≥–∏–Ω–æ–º —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –¥—Ä—É–≥–æ–π –ª–æ–≥–∏–Ω."
                        )
                else:
                    await update.message.reply_text("–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏.")

                firebase.clear_user_state(user_id)
                return

            # –ê–í–¢–û–†–ò–ó–ê–¶–ò–Ø –ò–°–ü–û–õ–ù–ò–¢–ï–õ–ï–ô
            elif state == 'login':
                context.user_data['login'] = text
                await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å:")
                firebase.set_user_state(user_id, 'password')
                return

            elif state == 'password':
                login = context.user_data.get('login')
                password = text

                if login and firebase.check_entrepreneur(login, password):
                    firebase.set_entrepreneur_chat_id(login, user_id)
                    balance = firebase.get_balance(login)

                    keyboard = [
                        [InlineKeyboardButton("üìã –ú–æ–∏ –∑–∞–∫–∞–∑—ã", callback_data='my_orders')],
                        [InlineKeyboardButton("üë§ –õ–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç", callback_data='personal_cabinet')],
                        [InlineKeyboardButton("üö™ –í—ã–π—Ç–∏", callback_data='logout')]
                    ]
                    reply_markup = InlineKeyboardMarkup(keyboard)
                    await update.message.reply_text(
                        f"–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ —Å–∏—Å—Ç–µ–º—É, {login}!\n–í–∞—à –±–∞–ª–∞–Ω—Å: {balance} —Ä—É–±.",
                        reply_markup=reply_markup
                    )
                    context.user_data['contractor_login'] = login
                else:
                    await update.message.reply_text("–î–∞–Ω–Ω—ã–µ –Ω–µ–≤–µ—Ä–Ω—ã–µ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")

                firebase.clear_user_state(user_id)
                return

            # –†–ï–ì–ò–°–¢–†–ê–¶–ò–Ø –ò–°–ü–û–õ–ù–ò–¢–ï–õ–ï–ô (–ê–î–ú–ò–ù) - –ò–°–ü–†–ê–í–õ–ï–ù–û
            elif state == 'register_login':
                context.user_data['register_login'] = text
                await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å:")
                firebase.set_user_state(user_id, 'register_password')
                return

            elif state == 'register_password':
                login = context.user_data.get('register_login')
                password = text

                if login:
                    # –ò–°–ü–†–ê–í–õ–ï–ù–û: –¥–æ–±–∞–≤–ª—è–µ–º telegram_id –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏
                    firebase.register_entrepreneur(login, password, chat_id=user_id, telegram_id=str(user_id))
                    await update.message.reply_text(f"–ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å {login} –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω!")
                else:
                    await update.message.reply_text("–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏.")

                firebase.clear_user_state(user_id)
                return

            # –°–û–ó–î–ê–ù–ò–ï –ó–ê–ö–ê–ó–û–í –° –£–í–ï–î–û–ú–õ–ï–ù–ò–Ø–ú–ò
            elif state == 'order_description':
                client_login = firebase.get_client_by_chat_id(user_id)
                if not client_login:
                    await update.message.reply_text("–û—à–∏–±–∫–∞: –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –≤–æ–π—Ç–∏ –≤ –∞–∫–∫–∞—É–Ω—Ç.")
                    firebase.clear_user_state(user_id)
                    return

                context.user_data['order_description'] = text
                context.user_data['client_login'] = client_login
                await update.message.reply_text("1. –ö–∞–∫–∏–µ —É –Ω–∞—Å –µ—Å—Ç—å —Å—Ä–æ–∫–∏?")
                firebase.set_user_state(user_id, 'order_deadline')
                return

            elif state == 'order_deadline':
                context.user_data['deadline'] = text
                await update.message.reply_text(
                    "2. –ö–∞–∫–æ–π —É –≤–∞—Å –æ—Ä–∏–µ–Ω—Ç–∏—Ä–æ–≤–æ—á–Ω—ã–π –±—é–¥–∂–µ—Ç? (–í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ, –Ω–∞–ø—Ä–∏–º–µ—Ä 15 000)"
                )
                firebase.set_user_state(user_id, 'order_budget')
                return

            elif state == 'order_budget':
                from utils import is_valid_number, parse_number, format_order_info

                if is_valid_number(text):
                    budget = parse_number(text)
                    context.user_data['budget'] = text
                    context.user_data['order_amount'] = budget
                    client_login = context.user_data.get('client_login')

                    print(f"DEBUG: –ù–∞—á–∏–Ω–∞–µ–º –ø–æ–∏—Å–∫ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è –¥–ª—è –∑–∞–∫–∞–∑–∞ –æ—Ç {client_login} –Ω–∞ —Å—É–º–º—É {budget}")

                    # –ò–©–ï–ú –ò–°–ü–û–õ–ù–ò–¢–ï–õ–Ø –° –ù–ê–ò–í–´–°–®–ò–ú –†–ï–ô–¢–ò–ù–ì–û–ú
                    top_entrepreneur = firebase.get_top_executor()
                    print(f"DEBUG: –†–µ–∑—É–ª—å—Ç–∞—Ç –ø–æ–∏—Å–∫–∞ —Ç–æ–ø –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è: {top_entrepreneur}")

                    if top_entrepreneur:
                        # –ü–æ–ª—É—á–∞–µ–º chat_id –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è
                        top_entrepreneur_chat_id = firebase.get_user_chat_id_by_username(top_entrepreneur)
                        print(f"DEBUG: Chat ID –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è {top_entrepreneur}: {top_entrepreneur_chat_id}")

                        # –°–û–ó–î–ê–ï–ú –ó–ê–ö–ê–ó –í FIREBASE
                        order_data = {
                            'title': '–ù–æ–≤—ã–π –∑–∞–∫–∞–∑',
                            'description': context.user_data.get('order_description', '–ù–µ —É–∫–∞–∑–∞–Ω–æ'),
                            'customer': {
                                'id': str(user_id),
                                'username': client_login
                            },
                            'executor': {
                                'id': '',
                                'username': top_entrepreneur
                            },
                            'amount': budget,
                            'deadline_text': context.user_data.get('deadline', '–ù–µ —É–∫–∞–∑–∞–Ω–æ'),
                            'status': 'pending',
                            'accepted': False,
                            'timer_active': False
                        }

                        print(f"DEBUG: –°–æ–∑–¥–∞–µ–º –∑–∞–∫–∞–∑ —Å –¥–∞–Ω–Ω—ã–º–∏: {order_data}")
                        order_id = firebase.create_order(order_data)
                        print(f"DEBUG: –ó–∞–∫–∞–∑ —Å–æ–∑–¥–∞–Ω —Å ID: {order_id}")

                        # –û–¢–ü–†–ê–í–õ–Ø–ï–ú –£–í–ï–î–û–ú–õ–ï–ù–ò–ï –ò–°–ü–û–õ–ù–ò–¢–ï–õ–Æ
                        if top_entrepreneur_chat_id and order_id:
                            order_info_text = format_order_info(
                                context.user_data.get('order_description', '–ù–µ —É–∫–∞–∑–∞–Ω–æ'),
                                context.user_data.get('deadline', '–ù–µ —É–∫–∞–∑–∞–Ω–æ'),
                                context.user_data['budget'],
                                client_login
                            )

                            keyboard = [
                                [InlineKeyboardButton("‚úÖ –ü—Ä–∏–Ω—è—Ç—å –∑–∞–∫–∞–∑", callback_data=f'accept_order_{user_id}')],
                                [InlineKeyboardButton("‚ùå –û—Ç–∫–∞–∑–∞—Ç—å—Å—è", callback_data=f'decline_order_{user_id}')]
                            ]
                            reply_markup = InlineKeyboardMarkup(keyboard)

                            context.user_data['pending_order_id'] = order_id

                            # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–≤—è–∑—å –º–µ–∂–¥—É customer_id –∏ order_id –≤ Firebase –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –ø–æ–∏—Å–∫–∞
                            firebase.db.collection('temp_orders').document(str(user_id)).set({
                                'order_id': order_id,
                                'customer_id': user_id,
                                'executor': top_entrepreneur,
                                'created_at': datetime.now()
                            })

                            try:
                                print(
                                    f"DEBUG: –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—é {top_entrepreneur} (chat_id: {top_entrepreneur_chat_id})")
                                await context.bot.send_message(
                                    chat_id=top_entrepreneur_chat_id,
                                    text=f"üîî –ù–û–í–´–ô –ó–ê–ö–ê–ó!\n\n{order_info_text}",
                                    reply_markup=reply_markup
                                )
                                print(f"DEBUG: –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ!")

                                await update.message.reply_text(
                                    "‚úÖ –ó–∞–∫–∞–∑ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω!\n\n"
                                    f"üéØ –ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å {top_entrepreneur} –ø–æ–ª—É—á–∏–ª —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∏ —Å–∫–æ—Ä–æ —Å–≤—è–∂–µ—Ç—Å—è —Å –≤–∞–º–∏.\n\n"
                                    "üì± –í—ã –ø–æ–ª—É—á–∏—Ç–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ, –∫–æ–≥–¥–∞ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å –æ—Ç–≤–µ—Ç–∏—Ç."
                                )
                            except Exception as e:
                                print(f"DEBUG: –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—é: {e}")
                                import traceback
                                traceback.print_exc()
                                await update.message.reply_text(
                                    "–ó–∞–∫–∞–∑ —Å–æ–∑–¥–∞–Ω, –Ω–æ –≤–æ–∑–Ω–∏–∫–ª–∞ –ø—Ä–æ–±–ª–µ–º–∞ —Å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ–º –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è.\n"
                                    "–ú—ã —Å–≤—è–∂–µ–º—Å—è —Å –≤–∞–º–∏ –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è."
                                )
                        else:
                            print(
                                f"DEBUG: –ü—Ä–æ–±–ª–µ–º–∞ —Å –æ—Ç–ø—Ä–∞–≤–∫–æ–π - chat_id: {top_entrepreneur_chat_id}, order_id: {order_id}")
                            await update.message.reply_text(
                                "–ó–∞–∫–∞–∑ —Å–æ–∑–¥–∞–Ω! –ú—ã –æ–±—Ä–∞–±–æ—Ç–∞–µ–º –µ–≥–æ –∏ —Å–≤—è–∂–µ–º—Å—è —Å –≤–∞–º–∏ –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è."
                            )
                    else:
                        print("DEBUG: –¢–æ–ø –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω")
                        await update.message.reply_text(
                            "–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –≤ —Å–∏—Å—Ç–µ–º–µ –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª–µ–π.\n"
                            "–ú—ã –¥–æ–±–∞–≤–∏–º –≤–∞—Å –≤ –æ—á–µ—Ä–µ–¥—å –∏ —Å–≤—è–∂–µ–º—Å—è, –∫–æ–≥–¥–∞ –ø–æ—è–≤–∏—Ç—Å—è —Å–≤–æ–±–æ–¥–Ω—ã–π —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç."
                        )

                    firebase.clear_user_state(user_id)
                else:
                    await update.message.reply_text(
                        "–ü—Ä–æ—Å–∏–º –≤–∞—Å –Ω–∞–ø–∏—Å–∞—Ç—å —á–∏—Å–ª–æ. –≠—Ç–æ –ø–æ–º–æ–∂–µ—Ç –Ω–∞–º –ø–æ–¥–æ–±—Ä–∞—Ç—å –ª—É—á—à–µ–µ —Ä–µ—à–µ–Ω–∏–µ –¥–ª—è –≤–∞—à–µ–π —Å–∏—Ç—É–∞—Ü–∏–∏."
                    )
                return

            # –ß–ê–¢–´ –ö–õ–ò–ï–ù–¢–û–í - –ò–°–ü–†–ê–í–õ–ï–ù–û
            elif state.startswith('in_client_chat_'):
                order_id = state.replace('in_client_chat_', '')
                message_text = text

                # –ü–æ–ª—É—á–∞–µ–º –ª–æ–≥–∏–Ω –∫–ª–∏–µ–Ω—Ç–∞ –Ω–∞–ø—Ä—è–º—É—é
                client_login = firebase.get_client_by_chat_id(user_id)
                if not client_login:
                    await update.message.reply_text("–ù–µ–æ–±—Ö–æ–¥–∏–º–æ –≤–æ–π—Ç–∏ –≤ —Å–∏—Å—Ç–µ–º—É.")
                    firebase.clear_user_state(user_id)
                    return

                order = firebase.get_order_by_id(order_id)
                if not order:
                    await update.message.reply_text("–ó–∞–∫–∞–∑ –Ω–µ –Ω–∞–π–¥–µ–Ω.")
                    firebase.clear_user_state(user_id)
                    return

                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–æ –∑–∞–∫–∞–∑ –¥–∞–Ω–Ω–æ–≥–æ –∫–ª–∏–µ–Ω—Ç–∞
                if order.get('customer', {}).get('username') != client_login:
                    await update.message.reply_text("–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–º—É –∑–∞–∫–∞–∑—É.")
                    firebase.clear_user_state(user_id)
                    return

                # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
                firebase.add_message(
                    order_id=order_id,
                    user_id=str(user_id),  # –ò—Å–ø–æ–ª—å–∑—É–µ–º chat_id –∫–∞–∫ user_id
                    user_role='customer',  # –†–æ–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                    text=message_text
                )

                print(f"–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –∫–ª–∏–µ–Ω—Ç–∞ {client_login} —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ: {message_text}")

                # –£–≤–µ–¥–æ–º–ª—è–µ–º –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è
                executor_name = order.get('executor', {}).get('username')
                if executor_name:
                    executor_chat_id = firebase.get_user_chat_id_by_username(executor_name)
                    if executor_chat_id:
                        try:
                            await context.bot.send_message(
                                chat_id=executor_chat_id,
                                text=f"–ù–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –∑–∞–∫–∞–∑—á–∏–∫–∞\n"
                                     f"–ó–∞–∫–∞–∑: {order.get('title', '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è')}\n"
                                     f"–°–æ–æ–±—â–µ–Ω–∏–µ: {message_text}"
                            )
                        except Exception as e:
                            print(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—é: {e}")

                await update.message.reply_text("–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—é")
                return

            # –ß–ê–¢–´ –ò–°–ü–û–õ–ù–ò–¢–ï–õ–ï–ô - –ò–°–ü–†–ê–í–õ–ï–ù–û
            elif state.startswith('in_contractor_chat_'):
                order_id = state.replace('in_contractor_chat_', '')
                message_text = text

                # –ü–æ–ª—É—á–∞–µ–º –ª–æ–≥–∏–Ω –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è –Ω–∞–ø—Ä—è–º—É—é
                contractor_login = firebase.get_entrepreneur_by_chat_id(user_id)
                if not contractor_login:
                    await update.message.reply_text("–ù–µ–æ–±—Ö–æ–¥–∏–º–æ –≤–æ–π—Ç–∏ –≤ —Å–∏—Å—Ç–µ–º—É.")
                    firebase.clear_user_state(user_id)
                    return

                order = firebase.get_order_by_id(order_id)
                if not order:
                    await update.message.reply_text("–ó–∞–∫–∞–∑ –Ω–µ –Ω–∞–π–¥–µ–Ω.")
                    firebase.clear_user_state(user_id)
                    return

                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–æ –∑–∞–∫–∞–∑ –¥–∞–Ω–Ω–æ–≥–æ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è
                if order.get('executor', {}).get('username') != contractor_login:
                    await update.message.reply_text("–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–º—É –∑–∞–∫–∞–∑—É.")
                    firebase.clear_user_state(user_id)
                    return

                # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
                firebase.add_message(
                    order_id=order_id,
                    user_id=str(user_id),  # –ò—Å–ø–æ–ª—å–∑—É–µ–º chat_id –∫–∞–∫ user_id
                    user_role='executor',  # –†–æ–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                    text=message_text
                )

                print(f"–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è {contractor_login} —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ: {message_text}")

                # –£–≤–µ–¥–æ–º–ª—è–µ–º –∑–∞–∫–∞–∑—á–∏–∫–∞
                customer_name = order.get('customer', {}).get('username')
                if customer_name:
                    customer_chat_id = firebase.get_user_chat_id_by_username(customer_name)
                    if customer_chat_id:
                        try:
                            await context.bot.send_message(
                                chat_id=customer_chat_id,
                                text=f"–ù–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è\n"
                                     f"–ó–∞–∫–∞–∑: {order.get('title', '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è')}\n"
                                     f"–°–æ–æ–±—â–µ–Ω–∏–µ: {message_text}"
                            )
                        except Exception as e:
                            print(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∑–∞–∫–∞–∑—á–∏–∫—É: {e}")

                await update.message.reply_text("–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –∑–∞–∫–∞–∑—á–∏–∫—É")
                return

            # –û–ë–†–ê–ë–û–¢–ö–ê –í–´–í–û–î–ê –°–†–ï–î–°–¢–í
            elif state.startswith('withdraw_amount_input_'):
                contractor_login = state.replace('withdraw_amount_input_', '')
                try:
                    amount = float(text.replace(' ', '').replace(',', '.'))
                    balance = firebase.get_balance(contractor_login)

                    if amount <= 0:
                        await update.message.reply_text("–°—É–º–º–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –±–æ–ª—å—à–µ 0.")
                        return

                    if amount > balance:
                        await update.message.reply_text(
                            f"–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤.\n–î–æ—Å—Ç—É–ø–Ω–æ: {balance} —Ä—É–±.\n–í–≤–µ–¥–∏—Ç–µ –º–µ–Ω—å—à—É—é —Å—É–º–º—É:"
                        )
                        return

                    keyboard = [
                        [InlineKeyboardButton("‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å",
                                              callback_data=f'withdraw_amount_{contractor_login}_{amount}')],
                        [InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞", callback_data='personal_cabinet')]
                    ]
                    reply_markup = InlineKeyboardMarkup(keyboard)

                    await update.message.reply_text(
                        f"–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –≤—ã–≤–æ–¥ {amount} —Ä—É–±.\n–° –±–∞–ª–∞–Ω—Å–∞ –±—É–¥–µ—Ç —Å–ø–∏—Å–∞–Ω–æ: {amount} —Ä—É–±.",
                        reply_markup=reply_markup
                    )

                except ValueError:
                    await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é —Å—É–º–º—É (—Ç–æ–ª—å–∫–æ —Ü–∏—Ñ—Ä—ã):")
                    return

                firebase.clear_user_state(user_id)
                return

            else:
                print(f"–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ: {state}")
                await update.message.reply_text(f"–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ: {state}")
                firebase.clear_user_state(user_id)

        except Exception as e:
            print(f"–ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê: {e}")
            import traceback
            traceback.print_exc()
            await update.message.reply_text(f"–û—à–∏–±–∫–∞: {str(e)}")
            firebase.clear_user_state(user_id)


async def handle_photo(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π —Å Firebase"""
    firebase = context.bot_data['firebase']
    user_id = update.message.from_user.id
    state = firebase.get_user_state(user_id)

    print(f"–§–û–¢–û: User={user_id}, State='{state}'")

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è —Ñ–æ—Ç–æ
    if state in ['add_sites_photo', 'add_video_photo']:
        try:
            photo_file_id = update.message.photo[-1].file_id
            print(f"–°–æ—Ö—Ä–∞–Ω—è–µ–º file_id: {photo_file_id}")

            if state == 'add_sites_photo':
                context.user_data['site_photo'] = photo_file_id
                context.user_data['site_photo_type'] = 'file_id'
                await update.message.reply_text("–§–æ—Ç–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ! –í–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ:")
                firebase.set_user_state(user_id, 'add_sites_description')

            elif state == 'add_video_photo':
                context.user_data['video_photo'] = photo_file_id
                context.user_data['video_photo_type'] = 'file_id'
                await update.message.reply_text("–ü—Ä–µ–≤—å—é —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ! –í–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ:")
                firebase.set_user_state(user_id, 'add_video_description')

        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ñ–æ—Ç–æ: {e}")
            await update.message.reply_text(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ —Ñ–æ—Ç–æ: {e}")
    else:
        print(f"–ù–µ–ø–æ–¥—Ö–æ–¥—è—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è —Ñ–æ—Ç–æ: {state}")
        await update.message.reply_text("–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ –≤ –Ω—É–∂–Ω—ã–π –º–æ–º–µ–Ω—Ç")