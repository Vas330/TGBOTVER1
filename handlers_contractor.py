# handlers_contractor.py - –æ–±–Ω–æ–≤–ª–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è —Å –∫–Ω–æ–ø–∫–æ–π —Å–¥–∞—á–∏ –∑–∞–∫–∞–∑–∞
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import ContextTypes
from datetime import datetime


async def entrepreneur_menu(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–ú–µ–Ω—é –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è —Å Firebase"""
    firebase = context.bot_data['firebase']
    user_id = update.callback_query.from_user.id
    logged_in_user = firebase.get_entrepreneur_by_chat_id(user_id)

    keyboard = []

    if logged_in_user:
        balance = firebase.get_balance(logged_in_user)
        keyboard.append([InlineKeyboardButton("üìã –ú–æ–∏ –∑–∞–∫–∞–∑—ã", callback_data='my_orders')])
        keyboard.append([InlineKeyboardButton("üë§ –õ–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç", callback_data='personal_cabinet')])
        keyboard.append([InlineKeyboardButton("üö™ –í—ã–π—Ç–∏", callback_data='logout')])

        context.user_data['contractor_login'] = logged_in_user
        message_text = f'–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ —Å–∏—Å—Ç–µ–º—É, {logged_in_user}!\n–í–∞—à –±–∞–ª–∞–Ω—Å: {balance} —Ä—É–±.\n\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:'
    else:
        keyboard.append([InlineKeyboardButton("üîë –í–æ–π—Ç–∏", callback_data='login')])
        message_text = '–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ (–ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å):'

    reply_markup = InlineKeyboardMarkup(keyboard)
    await update.callback_query.edit_message_text(message_text, reply_markup=reply_markup)


async def login_entrepreneur(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è"""
    firebase = context.bot_data['firebase']
    await update.callback_query.edit_message_text("–í–≤–µ–¥–∏—Ç–µ –ª–æ–≥–∏–Ω:")
    firebase.set_user_state(update.callback_query.from_user.id, 'login')


async def logout_entrepreneur(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–í—ã—Ö–æ–¥ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è"""
    firebase = context.bot_data['firebase']
    user_id = update.callback_query.from_user.id
    contractor_login = firebase.get_entrepreneur_by_chat_id(user_id)

    if contractor_login:
        firebase.set_entrepreneur_chat_id(contractor_login, None)

        if 'contractor_login' in context.user_data:
            del context.user_data['contractor_login']

        keyboard = [[InlineKeyboardButton("üîë –í–æ–π—Ç–∏", callback_data='login')]]
        reply_markup = InlineKeyboardMarkup(keyboard)
        await update.callback_query.edit_message_text(
            "–í—ã —É—Å–ø–µ—à–Ω–æ –≤—ã—à–ª–∏ –∏–∑ —Å–∏—Å—Ç–µ–º—ã.\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ (–ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å):",
            reply_markup=reply_markup
        )
    else:
        await update.callback_query.edit_message_text("–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã—Ö–æ–¥–µ –∏–∑ —Å–∏—Å—Ç–µ–º—ã.")


async def my_orders(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–ü–æ–∫–∞–∑ –∑–∞–∫–∞–∑–æ–≤ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º–∏ –∫–Ω–æ–ø–∫–∞–º–∏"""
    firebase = context.bot_data['firebase']
    query = update.callback_query
    await query.answer()

    user_id = query.from_user.id
    contractor_login = firebase.get_entrepreneur_by_chat_id(user_id)

    if contractor_login:
        orders = firebase.get_orders_by_executor(contractor_login)

        if orders:
            await query.edit_message_text(f"–£ –≤–∞—Å {len(orders)} –∑–∞–∫–∞–∑(–∞/–æ–≤):")

            for i, order in enumerate(orders, start=1):
                status = order.get('status', 'unknown')

                status_map = {
                    'completed': ('–ó–∞–≤–µ—Ä—à–µ–Ω', '‚úÖ'),
                    'on_review': ('–ù–∞ –ø—Ä–æ–≤–µ—Ä–∫–µ', 'üîç'),
                    'in_work': ('–í —Ä–∞–±–æ—Ç–µ', 'üîÑ'),
                    'cancelled': ('–û—Ç–º–µ–Ω–µ–Ω', '‚ùå'),
                    'dispute': ('–°–ø–æ—Ä', '‚ö†Ô∏è'),
                    'pending': ('–û–∂–∏–¥–∞–µ—Ç –ø—Ä–∏–Ω—è—Ç–∏—è', 'üìã'),
                    'waiting_payment': ('–û–∂–∏–¥–∞–µ—Ç –æ–ø–ª–∞—Ç—ã', 'üí≥'),
                    'payment_confirmed': ('–û–ø–ª–∞—Ç–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞', 'üí∞')
                }

                status_text, status_icon = status_map.get(status, ('–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ', '‚ùì'))

                customer = order.get('customer', {}).get('username', '–ù–µ–∏–∑–≤–µ—Å—Ç–µ–Ω')
                amount = order.get('amount', 0)

                order_text = f"{status_icon} –ó–∞–∫–∞–∑ {i}: {order.get('title', '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è')}\n"
                order_text += f"–û–ø–∏—Å–∞–Ω–∏–µ: {order.get('description', '–û–ø–∏—Å–∞–Ω–∏–µ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç')[:100]}...\n"
                order_text += f"–ó–∞–∫–∞–∑—á–∏–∫: {customer}\n"
                order_text += f"–ë—é–¥–∂–µ—Ç: {amount} —Ä—É–±.\n"
                order_text += f"–°—Ç–∞—Ç—É—Å: {status_text}"

                # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –∑–∞–∫–∞–∑–∞ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Å—Ç–∞—Ç—É—Å–∞
                keyboard = []

                # –ö–Ω–æ–ø–∫–∞ —á–∞—Ç–∞ –¥–ª—è –∑–∞–∫–∞–∑–æ–≤ –≤ —Ä–∞–±–æ—Ç–µ –∏–ª–∏ –Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫–µ
                if status in ['in_work', 'on_review']:
                    keyboard.append(
                        [InlineKeyboardButton("üí¨ –û—Ç–∫—Ä—ã—Ç—å —á–∞—Ç", callback_data=f'open_contractor_chat_{order["id"]}')])

                # –ö–Ω–æ–ø–∫–∞ —Å–¥–∞—á–∏ –∑–∞–∫–∞–∑–∞ –¥–ª—è –∑–∞–∫–∞–∑–æ–≤ –≤ —Ä–∞–±–æ—Ç–µ
                if status == 'in_work':
                    keyboard.append([
                        InlineKeyboardButton("üéØ –°–¥–∞—Ç—å –∑–∞–∫–∞–∑ –Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫—É", callback_data=f'submit_work_{order["id"]}')
                    ])

                # –ö–Ω–æ–ø–∫–∞ –¥–µ—Ç–∞–ª–µ–π –∑–∞–∫–∞–∑–∞
                keyboard.append([InlineKeyboardButton("üìã –î–µ—Ç–∞–ª–∏", callback_data=f'contractor_order_{order["id"]}')])

                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–Ω–æ–ø–∫–∞–º–∏
                if keyboard:
                    reply_markup = InlineKeyboardMarkup(keyboard)
                    await query.message.reply_text(order_text, reply_markup=reply_markup)
                else:
                    await query.message.reply_text(order_text)

        else:
            await query.edit_message_text("–£ –≤–∞—Å –Ω–µ—Ç –∑–∞–∫–∞–∑–æ–≤.")
    else:
        await query.edit_message_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–æ–π–¥–∏—Ç–µ –≤ —Å–∏—Å—Ç–µ–º—É —Å–Ω–∞—á–∞–ª–∞.")


async def show_contractor_order_details(update: Update, context: ContextTypes.DEFAULT_TYPE, order_id: str) -> None:
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –¥–µ—Ç–∞–ª–∏ –∑–∞–∫–∞–∑–∞ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è —Å –∫–Ω–æ–ø–∫–∞–º–∏ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Å—Ç–∞—Ç—É—Å–∞"""
    firebase = context.bot_data['firebase']
    user_id = update.callback_query.from_user.id
    contractor_login = firebase.get_entrepreneur_by_chat_id(user_id)

    if not contractor_login:
        await update.callback_query.edit_message_text("–ù–µ–æ–±—Ö–æ–¥–∏–º–æ –≤–æ–π—Ç–∏ –≤ —Å–∏—Å—Ç–µ–º—É.")
        return

    order = firebase.get_order_by_id(order_id)
    if not order:
        await update.callback_query.edit_message_text("–ó–∞–∫–∞–∑ –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        return

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–æ –∑–∞–∫–∞–∑ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è
    if order.get('executor', {}).get('username') != contractor_login:
        await update.callback_query.edit_message_text("–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–º—É –∑–∞–∫–∞–∑—É.")
        return

    status = order.get('status', 'unknown')
    status_map = {
        'in_work': '–í —Ä–∞–±–æ—Ç–µ',
        'on_review': '–ù–∞ –ø—Ä–æ–≤–µ—Ä–∫–µ',
        'completed': '–ó–∞–≤–µ—Ä—à–µ–Ω',
        'cancelled': '–û—Ç–º–µ–Ω–µ–Ω',
        'dispute': '–°–ø–æ—Ä',
        'pending': '–û–∂–∏–¥–∞–µ—Ç –ø—Ä–∏–Ω—è—Ç–∏—è',
        'waiting_payment': '–û–∂–∏–¥–∞–µ—Ç –æ–ø–ª–∞—Ç—ã',
        'payment_confirmed': '–û–ø–ª–∞—Ç–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞'
    }

    status_text = status_map.get(status, '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')
    customer_name = order.get('customer', {}).get('username', '–ù–µ–∏–∑–≤–µ—Å—Ç–µ–Ω')

    details_text = f"–î–ï–¢–ê–õ–ò –ó–ê–ö–ê–ó–ê\n"
    details_text += f"‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n\n"
    details_text += f"–ù–∞–∑–≤–∞–Ω–∏–µ: {order.get('title', '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è')}\n"
    details_text += f"–û–ø–∏—Å–∞–Ω–∏–µ: {order.get('description', '–û–ø–∏—Å–∞–Ω–∏–µ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç')}\n"
    details_text += f"–ó–∞–∫–∞–∑—á–∏–∫: {customer_name}\n"
    details_text += f"–ë—é–¥–∂–µ—Ç: {order.get('amount', 0)} —Ä—É–±.\n"
    details_text += f"–°—Ç–∞—Ç—É—Å: {status_text}\n"

    keyboard = []

    # –ö–Ω–æ–ø–∫–∞ —á–∞—Ç–∞ –¥–ª—è –∑–∞–∫–∞–∑–æ–≤ –≤ —Ä–∞–±–æ—Ç–µ –∏–ª–∏ –Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫–µ
    if status in ['in_work', 'on_review']:
        keyboard.append([InlineKeyboardButton("üí¨ –û—Ç–∫—Ä—ã—Ç—å —á–∞—Ç", callback_data=f'open_contractor_chat_{order_id}')])

    # –ö–Ω–æ–ø–∫–∞ —Å–¥–∞—á–∏ –∑–∞–∫–∞–∑–∞ –¥–ª—è –∑–∞–∫–∞–∑–æ–≤ –≤ —Ä–∞–±–æ—Ç–µ
    if status == 'in_work':
        keyboard.append([
            InlineKeyboardButton("üéØ –°–¥–∞—Ç—å –∑–∞–∫–∞–∑ –Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫—É", callback_data=f'submit_work_{order_id}')
        ])

    keyboard.append([InlineKeyboardButton("‚óÄÔ∏è –ö –º–æ–∏–º –∑–∞–∫–∞–∑–∞–º", callback_data='my_orders')])

    reply_markup = InlineKeyboardMarkup(keyboard)
    await update.callback_query.edit_message_text(details_text, reply_markup=reply_markup)


async def open_contractor_chat(update: Update, context: ContextTypes.DEFAULT_TYPE, order_id: str) -> None:
    """–û—Ç–∫—Ä—ã–≤–∞–µ—Ç —á–∞—Ç –¥–ª—è –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è"""
    firebase = context.bot_data['firebase']
    user_id = update.callback_query.from_user.id
    contractor_login = firebase.get_entrepreneur_by_chat_id(user_id)

    if not contractor_login:
        await update.callback_query.edit_message_text("–ù–µ–æ–±—Ö–æ–¥–∏–º–æ –≤–æ–π—Ç–∏ –≤ —Å–∏—Å—Ç–µ–º—É.")
        return

    order = firebase.get_order_by_id(order_id)
    if not order:
        await update.callback_query.edit_message_text("–ó–∞–∫–∞–∑ –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        return

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞
    if order.get('executor', {}).get('username') != contractor_login:
        await update.callback_query.edit_message_text("–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–º—É –∑–∞–∫–∞–∑—É.")
        return

    customer_name = order.get('customer', {}).get('username', '–ù–µ–∏–∑–≤–µ—Å—Ç–µ–Ω')

    # –ü–æ–ª—É—á–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è –∏–∑ —á–∞—Ç–∞
    messages = firebase.get_messages_by_order(order_id)

    chat_text = f"–ß–ê–¢ –ü–û –ó–ê–ö–ê–ó–£\n"
    chat_text += f"‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n"
    chat_text += f"–ó–∞–∫–∞–∑: {order.get('title', '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è')}\n"
    chat_text += f"–ó–∞–∫–∞–∑—á–∏–∫: {customer_name}\n\n"

    if messages:
        chat_text += "–ü–æ—Å–ª–µ–¥–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è:\n"
        chat_text += "‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ\n"

        for msg in messages[-10:]:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ 10 —Å–æ–æ–±—â–µ–Ω–∏–π
            role_text = "–ó–∞–∫–∞–∑—á–∏–∫" if msg.get('user_role') == 'customer' else "–í—ã"
            if msg.get('user_role') == 'admin':
                role_text = "–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä"

            chat_text += f"{role_text}: {msg.get('text', '')}\n\n"
    else:
        chat_text += "–°–æ–æ–±—â–µ–Ω–∏–π –ø–æ–∫–∞ –Ω–µ—Ç\n\n"

    chat_text += "–î–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –ø—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏—Ç–µ —Ç–µ–∫—Å—Ç."

    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ —á–∞—Ç–∞
    firebase.set_user_state(user_id, f'in_contractor_chat_{order_id}')

    keyboard = [
        [InlineKeyboardButton("üîÑ –û–±–Ω–æ–≤–∏—Ç—å", callback_data=f'open_contractor_chat_{order_id}')],
        [InlineKeyboardButton("‚óÄÔ∏è –ö –¥–µ—Ç–∞–ª—è–º –∑–∞–∫–∞–∑–∞", callback_data=f'contractor_order_{order_id}')]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)

    await update.callback_query.edit_message_text(chat_text, reply_markup=reply_markup)


async def submit_work(update: Update, context: ContextTypes.DEFAULT_TYPE, order_id: str) -> None:
    """–°–¥–∞—á–∞ –∑–∞–∫–∞–∑–∞ –Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫—É –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª–µ–º"""
    firebase = context.bot_data['firebase']
    user_id = update.callback_query.from_user.id
    contractor_login = firebase.get_entrepreneur_by_chat_id(user_id)

    if not contractor_login:
        await update.callback_query.edit_message_text("–ù–µ–æ–±—Ö–æ–¥–∏–º–æ –≤–æ–π—Ç–∏ –≤ —Å–∏—Å—Ç–µ–º—É.")
        return

    order = firebase.get_order_by_id(order_id)
    if not order or order.get('executor', {}).get('username') != contractor_login:
        await update.callback_query.edit_message_text("–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–º—É –∑–∞–∫–∞–∑—É.")
        return

    # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –∑–∞–∫–∞–∑–∞
    firebase.update_order(order_id, {
        'status': 'on_review',
        'submitted_for_review': True,
        'submitted_at': datetime.now()
    })

    # –£–≤–µ–¥–æ–º–ª—è–µ–º –∫–ª–∏–µ–Ω—Ç–∞
    customer_username = order.get('customer', {}).get('username')
    if customer_username:
        customer_chat_id = firebase.get_user_chat_id_by_username(customer_username)
        if customer_chat_id:
            keyboard = [
                [InlineKeyboardButton("‚úÖ –ü—Ä–∏–Ω—è—Ç—å —Ä–∞–±–æ—Ç—É", callback_data=f'accept_work_{order_id}')],
                [InlineKeyboardButton("üîÑ –ù–∞ –¥–æ—Ä–∞–±–æ—Ç–∫—É", callback_data=f'request_revision_{order_id}')]
            ]
            reply_markup = InlineKeyboardMarkup(keyboard)

            try:
                await context.bot.send_message(
                    chat_id=customer_chat_id,
                    text=f"üéØ –ó–ê–ö–ê–ó –ì–û–¢–û–í –ö –ü–†–û–í–ï–†–ö–ï!\n\n"
                         f"üìã –ó–∞–∫–∞–∑: {order.get('title', '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è')}\n"
                         f"üë§ –ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å: {contractor_login}\n"
                         f"üí∞ –°—É–º–º–∞: {order.get('amount', 0)} —Ä—É–±.\n\n"
                         f"–ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å –∑–∞–≤–µ—Ä—à–∏–ª —Ä–∞–±–æ—Ç—É –Ω–∞–¥ –∑–∞–∫–∞–∑–æ–º.\n"
                         f"–ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç –∏ –ø—Ä–∏–º–∏—Ç–µ —Ä–µ—à–µ–Ω–∏–µ:",
                    reply_markup=reply_markup
                )
                print(f"–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ —Ä–∞–±–æ—Ç—ã –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –∫–ª–∏–µ–Ω—Ç—É {customer_username}")
            except Exception as e:
                print(f"–û—à–∏–±–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∫–ª–∏–µ–Ω—Ç–∞: {e}")

    await update.callback_query.edit_message_text(
        "üéØ –ó–ê–ö–ê–ó –°–î–ê–ù –ù–ê –ü–†–û–í–ï–†–ö–£!\n\n"
        f"–ó–∞–∫–∞–∑: {order.get('title', '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è')}\n\n"
        "–ö–ª–∏–µ–Ω—Ç –ø–æ–ª—É—á–∏–ª —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ —Ä–∞–±–æ—Ç—ã.\n"
        "–û–∂–∏–¥–∞–π—Ç–µ —Ä–µ—à–µ–Ω–∏—è –∫–ª–∏–µ–Ω—Ç–∞ –æ –ø—Ä–∏–µ–º–∫–µ."
    )


async def personal_cabinet(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–õ–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è"""
    firebase = context.bot_data['firebase']
    user_id = update.callback_query.from_user.id
    contractor_login = firebase.get_entrepreneur_by_chat_id(user_id)

    if contractor_login:
        balance = firebase.get_balance(contractor_login)
        rating = firebase.get_rating(contractor_login)

        cabinet_text = f"üë§ –õ–ò–ß–ù–´–ô –ö–ê–ë–ò–ù–ï–¢\n"
        cabinet_text += f"‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n\n"
        cabinet_text += f"üìù –õ–æ–≥–∏–Ω: {contractor_login}\n"
        cabinet_text += f"üí∞ –ë–∞–ª–∞–Ω—Å: {balance} —Ä—É–±.\n"
        cabinet_text += f"‚≠ê –†–µ–π—Ç–∏–Ω–≥: {rating}/10\n"

        keyboard = []

        # –ö–Ω–æ–ø–∫–∏ –≤—ã–≤–æ–¥–∞ —Å—Ä–µ–¥—Å—Ç–≤ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –±–∞–ª–∞–Ω—Å–∞
        if balance >= 1000:
            keyboard.append([
                InlineKeyboardButton("üí∏ –í—ã–≤–µ—Å—Ç–∏ 500‚ÇΩ", callback_data=f'withdraw_amount_{contractor_login}_500'),
                InlineKeyboardButton("üí∏ –í—ã–≤–µ—Å—Ç–∏ 1000‚ÇΩ", callback_data=f'withdraw_amount_{contractor_login}_1000')
            ])
            if balance >= 2000:
                keyboard.append(
                    [InlineKeyboardButton("üí∏ –í—ã–≤–µ—Å—Ç–∏ 2000‚ÇΩ", callback_data=f'withdraw_amount_{contractor_login}_2000')])

            keyboard.append(
                [InlineKeyboardButton("üí∏ –î—Ä—É–≥–∞—è —Å—É–º–º–∞", callback_data=f'withdraw_custom_{contractor_login}')])
        else:
            keyboard.append([InlineKeyboardButton("üí∏ –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤", callback_data='withdraw_unavailable')])

        keyboard.append([InlineKeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥ –∫ –º–µ–Ω—é", callback_data='entrepreneur')])

        reply_markup = InlineKeyboardMarkup(keyboard)
        await update.callback_query.edit_message_text(cabinet_text, reply_markup=reply_markup)
    else:
        await update.callback_query.edit_message_text("–ù–µ–æ–±—Ö–æ–¥–∏–º–æ –≤–æ–π—Ç–∏ –≤ —Å–∏—Å—Ç–µ–º—É.")


async def withdraw_money(update: Update, context: ContextTypes.DEFAULT_TYPE, contractor_login: str) -> None:
    """–ú–µ–Ω—é –≤—ã–≤–æ–¥–∞ —Å—Ä–µ–¥—Å—Ç–≤"""
    firebase = context.bot_data['firebase']
    balance = firebase.get_balance(contractor_login)

    withdraw_text = f"üí∏ –í–´–í–û–î –°–†–ï–î–°–¢–í\n"
    withdraw_text += f"‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n\n"
    withdraw_text += f"–î–æ—Å—Ç—É–ø–Ω–æ: {balance} —Ä—É–±.\n\n"
    withdraw_text += f"–í—ã–±–µ—Ä–∏—Ç–µ —Å—É–º–º—É –¥–ª—è –≤—ã–≤–æ–¥–∞:"

    keyboard = []

    if balance >= 1000:
        keyboard.append([
            InlineKeyboardButton("500 —Ä—É–±.", callback_data=f'withdraw_amount_{contractor_login}_500'),
            InlineKeyboardButton("1000 —Ä—É–±.", callback_data=f'withdraw_amount_{contractor_login}_1000')
        ])
        if balance >= 2000:
            keyboard.append(
                [InlineKeyboardButton("2000 —Ä—É–±.", callback_data=f'withdraw_amount_{contractor_login}_2000')])

        keyboard.append([InlineKeyboardButton("üí∏ –î—Ä—É–≥–∞—è —Å—É–º–º–∞", callback_data=f'withdraw_custom_{contractor_login}')])
    else:
        keyboard.append([InlineKeyboardButton("üí∏ –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤", callback_data='withdraw_unavailable')])

    keyboard.append([InlineKeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data='personal_cabinet')])

    reply_markup = InlineKeyboardMarkup(keyboard)
    await update.callback_query.edit_message_text(withdraw_text, reply_markup=reply_markup)


async def process_withdrawal(update: Update, context: ContextTypes.DEFAULT_TYPE, contractor_login: str,
                             amount: float) -> None:
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–≤–æ–¥–∞ —Å—Ä–µ–¥—Å—Ç–≤"""
    firebase = context.bot_data['firebase']
    current_balance = firebase.get_balance(contractor_login)

    if amount <= current_balance:
        firebase.update_balance(contractor_login, -amount)

        await update.callback_query.edit_message_text(
            f"‚úÖ –í–´–í–û–î –í–´–ü–û–õ–ù–ï–ù\n\n"
            f"–°—É–º–º–∞: {amount} —Ä—É–±.\n"
            f"–ù–æ–≤—ã–π –±–∞–ª–∞–Ω—Å: {current_balance - amount} —Ä—É–±.\n\n"
            f"–°—Ä–µ–¥—Å—Ç–≤–∞ –ø–æ—Å—Ç—É–ø—è—Ç –Ω–∞ –≤–∞—à—É –∫–∞—Ä—Ç—É –≤ —Ç–µ—á–µ–Ω–∏–µ 1-3 —Ä–∞–±–æ—á–∏—Ö –¥–Ω–µ–π."
        )
    else:
        await update.callback_query.edit_message_text(
            f"‚ùå –ù–ï–î–û–°–¢–ê–¢–û–ß–ù–û –°–†–ï–î–°–¢–í\n\n"
            f"–ó–∞–ø—Ä–æ—à–µ–Ω–æ: {amount} —Ä—É–±.\n"
            f"–î–æ—Å—Ç—É–ø–Ω–æ: {current_balance} —Ä—É–±."
        )


async def withdraw_custom_amount(update: Update, context: ContextTypes.DEFAULT_TYPE, contractor_login: str) -> None:
    """–ó–∞–ø—Ä–æ—Å –ø—Ä–æ–∏–∑–≤–æ–ª—å–Ω–æ–π —Å—É–º–º—ã –¥–ª—è –≤—ã–≤–æ–¥–∞"""
    firebase = context.bot_data['firebase']
    balance = firebase.get_balance(contractor_login)

    await update.callback_query.edit_message_text(
        f"üí∏ –ü–†–û–ò–ó–í–û–õ–¨–ù–ê–Ø –°–£–ú–ú–ê\n\n"
        f"–î–æ—Å—Ç—É–ø–Ω–æ: {balance} —Ä—É–±.\n\n"
        f"–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –¥–ª—è –≤—ã–≤–æ–¥–∞ (–º–∏–Ω–∏–º—É–º 100 —Ä—É–±.):"
    )

    firebase.set_user_state(update.callback_query.from_user.id, f'withdraw_amount_input_{contractor_login}')


async def order_details(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–î–µ—Ç–∞–ª–∏ –∑–∞–∫–∞–∑–∞ (–∑–∞–≥–ª—É—à–∫–∞)"""
    await update.callback_query.edit_message_text("–§—É–Ω–∫—Ü–∏—è –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ...")