# handlers_contractor.py
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import ContextTypes
from state_manager import user_state


async def entrepreneur_menu(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–ú–µ–Ω—é –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è"""
    user_id = update.callback_query.from_user.id
    logged_in_user = user_state.get_entrepreneur_by_chat_id(user_id)

    keyboard = []

    if logged_in_user:
        # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω
        keyboard.append([InlineKeyboardButton("–ú–æ–∏ –∑–∞–∫–∞–∑—ã", callback_data='my_orders')])
        keyboard.append([InlineKeyboardButton("–í—ã–π—Ç–∏", callback_data='logout')])
        context.user_data['contractor_login'] = logged_in_user
        balance = user_state.get_entrepreneur_balance(logged_in_user)
        message_text = f'–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, {logged_in_user}!\n–í–∞—à –±–∞–ª–∞–Ω—Å: {balance} —Ä—É–±.\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:'
    else:
        # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω
        keyboard.append([InlineKeyboardButton("–í–æ–π—Ç–∏", callback_data='login')])
        message_text = '–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ (–ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å):'

    reply_markup = InlineKeyboardMarkup(keyboard)
    await update.callback_query.edit_message_text(message_text, reply_markup=reply_markup)


async def add_service(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–î–æ–±–∞–≤–ª–µ–Ω–∏–µ —É—Å–ª—É–≥–∏"""
    await update.callback_query.edit_message_text(
        "–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —É—Å–ª—É–≥–∏, –æ–ø–∏—Å–∞–Ω–∏–µ –∏ —Ü–µ–Ω—É."
    )


async def my_portfolio(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–ü–æ—Ä—Ç—Ñ–æ–ª–∏–æ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è"""
    portfolio = "–í–∞—à–∏ —É—Å–ª—É–≥–∏:\n1. –í–µ–±-—Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∞\n2. –î–∏–∑–∞–π–Ω —Å–∞–π—Ç–æ–≤\n3. SEO-–æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è"
    await update.callback_query.edit_message_text(portfolio)


async def login_entrepreneur(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–ù–∞—á–∞–ª–æ –ø—Ä–æ—Ü–µ—Å—Å–∞ –≤—Ö–æ–¥–∞"""
    await update.callback_query.edit_message_text("–í–≤–µ–¥–∏—Ç–µ –ª–æ–≥–∏–Ω:")
    user_state.set_state(update.callback_query.from_user.id, 'login')


async def my_orders(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–ü–æ–∫–∞–∑ –∑–∞–∫–∞–∑–æ–≤ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è"""
    query = update.callback_query
    await query.answer()

    user_id = query.from_user.id
    contractor_login = user_state.get_entrepreneur_by_chat_id(user_id)

    if contractor_login:
        orders = user_state.get_orders(contractor_login)
        balance = user_state.get_entrepreneur_balance(contractor_login)

        if orders:
            await query.edit_message_text(
                f"–£ –≤–∞—Å {len(orders)} –∑–∞–∫–∞–∑(–∞/–æ–≤):\n–í–∞—à –±–∞–ª–∞–Ω—Å: {balance} —Ä—É–±."
            )
            for i, order in enumerate(orders, start=1):
                if isinstance(order, dict):
                    # –ù–æ–≤—ã–π —Ñ–æ—Ä–º–∞—Ç –∑–∞–∫–∞–∑–∞ —Å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π
                    status = "‚úÖ –ü—Ä–∏–Ω—è—Ç" if order.get('accepted', False) else "‚è≥ –û–∂–∏–¥–∞–µ—Ç"
                    client = order.get('client_login', '–ù–µ —É–∫–∞–∑–∞–Ω')

                    order_text = f"üìã –ó–∞–∫–∞–∑ {i}:\n{order.get('description', '–û–ø–∏—Å–∞–Ω–∏–µ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç')}"
                    order_text += f"\nüë§ –ó–∞–∫–∞–∑—á–∏–∫: {client}"
                    order_text += f"\nüìä –°—Ç–∞—Ç—É—Å: {status}"

                    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–∞–π–º–µ—Ä, –µ—Å–ª–∏ –æ–Ω –∞–∫—Ç–∏–≤–µ–Ω
                    if order.get('timer_active', False) and 'timer_end' in order:
                        from datetime import datetime
                        from utils import format_time_remaining

                        end_time = datetime.fromisoformat(order['timer_end']) if isinstance(order['timer_end'],
                                                                                            str) else order['timer_end']
                        timer_info = format_time_remaining(end_time)
                        order_text += f"\n{timer_info}"

                    await query.message.reply_text(order_text)
                else:
                    # –°—Ç–∞—Ä—ã–π —Ñ–æ—Ä–º–∞—Ç –∑–∞–∫–∞–∑–∞ (—Å—Ç—Ä–æ–∫–∞)
                    await query.message.reply_text(f"–ó–∞–∫–∞–∑ {i}:\n{order}")
        else:
            await query.edit_message_text(f"–£ –≤–∞—Å –Ω–µ—Ç –∑–∞–∫–∞–∑–æ–≤.\n–í–∞—à –±–∞–ª–∞–Ω—Å: {balance} —Ä—É–±.")
    else:
        await query.edit_message_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–æ–π–¥–∏—Ç–µ –≤ —Å–∏—Å—Ç–µ–º—É —Å–Ω–∞—á–∞–ª–∞.")


async def logout_entrepreneur(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–í—ã—Ö–æ–¥ –∏–∑ –∞–∫–∫–∞—É–Ω—Ç–∞"""
    user_id = update.callback_query.from_user.id
    contractor_login = user_state.get_entrepreneur_by_chat_id(user_id)

    if contractor_login:
        # –£–±–∏—Ä–∞–µ–º chat_id –∏–∑ –¥–∞–Ω–Ω—ã—Ö –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è
        user_state.remove_entrepreneur_chat_id(contractor_login)

        # –û—á–∏—â–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
        if 'contractor_login' in context.user_data:
            del context.user_data['contractor_login']

        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –º–µ–Ω—é –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è –ø–æ—Å–ª–µ –≤—ã—Ö–æ–¥–∞
        keyboard = [
            [InlineKeyboardButton("–î–æ–±–∞–≤–∏—Ç—å —É—Å–ª—É–≥—É", callback_data='add_service')],
            [InlineKeyboardButton("–ú–æ–µ –ø–æ—Ä—Ç—Ñ–æ–ª–∏–æ", callback_data='my_portfolio')],
            [InlineKeyboardButton("–í–æ–π—Ç–∏", callback_data='login')]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        await update.callback_query.edit_message_text(
            "–í—ã —É—Å–ø–µ—à–Ω–æ –≤—ã—à–ª–∏ –∏–∑ –∞–∫–∫–∞—É–Ω—Ç–∞.\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ (–ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å):",
            reply_markup=reply_markup
        )
    else:
        await update.callback_query.edit_message_text("–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã—Ö–æ–¥–µ –∏–∑ –∞–∫–∫–∞—É–Ω—Ç–∞.")


async def handle_login_process(update: Update, context: ContextTypes.DEFAULT_TYPE, state: str) -> bool:
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –ø—Ä–æ—Ü–µ—Å—Å –≤—Ö–æ–¥–∞ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è.
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç True, –µ—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –±—ã–ª–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ —ç—Ç–∏–º —Ö–µ–Ω–¥–ª–µ—Ä–æ–º.
    """
    user_id = update.message.from_user.id

    if state == 'login':
        context.user_data['login'] = update.message.text
        await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å:")
        user_state.set_state(user_id, 'password')
        return True

    elif state == 'password':
        login = context.user_data.get('login')
        password = update.message.text

        if login and user_state.check_entrepreneur(login, password):
            # –£—Å–ø–µ—à–Ω—ã–π –≤—Ö–æ–¥
            user_state.set_entrepreneur_chat_id(login, user_id)
            balance = user_state.get_entrepreneur_balance(login)

            keyboard = [
                [InlineKeyboardButton("–î–æ–±–∞–≤–∏—Ç—å —É—Å–ª—É–≥—É", callback_data='add_service')],
                [InlineKeyboardButton("–ú–æ–µ –ø–æ—Ä—Ç—Ñ–æ–ª–∏–æ", callback_data='my_portfolio')],
                [InlineKeyboardButton("–ú–æ–∏ –∑–∞–∫–∞–∑—ã", callback_data='my_orders')],
                [InlineKeyboardButton("–í—ã–π—Ç–∏", callback_data='logout')]
            ]
            reply_markup = InlineKeyboardMarkup(keyboard)
            await update.message.reply_text(
                f"–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ —Å–∏—Å—Ç–µ–º—É, {login}!\n–í–∞—à –±–∞–ª–∞–Ω—Å: {balance} —Ä—É–±.\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
                reply_markup=reply_markup
            )
            context.user_data['contractor_login'] = login
        else:
            await update.message.reply_text("–î–∞–Ω–Ω—ã–µ –Ω–µ–≤–µ—Ä–Ω—ã–µ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")

        user_state.set_state(user_id, None)
        return True

    return False