# button_handler.py
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import ContextTypes

from handlers_client import (client_menu, show_portfolio, create_order, consultation, handle_order_response,
                             client_login, client_register, client_logout, my_client_orders, open_chat,
                             our_works, category_sites, category_video, show_subcategory_works, show_portfolio_item)
from handlers_contractor import entrepreneur_menu, login_entrepreneur, logout_entrepreneur, my_orders
from handlers_admin import (all_entrepreneurs, entrepreneur_details, change_rating, change_balance,
                            delete_entrepreneur_confirm, register_entrepreneur_start,
                            admin_portfolio_menu, add_portfolio_start, view_portfolio_admin, view_category_admin,
                            show_portfolio_item_admin, delete_portfolio_confirm, execute_portfolio_delete)


async def button(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û—Å–Ω–æ–≤–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–æ–∫"""
    query = update.callback_query
    await query.answer()

    data = query.data
    print(f"üî• DEBUG: –ü–æ–ª—É—á–µ–Ω callback_data: {data}")

    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Å–Ω–æ–≤–Ω—ã—Ö —Ä–æ–ª–µ–π
    if data == 'client':
        await client_menu(update, context)
    elif data == 'entrepreneur':
        await entrepreneur_menu(update, context)

    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–æ–∫ –∑–∞–∫–∞–∑—á–∏–∫–∞
    elif data == 'portfolio':
        await show_portfolio(update, context)
    elif data == 'create_order':
        await create_order(update, context)
    elif data == 'consultation':
        await consultation(update, context)
    elif data == 'client_login':
        await client_login(update, context)
    elif data == 'client_register':
        await client_register(update, context)
    elif data == 'client_logout':
        await client_logout(update, context)
    elif data == 'my_client_orders':
        await my_client_orders(update, context)
    elif data == 'our_works':
        await our_works(update, context)
    elif data == 'category_sites':
        print(f"üî• DEBUG: –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ category_sites")
        await category_sites(update, context)
    elif data == 'category_video':
        print(f"üî• DEBUG: –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ category_video")
        await category_video(update, context)

    # –ò–°–ü–†–ê–í–õ–ï–ù–ù–ê–Ø –æ–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–æ–∫ "–ù–∞–∑–∞–¥" –∏–∑ –ø–æ—Ä—Ç—Ñ–æ–ª–∏–æ
    elif data == 'back_to_sites':
        print(f"üî• DEBUG: –í–æ–∑–≤—Ä–∞—Ç –∫ —Å–∞–π—Ç–∞–º")
        try:
            # –£–¥–∞–ª—è–µ–º —Ç–µ–∫—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ (–µ—Å–ª–∏ –º–æ–∂–µ–º)
            await query.delete_message()
        except:
            pass

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–æ —Å–ø–∏—Å–∫–æ–º —Å–∞–π—Ç–æ–≤
        await send_category_sites_message(update, context)

    elif data == 'back_to_video':
        print(f"üî• DEBUG: –í–æ–∑–≤—Ä–∞—Ç –∫ –≤–∏–¥–µ–æ")
        try:
            await query.delete_message()
        except:
            pass
        await send_category_video_message(update, context)

    elif data == 'back_to_our_works':
        print(f"üî• DEBUG: –í–æ–∑–≤—Ä–∞—Ç –∫ –Ω–∞—à–∏–º —Ä–∞–±–æ—Ç–∞–º")
        try:
            await query.delete_message()
        except:
            pass
        await send_our_works_message(update, context)

    # –û–±—Ä–∞–±–æ—Ç–∫–∞ —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –ø–æ—Ä—Ç—Ñ–æ–ª–∏–æ
    elif data.startswith('portfolio_item_'):
        parts = data.split('_')
        category = parts[2]
        index = int(parts[3])
        await show_portfolio_item(update, context, category, index)

    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏–π —Ä–∞–±–æ—Ç
    elif data.startswith('subcategory_'):
        subcategory = data.replace('subcategory_', '')
        await show_subcategory_works(update, context, subcategory)

    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–æ–∫ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è
    elif data == 'login':
        await login_entrepreneur(update, context)
    elif data == 'logout':
        await logout_entrepreneur(update, context)
    elif data == 'my_orders':
        await my_orders(update, context)

    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–∏–≤–Ω—ã—Ö –∫–Ω–æ–ø–æ–∫
    elif data == 'register_entrepreneur':
        await register_entrepreneur_start(update, context)
    elif data == 'all_entrepreneurs':
        await all_entrepreneurs(update, context)
    elif data == 'portfolio_menu':
        await admin_portfolio_menu(update, context)
    elif data == 'add_portfolio_sites':
        await add_portfolio_start(update, context, 'sites')
    elif data == 'add_portfolio_video':
        await add_portfolio_start(update, context, 'video')
    elif data == 'view_portfolio':
        await view_portfolio_admin(update, context)
    elif data == 'admin_view_sites':
        await view_category_admin(update, context, 'sites')
    elif data == 'admin_view_video':
        await view_category_admin(update, context, 'video')

    # –ù–û–í–´–ï –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò –î–õ–Ø –£–î–ê–õ–ï–ù–ò–Ø –ü–û–†–¢–§–û–õ–ò–û
    elif data == 'delete_portfolio_start':
        from handlers_admin import delete_portfolio_start
        await delete_portfolio_start(update, context)
    elif data == 'delete_category_sites':
        from handlers_admin import delete_category_items
        await delete_category_items(update, context, 'sites')
    elif data == 'delete_category_video':
        from handlers_admin import delete_category_items
        await delete_category_items(update, context, 'video')
    elif data.startswith('delete_item_'):
        parts = data.split('_')
        category = parts[2]
        index = int(parts[3])
        from handlers_admin import delete_item_confirm
        await delete_item_confirm(update, context, category, index)

    elif data == 'admin_back':
        # –í–æ–∑–≤—Ä–∞—Ç –≤ –≥–ª–∞–≤–Ω–æ–µ –∞–¥–º–∏–Ω –º–µ–Ω—é
        keyboard = [
            [InlineKeyboardButton("–ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è", callback_data='register_entrepreneur')],
            [InlineKeyboardButton("–í—Å–µ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª–∏", callback_data='all_entrepreneurs')],
            [InlineKeyboardButton("–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ—Ä—Ç—Ñ–æ–ª–∏–æ", callback_data='portfolio_menu')]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        await update.callback_query.edit_message_text("–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä!", reply_markup=reply_markup)
    elif data == 'admin_back':
        # –í–æ–∑–≤—Ä–∞—Ç –≤ –≥–ª–∞–≤–Ω–æ–µ –∞–¥–º–∏–Ω –º–µ–Ω—é
        keyboard = [
            [InlineKeyboardButton("–ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è", callback_data='register_entrepreneur')],
            [InlineKeyboardButton("–í—Å–µ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª–∏", callback_data='all_entrepreneurs')],
            [InlineKeyboardButton("–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ—Ä—Ç—Ñ–æ–ª–∏–æ", callback_data='portfolio_menu')]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        await update.callback_query.edit_message_text("–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä!", reply_markup=reply_markup)

    # –û–±—Ä–∞–±–æ—Ç–∫–∞ —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –ø–æ—Ä—Ç—Ñ–æ–ª–∏–æ –≤ –∞–¥–º–∏–Ω–∫–µ
    elif data.startswith('admin_item_'):
        parts = data.split('_')
        category = parts[2]
        index = int(parts[3])
        await show_portfolio_item_admin(update, context, category, index)
    elif data.startswith('delete_confirm_'):
        parts = data.split('_')
        category = parts[2]
        index = int(parts[3])
        await delete_portfolio_confirm(update, context, category, index)
    elif data.startswith('delete_execute_'):
        parts = data.split('_')
        category = parts[2]
        index = int(parts[3])
        await execute_portfolio_delete(update, context, category, index)

    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏—Ö –∫–Ω–æ–ø–æ–∫
    elif data.startswith('entrepreneur_'):
        login = data.split('_')[1]
        await entrepreneur_details(update, context, login)
    elif data.startswith('change_rating_'):
        login = data.split('_')[2]
        await change_rating(update, context, login)
    elif data.startswith('change_balance_'):
        login = data.split('_')[2]
        await change_balance(update, context, login)
    elif data.startswith('delete_entrepreneur_'):
        login = data.split('_')[2]
        await delete_entrepreneur_confirm(update, context, login)

    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–≤–µ—Ç–æ–≤ –Ω–∞ –∑–∞–∫–∞–∑—ã
    elif data.startswith('accept_order_'):
        customer_id = int(data.split('_')[2])
        await handle_order_response(update, context, 'accept', customer_id)
    elif data.startswith('decline_order_'):
        customer_id = int(data.split('_')[2])
        await handle_order_response(update, context, 'decline', customer_id)

    # –û–±—Ä–∞–±–æ—Ç–∫–∞ —á–∞—Ç–æ–≤
    elif data.startswith('open_chat_'):
        chat_id = '_'.join(data.split('_')[2:])  # –°–æ–±–∏—Ä–∞–µ–º chat_id –æ–±—Ä–∞—Ç–Ω–æ
        await open_chat(update, context, chat_id)

    else:
        print(f"‚ùå DEBUG: –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π callback_data: {data}")
        await query.edit_message_text(f"–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞: {data}")


async def send_category_sites_message(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–æ —Å–ø–∏—Å–∫–æ–º —Å–∞–π—Ç–æ–≤"""
    from state_manager import user_state

    portfolio_items = user_state.get_portfolio_items('sites')
    keyboard = []

    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –ø—Ä–æ–µ–∫—Ç–∞
    for i, item in enumerate(portfolio_items):
        keyboard.append([InlineKeyboardButton(item['title'], callback_data=f'portfolio_item_sites_{i}')])

    # –ï—Å–ª–∏ –Ω–µ—Ç –ø—Ä–æ–µ–∫—Ç–æ–≤, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏–∏
    if not portfolio_items:
        keyboard = [
            [InlineKeyboardButton("üìÑ –õ–µ–Ω–¥–∏–Ω–≥–∏", callback_data='subcategory_landing')],
            [InlineKeyboardButton("üõí –ò–Ω—Ç–µ—Ä–Ω–µ—Ç –º–∞–≥–∞–∑–∏–Ω—ã", callback_data='subcategory_shop')],
            [InlineKeyboardButton("üé® –°–∞–π—Ç—ã –Ω–∞ –¢–∏–ª—å–¥–∞", callback_data='subcategory_tilda')],
            [InlineKeyboardButton("‚öôÔ∏è –°–∞–π—Ç—ã –Ω–∞ WordPress", callback_data='subcategory_wordpress')]
        ]

    keyboard.append([InlineKeyboardButton("‚Üê –ù–∞–∑–∞–¥", callback_data='our_works')])
    reply_markup = InlineKeyboardMarkup(keyboard)

    message_text = "–ù–∞—à–∏ —Å–∞–π—Ç—ã:" if portfolio_items else "–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø —Å–∞–π—Ç–∞:"

    await context.bot.send_message(
        chat_id=update.callback_query.from_user.id,
        text=message_text,
        reply_markup=reply_markup
    )


async def send_category_video_message(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–æ —Å–ø–∏—Å–∫–æ–º –≤–∏–¥–µ–æ"""
    from state_manager import user_state

    portfolio_items = user_state.get_portfolio_items('video')
    keyboard = []

    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –ø—Ä–æ–µ–∫—Ç–∞
    for i, item in enumerate(portfolio_items):
        keyboard.append([InlineKeyboardButton(item['title'], callback_data=f'portfolio_item_video_{i}')])

    # –ï—Å–ª–∏ –Ω–µ—Ç –ø—Ä–æ–µ–∫—Ç–æ–≤, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏–∏
    if not portfolio_items:
        keyboard = [
            [InlineKeyboardButton("üì∫ –í–∏–¥–µ–æ —Ä–µ–∫–ª–∞–º–∞", callback_data='subcategory_ads')],
            [InlineKeyboardButton("üé≠ –ö—Ä–µ–∞—Ç–∏–≤—ã", callback_data='subcategory_creative')],
            [InlineKeyboardButton("‚ú® –ê–Ω–∏–º–∞—Ü–∏–∏", callback_data='subcategory_animation')],
            [InlineKeyboardButton("üé¨ –ú–æ—É—à–µ–Ω –≥—Ä–∞—Ñ–∏–∫–∞", callback_data='subcategory_motion')],
            [InlineKeyboardButton("üéÆ 3D –≤–∏–¥–µ–æ", callback_data='subcategory_3d')]
        ]

    keyboard.append([InlineKeyboardButton("‚Üê –ù–∞–∑–∞–¥", callback_data='our_works')])
    reply_markup = InlineKeyboardMarkup(keyboard)

    message_text = "–ù–∞—à–∏ –≤–∏–¥–µ–æ:" if portfolio_items else "–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –≤–∏–¥–µ–æ:"

    await context.bot.send_message(
        chat_id=update.callback_query.from_user.id,
        text=message_text,
        reply_markup=reply_markup
    )


async def send_our_works_message(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º–∏ —Ä–∞–±–æ—Ç"""
    keyboard = [
        [InlineKeyboardButton("üåê –°–∞–π—Ç—ã", callback_data='category_sites')],
        [InlineKeyboardButton("üé¨ –í–∏–¥–µ–æ", callback_data='category_video')],
        [InlineKeyboardButton("‚Üê –ù–∞–∑–∞–¥", callback_data='client')]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)

    await context.bot.send_message(
        chat_id=update.callback_query.from_user.id,
        text="–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é:",
        reply_markup=reply_markup
    )