# handlers_admin.py - –ø–æ–ª–Ω–∞—è –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å —Å —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ–º –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è–º–∏ –∏ –ø–æ—Ä—Ç—Ñ–æ–ª–∏–æ
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import ContextTypes
from datetime import datetime


async def admin_menu(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏"""
    firebase = context.bot_data['firebase']

    admin_text = """üîß –ê–î–ú–ò–ù-–ü–ê–ù–ï–õ–¨

–í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–¥–µ–ª –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è:"""

    keyboard = [
        [InlineKeyboardButton("üë• –ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª–∏", callback_data='admin_executors')],
        [InlineKeyboardButton("üé® –ü–æ—Ä—Ç—Ñ–æ–ª–∏–æ", callback_data='admin_portfolio')],
        [InlineKeyboardButton("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data='admin_stats')],
        [InlineKeyboardButton("üîô –í—ã—Ö–æ–¥", callback_data='admin_exit')]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)

    if update.callback_query:
        await update.callback_query.edit_message_text(admin_text, reply_markup=reply_markup)
    else:
        await update.message.reply_text(admin_text, reply_markup=reply_markup)


async def admin_executors_menu(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–ú–µ–Ω—é —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è–º–∏"""
    firebase = context.bot_data['firebase']

    executors_text = """üë• –£–ü–†–ê–í–õ–ï–ù–ò–ï –ò–°–ü–û–õ–ù–ò–¢–ï–õ–Ø–ú–ò

–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:"""

    keyboard = [
        [InlineKeyboardButton("üìã –í—Å–µ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª–∏", callback_data='admin_view_executors')],
        [InlineKeyboardButton("‚ûï –î–æ–±–∞–≤–∏—Ç—å –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è", callback_data='admin_add_executor')],
        [InlineKeyboardButton("‚ùå –£–¥–∞–ª–∏—Ç—å –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è", callback_data='admin_delete_executor')],
        [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥ –≤ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å", callback_data='admin_menu')]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)

    await update.callback_query.edit_message_text(executors_text, reply_markup=reply_markup)


async def view_all_executors(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–ü—Ä–æ—Å–º–æ—Ç—Ä –≤—Å–µ—Ö –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª–µ–π"""
    firebase = context.bot_data['firebase']

    try:
        executors = firebase.get_all_executors()

        if not executors:
            text = "üìã –ò–°–ü–û–õ–ù–ò–¢–ï–õ–ò\n\n–ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã."
        else:
            text = f"üìã –ò–°–ü–û–õ–ù–ò–¢–ï–õ–ò ({len(executors)})\n\n"

            for i, executor in enumerate(executors, 1):
                username = executor.get('username', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')
                balance = executor.get('balance', 0)
                rating = executor.get('rating', 10)
                completed_orders = executor.get('completed_orders', 0)
                status = executor.get('status', 'active')

                text += f"{i}. {username}\n"
                text += f"   üí∞ –ë–∞–ª–∞–Ω—Å: {balance} —Ä—É–±.\n"
                text += f"   ‚≠ê –†–µ–π—Ç–∏–Ω–≥: {rating}\n"
                text += f"   ‚úÖ –ó–∞–∫–∞–∑–æ–≤: {completed_orders}\n"
                text += f"   üîò –°—Ç–∞—Ç—É—Å: {status}\n\n"

    except Exception as e:
        text = f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª–µ–π: {str(e)}"
        print(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª–µ–π: {e}")

    keyboard = [
        [InlineKeyboardButton("üîÑ –û–±–Ω–æ–≤–∏—Ç—å", callback_data='admin_view_executors')],
        [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data='admin_executors')]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)

    await update.callback_query.edit_message_text(text, reply_markup=reply_markup)


async def add_executor_start(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–ù–∞—á–∞–ª–æ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è"""
    firebase = context.bot_data['firebase']
    user_id = update.callback_query.from_user.id

    await update.callback_query.edit_message_text(
        "‚ûï –î–û–ë–ê–í–ò–¢–¨ –ò–°–ü–û–õ–ù–ò–¢–ï–õ–Ø\n\n–í–≤–µ–¥–∏—Ç–µ –ª–æ–≥–∏–Ω –¥–ª—è –Ω–æ–≤–æ–≥–æ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è:"
    )
    firebase.set_user_state(user_id, 'admin_add_executor_login')


async def delete_executor_start(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–ù–∞—á–∞–ª–æ —É–¥–∞–ª–µ–Ω–∏—è –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è"""
    firebase = context.bot_data['firebase']

    try:
        executors = firebase.get_all_executors()

        if not executors:
            keyboard = [[InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data='admin_executors')]]
            reply_markup = InlineKeyboardMarkup(keyboard)

            await update.callback_query.edit_message_text(
                "‚ùå –£–î–ê–õ–ò–¢–¨ –ò–°–ü–û–õ–ù–ò–¢–ï–õ–Ø\n\n–ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.",
                reply_markup=reply_markup
            )
            return

        text = "‚ùå –£–î–ê–õ–ò–¢–¨ –ò–°–ü–û–õ–ù–ò–¢–ï–õ–Ø\n\n–í—ã–±–µ—Ä–∏—Ç–µ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:"
        keyboard = []

        for executor in executors:
            username = executor.get('username', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')
            keyboard.append([
                InlineKeyboardButton(
                    f"‚ùå {username}",
                    callback_data=f'admin_delete_confirm_{username}'
                )
            ])

        keyboard.append([InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data='admin_executors')])
        reply_markup = InlineKeyboardMarkup(keyboard)

        await update.callback_query.edit_message_text(text, reply_markup=reply_markup)

    except Exception as e:
        keyboard = [[InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data='admin_executors')]]
        reply_markup = InlineKeyboardMarkup(keyboard)

        await update.callback_query.edit_message_text(
            f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å–ø–∏—Å–∫–∞ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª–µ–π: {str(e)}",
            reply_markup=reply_markup
        )


async def confirm_delete_executor(update: Update, context: ContextTypes.DEFAULT_TYPE, username: str) -> None:
    """–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–∏—è –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è"""
    text = f"‚ö†Ô∏è –ü–û–î–¢–í–ï–†–ñ–î–ï–ù–ò–ï –£–î–ê–õ–ï–ù–ò–Ø\n\n–í—ã –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è '{username}'?\n\n–≠—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–µ–ª—å–∑—è –æ—Ç–º–µ–Ω–∏—Ç—å!"

    keyboard = [
        [
            InlineKeyboardButton("‚úÖ –î–∞, —É–¥–∞–ª–∏—Ç—å", callback_data=f'admin_delete_execute_{username}'),
            InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞", callback_data='admin_delete_executor')
        ]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)

    await update.callback_query.edit_message_text(text, reply_markup=reply_markup)


async def execute_delete_executor(update: Update, context: ContextTypes.DEFAULT_TYPE, username: str) -> None:
    """–í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–∏—è –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è"""
    firebase = context.bot_data['firebase']

    try:
        success = firebase.delete_executor(username)

        if success:
            text = f"‚úÖ –ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å '{username}' —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω!"
        else:
            text = f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è '{username}' –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è."

    except Exception as e:
        text = f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è: {str(e)}"
        print(f"–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è: {e}")

    keyboard = [
        [InlineKeyboardButton("üîô –ö —É–ø—Ä–∞–≤–ª–µ–Ω–∏—é –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è–º–∏", callback_data='admin_executors')]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)

    await update.callback_query.edit_message_text(text, reply_markup=reply_markup)


async def admin_portfolio_menu(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–ú–µ–Ω—é —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–æ—Ä—Ç—Ñ–æ–ª–∏–æ"""
    firebase = context.bot_data['firebase']

    try:
        # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ—Ä—Ç—Ñ–æ–ª–∏–æ
        portfolio_count = firebase.get_portfolio_count()

        portfolio_text = f"""üé® –£–ü–†–ê–í–õ–ï–ù–ò–ï –ü–û–†–¢–§–û–õ–ò–û

–í—Å–µ–≥–æ —ç–ª–µ–º–µ–Ω—Ç–æ–≤: {portfolio_count}

–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:"""

        keyboard = [
            [InlineKeyboardButton("üìã –ü—Ä–æ—Å–º–æ—Ç—Ä –ø–æ—Ä—Ç—Ñ–æ–ª–∏–æ", callback_data='admin_view_portfolio')],
            [InlineKeyboardButton("‚ûï –î–æ–±–∞–≤–∏—Ç—å –≤ –ø–æ—Ä—Ç—Ñ–æ–ª–∏–æ", callback_data='admin_add_portfolio')],
            [InlineKeyboardButton("‚ùå –£–¥–∞–ª–∏—Ç—å –∏–∑ –ø–æ—Ä—Ç—Ñ–æ–ª–∏–æ", callback_data='admin_delete_portfolio')],
            [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥ –≤ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å", callback_data='admin_menu')]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)

        await update.callback_query.edit_message_text(portfolio_text, reply_markup=reply_markup)

    except Exception as e:
        text = f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –º–µ–Ω—é –ø–æ—Ä—Ç—Ñ–æ–ª–∏–æ: {str(e)}"
        print(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –º–µ–Ω—é –ø–æ—Ä—Ç—Ñ–æ–ª–∏–æ: {e}")

        keyboard = [[InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data='admin_menu')]]
        reply_markup = InlineKeyboardMarkup(keyboard)

        await update.callback_query.edit_message_text(text, reply_markup=reply_markup)


async def view_portfolio(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–ü—Ä–æ—Å–º–æ—Ç—Ä –ø–æ—Ä—Ç—Ñ–æ–ª–∏–æ"""
    firebase = context.bot_data['firebase']

    try:
        portfolio_items = firebase.get_portfolio()

        if not portfolio_items:
            text = "üé® –ü–û–†–¢–§–û–õ–ò–û\n\n–ü–æ—Ä—Ç—Ñ–æ–ª–∏–æ –ø—É—Å—Ç–æ."
        else:
            text = f"üé® –ü–û–†–¢–§–û–õ–ò–û ({len(portfolio_items)})\n\n"

            for i, item in enumerate(portfolio_items, 1):
                title = item.get('title', '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è')
                category = item.get('category', '–ë–µ–∑ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏')
                description = item.get('description', '–ë–µ–∑ –æ–ø–∏—Å–∞–Ω–∏—è')

                text += f"{i}. {title}\n"
                text += f"   üìÇ –ö–∞—Ç–µ–≥–æ—Ä–∏—è: {category}\n"
                text += f"   üìù {description[:50]}{'...' if len(description) > 50 else ''}\n\n"

    except Exception as e:
        text = f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –ø–æ—Ä—Ç—Ñ–æ–ª–∏–æ: {str(e)}"
        print(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ø–æ—Ä—Ç—Ñ–æ–ª–∏–æ: {e}")

    keyboard = [
        [InlineKeyboardButton("üîÑ –û–±–Ω–æ–≤–∏—Ç—å", callback_data='admin_view_portfolio')],
        [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data='admin_portfolio')]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)

    await update.callback_query.edit_message_text(text, reply_markup=reply_markup)


async def add_portfolio_start(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–ù–∞—á–∞–ª–æ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —ç–ª–µ–º–µ–Ω—Ç–∞ –≤ –ø–æ—Ä—Ç—Ñ–æ–ª–∏–æ"""
    firebase = context.bot_data['firebase']
    user_id = update.callback_query.from_user.id

    text = """‚ûï –î–û–ë–ê–í–ò–¢–¨ –í –ü–û–†–¢–§–û–õ–ò–û

–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é:"""

    keyboard = [
        [InlineKeyboardButton("üåê –°–∞–π—Ç—ã", callback_data='admin_portfolio_category_sites')],
        [InlineKeyboardButton("üé¨ –í–∏–¥–µ–æ", callback_data='admin_portfolio_category_video')],
        [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data='admin_portfolio')]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)

    await update.callback_query.edit_message_text(text, reply_markup=reply_markup)


async def portfolio_category_selected(update: Update, context: ContextTypes.DEFAULT_TYPE, category: str) -> None:
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –¥–ª—è –ø–æ—Ä—Ç—Ñ–æ–ª–∏–æ"""
    firebase = context.bot_data['firebase']
    user_id = update.callback_query.from_user.id

    context.user_data['portfolio_category'] = category

    category_names = {
        'sites': '–°–∞–π—Ç—ã',
        'video': '–í–∏–¥–µ–æ'
    }

    category_display = category_names.get(category, category)

    await update.callback_query.edit_message_text(
        f"‚ûï –î–û–ë–ê–í–ò–¢–¨ –í –ü–û–†–¢–§–û–õ–ò–û\n\n–ö–∞—Ç–µ–≥–æ—Ä–∏—è: {category_display}\n\n–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–∞:"
    )

    firebase.set_user_state(user_id, f'admin_portfolio_title_{category}')


async def admin_stats(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–∏—Å—Ç–µ–º—ã"""
    firebase = context.bot_data['firebase']

    try:
        stats = firebase.get_admin_stats()

        text = f"""üìä –°–¢–ê–¢–ò–°–¢–ò–ö–ê –°–ò–°–¢–ï–ú–´

üë• –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏:
   ‚Ä¢ –ö–ª–∏–µ–Ω—Ç–æ–≤: {stats.get('clients_count', 0)}
   ‚Ä¢ –ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª–µ–π: {stats.get('executors_count', 0)}
   ‚Ä¢ –í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {stats.get('total_users', 0)}

üìã –ó–∞–∫–∞–∑—ã:
   ‚Ä¢ –í—Å–µ–≥–æ –∑–∞–∫–∞–∑–æ–≤: {stats.get('orders_count', 0)}
   ‚Ä¢ –í —Ä–∞–±–æ—Ç–µ: {stats.get('active_orders', 0)}
   ‚Ä¢ –ó–∞–≤–µ—Ä—à–µ–Ω–Ω—ã—Ö: {stats.get('completed_orders', 0)}

üé® –ü–æ—Ä—Ç—Ñ–æ–ª–∏–æ:
   ‚Ä¢ –≠–ª–µ–º–µ–Ω—Ç–æ–≤: {stats.get('portfolio_count', 0)}

üí∞ –§–∏–Ω–∞–Ω—Å—ã:
   ‚Ä¢ –û–±—â–∏–π –±–∞–ª–∞–Ω—Å –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª–µ–π: {stats.get('total_balance', 0)} —Ä—É–±."""

    except Exception as e:
        text = f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {str(e)}"
        print(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {e}")

    keyboard = [
        [InlineKeyboardButton("üîÑ –û–±–Ω–æ–≤–∏—Ç—å", callback_data='admin_stats')],
        [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data='admin_menu')]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)

    await update.callback_query.edit_message_text(text, reply_markup=reply_markup)


async def admin_exit(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–í—ã—Ö–æ–¥ –∏–∑ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏"""
    await update.callback_query.edit_message_text(
        "üëã –í—ã –≤—ã—à–ª–∏ –∏–∑ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏.\n\n–î–ª—è –ø–æ–≤—Ç–æ—Ä–Ω–æ–≥–æ –≤—Ö–æ–¥–∞ –Ω–∞–ø–∏—à–∏—Ç–µ '–∞–¥–º–∏–Ω'."
    )