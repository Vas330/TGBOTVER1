# handlers_admin.py
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import ContextTypes
from state_manager import user_state
from utils import format_entrepreneur_info, format_entrepreneur_list_item, is_valid_rating


async def all_entrepreneurs(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –≤—Å–µ—Ö –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª–µ–π"""
    entrepreneurs = user_state.entrepreneurs
    count = user_state.get_entrepreneurs_count()
    keyboard = []

    for login in entrepreneurs:
        entrepreneur_data = entrepreneurs[login]
        balance = entrepreneur_data.get('balance', 0)
        rating = entrepreneur_data['rating']
        keyboard.append([
            InlineKeyboardButton(
                format_entrepreneur_list_item(login, rating, balance),
                callback_data=f'entrepreneur_{login}'
            )
        ])

    reply_markup = InlineKeyboardMarkup(keyboard)
    await update.callback_query.edit_message_text(
        f"–í—Å–µ–≥–æ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª–µ–π: {count}\n–£–∑–Ω–∞—Ç—å –ø–æ–¥—Ä–æ–±–Ω–µ–µ:",
        reply_markup=reply_markup
    )


async def admin_portfolio_menu(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–ú–µ–Ω—é —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–æ—Ä—Ç—Ñ–æ–ª–∏–æ"""
    keyboard = [
        [InlineKeyboardButton("‚ûï –î–æ–±–∞–≤–∏—Ç—å —Å–∞–π—Ç", callback_data='add_portfolio_sites')],
        [InlineKeyboardButton("‚ûï –î–æ–±–∞–≤–∏—Ç—å –≤–∏–¥–µ–æ", callback_data='add_portfolio_video')],
        [InlineKeyboardButton("üìã –ü—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å –ø–æ—Ä—Ç—Ñ–æ–ª–∏–æ", callback_data='view_portfolio')],
        [InlineKeyboardButton("üóë –£–¥–∞–ª–∏—Ç—å —ç–ª–µ–º–µ–Ω—Ç", callback_data='delete_portfolio_start')],
        [InlineKeyboardButton("‚Üê –ù–∞–∑–∞–¥ –≤ –∞–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å", callback_data='admin_back')]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    await update.callback_query.edit_message_text(
        "–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ—Ä—Ç—Ñ–æ–ª–∏–æ:",
        reply_markup=reply_markup
    )


async def delete_portfolio_start(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–ù–∞—á–∞–ª–æ –ø—Ä–æ—Ü–µ—Å—Å–∞ —É–¥–∞–ª–µ–Ω–∏—è - –≤—ã–±–æ—Ä –∫–∞—Ç–µ–≥–æ—Ä–∏–∏"""
    keyboard = [
        [InlineKeyboardButton("üåê –°–∞–π—Ç—ã", callback_data='delete_category_sites')],
        [InlineKeyboardButton("üé¨ –í–∏–¥–µ–æ", callback_data='delete_category_video')],
        [InlineKeyboardButton("‚Üê –ù–∞–∑–∞–¥", callback_data='portfolio_menu')]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    await update.callback_query.edit_message_text(
        "–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:",
        reply_markup=reply_markup
    )


async def delete_category_items(update: Update, context: ContextTypes.DEFAULT_TYPE, category: str) -> None:
    """–ü–æ–∫–∞–∑ —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è"""
    portfolio_items = user_state.get_portfolio_items(category)
    category_names = {'sites': '—Å–∞–π—Ç–æ–≤', 'video': '–≤–∏–¥–µ–æ'}
    category_name = category_names.get(category, category)

    if not portfolio_items:
        keyboard = [
            [InlineKeyboardButton("‚Üê –ù–∞–∑–∞–¥", callback_data='delete_portfolio_start')]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        await update.callback_query.edit_message_text(
            f"–í –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ {category_name} –Ω–µ—Ç —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è.",
            reply_markup=reply_markup
        )
        return

    keyboard = []
    for i, item in enumerate(portfolio_items):
        # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –¥–ª–∏–Ω—É –Ω–∞–∑–≤–∞–Ω–∏—è –¥–ª—è –∫–Ω–æ–ø–∫–∏
        title = item['title']
        if len(title) > 30:
            title = title[:27] + "..."

        keyboard.append([InlineKeyboardButton(
            f"üóë {title}",
            callback_data=f'delete_item_{category}_{i}'
        )])

    keyboard.append([InlineKeyboardButton("‚Üê –ù–∞–∑–∞–¥", callback_data='delete_portfolio_start')])
    reply_markup = InlineKeyboardMarkup(keyboard)

    await update.callback_query.edit_message_text(
        f"–í—ã–±–µ—Ä–∏—Ç–µ {category_name[:-2]} –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è ({len(portfolio_items)} —ç–ª–µ–º–µ–Ω—Ç–æ–≤):",
        reply_markup=reply_markup
    )


async def delete_item_confirm(update: Update, context: ContextTypes.DEFAULT_TYPE, category: str, index: int) -> None:
    """–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–∏—è —ç–ª–µ–º–µ–Ω—Ç–∞"""
    portfolio_items = user_state.get_portfolio_items(category)

    if 0 <= index < len(portfolio_items):
        item = portfolio_items[index]

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
        context.user_data['delete_category'] = category
        context.user_data['delete_index'] = index
        context.user_data['delete_title'] = item['title']

        await update.callback_query.edit_message_text(
            f"‚ùó –í—ã —Ç–æ—á–Ω–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å:\n\n"
            f"üìã '{item['title']}'\n"
            f"üìù {item['description'][:100]}{'...' if len(item['description']) > 100 else ''}\n\n"
            f"‚ö†Ô∏è –≠—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–µ–ª—å–∑—è –æ—Ç–º–µ–Ω–∏—Ç—å!\n\n"
            f"–ù–∞–ø–∏—à–∏—Ç–µ '–¥–∞' –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –∏–ª–∏ '–Ω–µ—Ç' –¥–ª—è –æ—Ç–º–µ–Ω—ã."
        )

        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
        user_state.set_state(update.callback_query.from_user.id, f'delete_confirm_{category}_{index}')
    else:
        await update.callback_query.edit_message_text("–≠–ª–µ–º–µ–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω.")


async def handle_delete_confirmation(update: Update, context: ContextTypes.DEFAULT_TYPE, state: str) -> bool:
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Ç–µ–∫—Å—Ç–æ–≤–æ–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–∏—è"""
    if not state.startswith('delete_confirm_'):
        return False

    user_id = update.message.from_user.id
    response = update.message.text.lower().strip()

    # –ò–∑–≤–ª–µ–∫–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
    category = context.user_data.get('delete_category')
    index = context.user_data.get('delete_index')
    title = context.user_data.get('delete_title', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —ç–ª–µ–º–µ–Ω—Ç')

    if response == '–¥–∞':
        # –£–¥–∞–ª—è–µ–º —ç–ª–µ–º–µ–Ω—Ç
        if user_state.delete_portfolio_item(category, index):
            await update.message.reply_text(f"‚úÖ –≠–ª–µ–º–µ–Ω—Ç '{title}' —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω!")

            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π —Å–ø–∏—Å–æ–∫ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
            await send_updated_category_list(update, context, category)
        else:
            await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —ç–ª–µ–º–µ–Ω—Ç–∞.")

    elif response == '–Ω–µ—Ç':
        await update.message.reply_text("‚ùå –£–¥–∞–ª–µ–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.")

        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ —Å–ø–∏—Å–∫—É —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
        await send_updated_category_list(update, context, category)
    else:
        await update.message.reply_text("‚ùì –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞–ø–∏—à–∏—Ç–µ '–¥–∞' –∏–ª–∏ '–Ω–µ—Ç'.")
        return True  # –ù–µ —Å–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ, –∂–¥–µ–º –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –æ—Ç–≤–µ—Ç

    # –û—á–∏—â–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    context.user_data.pop('delete_category', None)
    context.user_data.pop('delete_index', None)
    context.user_data.pop('delete_title', None)
    user_state.set_state(user_id, None)

    return True


async def send_updated_category_list(update: Update, context: ContextTypes.DEFAULT_TYPE, category: str) -> None:
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π —Å–ø–∏—Å–æ–∫ —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏"""
    portfolio_items = user_state.get_portfolio_items(category)
    category_names = {'sites': '—Å–∞–π—Ç–æ–≤', 'video': '–≤–∏–¥–µ–æ'}
    category_name = category_names.get(category, category)

    if not portfolio_items:
        keyboard = [
            [InlineKeyboardButton("‚Üê –ù–∞–∑–∞–¥", callback_data='delete_portfolio_start')]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        await update.message.reply_text(
            f"–í –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ {category_name} –±–æ–ª—å—à–µ –Ω–µ—Ç —ç–ª–µ–º–µ–Ω—Ç–æ–≤.",
            reply_markup=reply_markup
        )
        return

    keyboard = []
    for i, item in enumerate(portfolio_items):
        title = item['title']
        if len(title) > 30:
            title = title[:27] + "..."

        keyboard.append([InlineKeyboardButton(
            f"üóë {title}",
            callback_data=f'delete_item_{category}_{i}'
        )])

    keyboard.append([InlineKeyboardButton("‚Üê –ù–∞–∑–∞–¥", callback_data='delete_portfolio_start')])
    reply_markup = InlineKeyboardMarkup(keyboard)

    await update.message.reply_text(
        f"–í—ã–±–µ—Ä–∏—Ç–µ {category_name[:-2]} –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è ({len(portfolio_items)} —ç–ª–µ–º–µ–Ω—Ç–æ–≤):",
        reply_markup=reply_markup
    )


async def add_portfolio_start(update: Update, context: ContextTypes.DEFAULT_TYPE, category: str) -> None:
    """–ù–∞—á–∞–ª–æ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —ç–ª–µ–º–µ–Ω—Ç–∞ –ø–æ—Ä—Ç—Ñ–æ–ª–∏–æ"""
    category_names = {'sites': '—Å–∞–π—Ç', 'video': '–≤–∏–¥–µ–æ'}
    category_name = category_names.get(category, category)

    await update.callback_query.edit_message_text(f"–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ {category_name}:")
    # –ò–°–ü–†–ê–í–õ–ï–ù–û: –∏—Å–ø–æ–ª—å–∑—É–µ–º –µ–¥–∏–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Å–æ—Å—Ç–æ—è–Ω–∏–π
    user_state.set_state(update.callback_query.from_user.id, f'add_{category}_title')


async def view_portfolio_admin(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–ü—Ä–æ—Å–º–æ—Ç—Ä –ø–æ—Ä—Ç—Ñ–æ–ª–∏–æ –¥–ª—è –∞–¥–º–∏–Ω–∞"""
    keyboard = [
        [InlineKeyboardButton("üåê –°–∞–π—Ç—ã", callback_data='admin_view_sites')],
        [InlineKeyboardButton("üé¨ –í–∏–¥–µ–æ", callback_data='admin_view_video')],
        [InlineKeyboardButton("‚Üê –ù–∞–∑–∞–¥", callback_data='portfolio_menu')]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    await update.callback_query.edit_message_text(
        "–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞:",
        reply_markup=reply_markup
    )


async def view_category_admin(update: Update, context: ContextTypes.DEFAULT_TYPE, category: str) -> None:
    """–ü—Ä–æ—Å–º–æ—Ç—Ä –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –ø–æ—Ä—Ç—Ñ–æ–ª–∏–æ –¥–ª—è –∞–¥–º–∏–Ω–∞"""
    portfolio_items = user_state.get_portfolio_items(category)

    if not portfolio_items:
        keyboard = [
            [InlineKeyboardButton("‚Üê –ù–∞–∑–∞–¥", callback_data='view_portfolio')]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        await update.callback_query.edit_message_text(
            f"–í –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ '{category}' –ø–æ–∫–∞ –Ω–µ—Ç —ç–ª–µ–º–µ–Ω—Ç–æ–≤.",
            reply_markup=reply_markup
        )
        return

    keyboard = []
    for i, item in enumerate(portfolio_items):
        keyboard.append([InlineKeyboardButton(
            f"üìã {item['title']}",
            callback_data=f'admin_item_{category}_{i}'
        )])

    keyboard.append([InlineKeyboardButton("‚Üê –ù–∞–∑–∞–¥", callback_data='view_portfolio')])
    reply_markup = InlineKeyboardMarkup(keyboard)

    await update.callback_query.edit_message_text(
        f"–≠–ª–µ–º–µ–Ω—Ç—ã –≤ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ '{category}' ({len(portfolio_items)}):",
        reply_markup=reply_markup
    )


async def show_portfolio_item_admin(update: Update, context: ContextTypes.DEFAULT_TYPE, category: str,
                                    index: int) -> None:
    """–ü–æ–∫–∞–∑ —ç–ª–µ–º–µ–Ω—Ç–∞ –ø–æ—Ä—Ç—Ñ–æ–ª–∏–æ –¥–ª—è –∞–¥–º–∏–Ω–∞"""
    portfolio_items = user_state.get_portfolio_items(category)

    if 0 <= index < len(portfolio_items):
        item = portfolio_items[index]

        text = f"üéØ {item['title']}\n\n{item['description']}"

        if item.get('links'):
            text += "\n\nüîó –°—Å—ã–ª–∫–∏:"
            for link in item['links']:
                text += f"\n‚Ä¢ {link}"

        if item.get('images'):
            text += f"\n\nüì∏ –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π: {len(item['images'])}"

        keyboard = [
            [InlineKeyboardButton("üóë –£–¥–∞–ª–∏—Ç—å", callback_data=f'delete_confirm_{category}_{index}')],
            [InlineKeyboardButton("‚Üê –ù–∞–∑–∞–¥", callback_data=f'admin_view_{category}')]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)

        await update.callback_query.edit_message_text(text, reply_markup=reply_markup)
    else:
        await update.callback_query.edit_message_text("–≠–ª–µ–º–µ–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω.")


async def delete_portfolio_confirm(update: Update, context: ContextTypes.DEFAULT_TYPE, category: str,
                                   index: int) -> None:
    """–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–∏—è —ç–ª–µ–º–µ–Ω—Ç–∞ –ø–æ—Ä—Ç—Ñ–æ–ª–∏–æ"""
    portfolio_items = user_state.get_portfolio_items(category)

    if 0 <= index < len(portfolio_items):
        item = portfolio_items[index]
        keyboard = [
            [InlineKeyboardButton("‚úÖ –î–∞, —É–¥–∞–ª–∏—Ç—å", callback_data=f'delete_execute_{category}_{index}')],
            [InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞", callback_data=f'admin_item_{category}_{index}')]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)

        await update.callback_query.edit_message_text(
            f"–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å '{item['title']}'?",
            reply_markup=reply_markup
        )
    else:
        await update.callback_query.edit_message_text("–≠–ª–µ–º–µ–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω.")


async def execute_portfolio_delete(update: Update, context: ContextTypes.DEFAULT_TYPE, category: str,
                                   index: int) -> None:
    """–í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–∏—è —ç–ª–µ–º–µ–Ω—Ç–∞ –ø–æ—Ä—Ç—Ñ–æ–ª–∏–æ"""
    if user_state.delete_portfolio_item(category, int(index)):
        await update.callback_query.edit_message_text("–≠–ª–µ–º–µ–Ω—Ç —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω!")
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ —Å–ø–∏—Å–∫—É –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
        import asyncio
        await asyncio.sleep(1)
        await view_category_admin(update, context, category)
    else:
        await update.callback_query.edit_message_text("–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —ç–ª–µ–º–µ–Ω—Ç–∞.")


async def handle_portfolio_addition(update: Update, context: ContextTypes.DEFAULT_TYPE, state: str) -> bool:
    """–£–î–ê–õ–ï–ù–ê - —Ç–µ–ø–µ—Ä—å –æ–±—Ä–∞–±–æ—Ç–∫–∞ –≤ text_handler.py —á–µ—Ä–µ–∑ handle_old_portfolio_format"""
    # –≠—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è –±–æ–ª—å—à–µ –Ω–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è
    return False


# –û—Å—Ç–∞–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –æ—Å—Ç–∞—é—Ç—Å—è –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π...

async def entrepreneur_details(update: Update, context: ContextTypes.DEFAULT_TYPE, login: str) -> None:
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –¥–µ—Ç–∞–ª–∏ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è"""
    query = update.callback_query

    if login in user_state.entrepreneurs:
        entrepreneur_data = user_state.entrepreneurs[login]
        password = entrepreneur_data['password']
        rating = entrepreneur_data['rating']
        balance = entrepreneur_data.get('balance', 0)
        chat_id = entrepreneur_data.get('chat_id')

        keyboard = [
            [InlineKeyboardButton("–ü–æ–º–µ–Ω—è—Ç—å —Ä–µ–π—Ç–∏–Ω–≥", callback_data=f'change_rating_{login}')],
            [InlineKeyboardButton("–ò–∑–º–µ–Ω–∏—Ç—å –±–∞–ª–∞–Ω—Å", callback_data=f'change_balance_{login}')],
            [InlineKeyboardButton("–£–¥–∞–ª–∏—Ç—å –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è", callback_data=f'delete_entrepreneur_{login}')]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)

        info_text = format_entrepreneur_info(login, password, rating, balance, chat_id)
        await query.edit_message_text(info_text, reply_markup=reply_markup)
    else:
        await query.edit_message_text("–ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.")


async def change_rating(update: Update, context: ContextTypes.DEFAULT_TYPE, login: str) -> None:
    """–ó–∞–ø—Ä–æ—Å –Ω–∞ –∏–∑–º–µ–Ω–µ–Ω–∏–µ —Ä–µ–π—Ç–∏–Ω–≥–∞"""
    query = update.callback_query
    await query.edit_message_text("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π —Ä–µ–π—Ç–∏–Ω–≥ (–æ—Ç 1 –¥–æ 10):")
    user_state.set_state(query.from_user.id, f'new_rating_{login}')


async def change_balance(update: Update, context: ContextTypes.DEFAULT_TYPE, login: str) -> None:
    """–ó–∞–ø—Ä–æ—Å –Ω–∞ –∏–∑–º–µ–Ω–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞"""
    query = update.callback_query
    await query.edit_message_text("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π –±–∞–ª–∞–Ω—Å:")
    user_state.set_state(query.from_user.id, f'new_balance_{login}')


async def delete_entrepreneur_confirm(update: Update, context: ContextTypes.DEFAULT_TYPE, login: str) -> None:
    """–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–∏—è –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è"""
    query = update.callback_query
    await query.edit_message_text(
        f"–í—ã —Ç–æ—á–Ω–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è {login}? –ù–∞–ø–∏—à–∏—Ç–µ '–¥–∞' –∏–ª–∏ '–Ω–µ—Ç'."
    )
    user_state.set_state(query.from_user.id, f'delete_confirm_{login}')


async def handle_registration_process(update: Update, context: ContextTypes.DEFAULT_TYPE, state: str) -> bool:
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –ø—Ä–æ—Ü–µ—Å—Å —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è.
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç True, –µ—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –±—ã–ª–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ —ç—Ç–∏–º —Ö–µ–Ω–¥–ª–µ—Ä–æ–º.
    """
    user_id = update.message.from_user.id

    if state == 'register_login':
        context.user_data['register_login'] = update.message.text
        await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å:")
        user_state.set_state(user_id, 'register_password')
        return True

    elif state == 'register_password':
        login = context.user_data.get('register_login')
        password = update.message.text

        if login:
            user_state.register_entrepreneur(login, password, chat_id=user_id)
            await update.message.reply_text("–î–∞–Ω–Ω—ã–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ —Å–∏—Å—Ç–µ–º–µ!")
        else:
            await update.message.reply_text("–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏.")

        user_state.set_state(user_id, None)
        return True

    return False


async def handle_admin_updates(update: Update, context: ContextTypes.DEFAULT_TYPE, state: str) -> bool:
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–∏–≤–Ω—ã–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è (—Ä–µ–π—Ç–∏–Ω–≥, –±–∞–ª–∞–Ω—Å, —É–¥–∞–ª–µ–Ω–∏–µ).
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç True, –µ—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –±—ã–ª–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ —ç—Ç–∏–º —Ö–µ–Ω–¥–ª–µ—Ä–æ–º.
    """
    user_id = update.message.from_user.id

    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è —É–¥–∞–ª–µ–Ω–∏—è –ø–æ—Ä—Ç—Ñ–æ–ª–∏–æ
    if await handle_delete_confirmation(update, context, state):
        return True

    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ä–µ–π—Ç–∏–Ω–≥–∞
    if state.startswith('new_rating_'):
        login = state.split('_')[2]
        try:
            rating = int(update.message.text)
            if is_valid_rating(rating):
                if user_state.update_entrepreneur_rating(login, rating):
                    await update.message.reply_text("–†–µ–π—Ç–∏–Ω–≥ –æ–±–Ω–æ–≤–ª–µ–Ω!")
                else:
                    await update.message.reply_text("–ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.")
            else:
                await update.message.reply_text("–†–µ–π—Ç–∏–Ω–≥ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –æ—Ç 1 –¥–æ 10.")
        except ValueError:
            await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ.")
        user_state.set_state(user_id, None)
        return True

    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞
    elif state.startswith('new_balance_'):
        login = state.split('_')[2]
        try:
            balance = float(update.message.text.replace(' ', ''))
            if user_state.set_entrepreneur_balance(login, balance):
                await update.message.reply_text("–ë–∞–ª–∞–Ω—Å –æ–±–Ω–æ–≤–ª–µ–Ω!")
            else:
                await update.message.reply_text("–ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        except ValueError:
            await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é —Å—É–º–º—É.")
        user_state.set_state(user_id, None)
        return True

    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è —É–¥–∞–ª–µ–Ω–∏—è
    elif state.startswith('delete_confirm_'):
        login = state.split('_')[2]
        response = update.message.text.lower().strip()

        if response == '–¥–∞':
            if user_state.delete_entrepreneur(login):
                await update.message.reply_text(f"–ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å {login} —É–¥–∞–ª–µ–Ω.")
            else:
                await update.message.reply_text("–ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.")
            user_state.set_state(user_id, None)
        elif response == '–Ω–µ—Ç':
            # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ –¥–µ—Ç–∞–ª—è–º –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è
            if login in user_state.entrepreneurs:
                entrepreneur_data = user_state.entrepreneurs[login]
                password = entrepreneur_data['password']
                rating = entrepreneur_data['rating']
                balance = entrepreneur_data.get('balance', 0)
                chat_id = entrepreneur_data.get('chat_id')

                keyboard = [
                    [InlineKeyboardButton("–ü–æ–º–µ–Ω—è—Ç—å —Ä–µ–π—Ç–∏–Ω–≥", callback_data=f'change_rating_{login}')],
                    [InlineKeyboardButton("–ò–∑–º–µ–Ω–∏—Ç—å –±–∞–ª–∞–Ω—Å", callback_data=f'change_balance_{login}')],
                    [InlineKeyboardButton("–£–¥–∞–ª–∏—Ç—å –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è", callback_data=f'delete_entrepreneur_{login}')]
                ]
                reply_markup = InlineKeyboardMarkup(keyboard)

                info_text = format_entrepreneur_info(login, password, rating, balance, chat_id)
                await update.message.reply_text(info_text, reply_markup=reply_markup)
            else:
                await update.message.reply_text("–ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.")
            user_state.set_state(user_id, None)
        else:
            await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ '–¥–∞' –∏–ª–∏ '–Ω–µ—Ç'.")
        return True

    return False


async def register_entrepreneur_start(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–ù–∞—á–∞–ª–æ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è"""
    query = update.callback_query
    await query.edit_message_text("–í–≤–µ–¥–∏—Ç–µ –ª–æ–≥–∏–Ω –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è:")
    user_state.set_state(query.from_user.id, 'register_login')