# main.py - –º–æ–¥–µ—Ä–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è —Å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è–º–∏ –æ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ (–∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω–∞—è –¥–ª—è Railway)
import logging
import asyncio
from datetime import datetime, timedelta
from telegram.ext import ApplicationBuilder, CommandHandler, CallbackQueryHandler, MessageHandler, filters

from config import BOT_TOKEN, LOGGING_FORMAT, LOGGING_LEVEL, FIREBASE_KEY_PATH
from firebase_manager import FirebaseManager
from handlers_common import start, handle_unknown_command
from button_handler import button
from text_handler import handle_text, handle_photo
from handlers_services import (
    our_services_menu,
    video_production_menu,
    website_development_menu,
    video_ads_details,
    video_social_details,
    video_animation_details,
    video_3d_details,
    web_landing_details,
    web_shop_details,
    web_multipage_details,
    web_platforms_details
)
from payment_handlers import (
    send_payment_request,
    handle_payment_confirmation,
    handle_start_work,
    handle_payment_help,
    handle_back_to_payment,
    handle_decline_paid_order
)


def setup_logging() -> None:
    """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è"""
    level = getattr(logging, LOGGING_LEVEL.upper(), logging.INFO)
    logging.basicConfig(format=LOGGING_FORMAT, level=level)


def setup_firebase() -> FirebaseManager:
    """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ Firebase"""
    try:
        firebase_manager = FirebaseManager(FIREBASE_KEY_PATH)
        print("Firebase —É—Å–ø–µ—à–Ω–æ –ø–æ–¥–∫–ª—é—á–µ–Ω!")
        return firebase_manager
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Firebase: {e}")
        raise


class AdminNotificationService:
    """–°–µ—Ä–≤–∏—Å –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –æ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞"""

    def __init__(self, firebase_manager, bot_application):
        self.firebase = firebase_manager
        self.application = bot_application
        self.processed_messages = set()  # –•—Ä–∞–Ω–∏–º ID –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
        self.is_running = False

        # –ó–∞–≥—Ä—É–∂–∞–µ–º –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–π –ø—Ä–æ–≤–µ—Ä–∫–∏ –∏–∑ Firebase –∏–ª–∏ —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç–µ–∫—É—â–µ–µ
        self.load_last_check_time()

    def load_last_check_time(self):
        """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–π –ø—Ä–æ–≤–µ—Ä–∫–∏ –∏–∑ Firebase"""
        try:
            system_ref = self.firebase.db.collection('system').document('admin_notifications')
            system_doc = system_ref.get()

            if system_doc.exists:
                system_data = system_doc.to_dict()
                self.last_check = system_data.get('last_check', datetime.now())
                print(f"–ó–∞–≥—Ä—É–∂–µ–Ω–æ –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–π –ø—Ä–æ–≤–µ—Ä–∫–∏: {self.last_check}")
            else:
                self.last_check = datetime.now()
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–∞—á–∞–ª—å–Ω–æ–µ –≤—Ä–µ–º—è
                system_ref.set({
                    'last_check': self.last_check,
                    'updated_at': datetime.now()
                })
                print(f"–£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –Ω–æ–≤–æ–µ –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–π –ø—Ä–æ–≤–µ—Ä–∫–∏: {self.last_check}")
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –≤—Ä–µ–º–µ–Ω–∏ –ø–æ—Å–ª–µ–¥–Ω–µ–π –ø—Ä–æ–≤–µ—Ä–∫–∏: {e}")
            self.last_check = datetime.now()

    def save_last_check_time(self):
        """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–π –ø—Ä–æ–≤–µ—Ä–∫–∏ –≤ Firebase"""
        try:
            system_ref = self.firebase.db.collection('system').document('admin_notifications')
            system_ref.set({
                'last_check': self.last_check,
                'updated_at': datetime.now()
            })
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –≤—Ä–µ–º–µ–Ω–∏ –ø–æ—Å–ª–µ–¥–Ω–µ–π –ø—Ä–æ–≤–µ—Ä–∫–∏: {e}")

    async def start_monitoring(self):
        """–ó–∞–ø—É—Å–∫–∞–µ—Ç –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —Å–æ–æ–±—â–µ–Ω–∏–π –æ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞"""
        self.is_running = True
        print("–ó–∞–ø—É—Å–∫ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ —Å–æ–æ–±—â–µ–Ω–∏–π –æ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞...")

        while self.is_running:
            try:
                await self.check_admin_messages()
                await asyncio.sleep(30)  # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥—ã–µ 30 —Å–µ–∫—É–Ω–¥
            except Exception as e:
                print(f"–û—à–∏–±–∫–∞ –≤ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–µ: {e}")
                await asyncio.sleep(60)  # –ü—Ä–∏ –æ—à–∏–±–∫–µ –∂–¥–µ–º –¥–æ–ª—å—à–µ

    def stop_monitoring(self):
        """–û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥"""
        self.is_running = False

    async def check_admin_messages(self):
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –Ω–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è"""
        try:
            current_time = datetime.now()

            # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç –∞–¥–º–∏–Ω–∞ –ø–æ—Å–ª–µ –ø–æ—Å–ª–µ–¥–Ω–µ–π –ø—Ä–æ–≤–µ—Ä–∫–∏
            admin_messages_ref = self.firebase.db.collection('messages').where('user_role', '==', 'admin')
            admin_messages = admin_messages_ref.stream()

            new_notifications_sent = 0
            newest_message_time = self.last_check

            for msg_doc in admin_messages:
                msg_data = msg_doc.to_dict()
                msg_id = msg_doc.id

                # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —É–∂–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
                if msg_id in self.processed_messages:
                    continue

                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—Ä–µ–º—è —Å–æ–æ–±—â–µ–Ω–∏—è
                msg_timestamp = msg_data.get('timestamp')
                if msg_timestamp:
                    if hasattr(msg_timestamp, 'seconds'):
                        # Firebase Timestamp
                        msg_time = datetime.fromtimestamp(msg_timestamp.seconds)
                    elif hasattr(msg_timestamp, 'timestamp'):
                        # –î—Ä—É–≥–æ–π —Ñ–æ—Ä–º–∞—Ç timestamp
                        msg_time = msg_timestamp
                    else:
                        # datetime –æ–±—ä–µ–∫—Ç
                        msg_time = msg_timestamp

                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–æ–≤–µ–µ –ø–æ—Å–ª–µ–¥–Ω–µ–π –ø—Ä–æ–≤–µ—Ä–∫–∏
                    if msg_time <= self.last_check:
                        continue

                    # –û–±–Ω–æ–≤–ª—è–µ–º –≤—Ä–µ–º—è —Å–∞–º–æ–≥–æ –Ω–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
                    if msg_time > newest_message_time:
                        newest_message_time = msg_time

                print(
                    f"–ù–∞–π–¥–µ–Ω–æ –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞: {msg_data.get('text', '')} –¥–ª—è –∑–∞–∫–∞–∑–∞ {msg_data.get('order_id')}")

                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è —É—á–∞—Å—Ç–Ω–∏–∫–∞–º –∑–∞–∫–∞–∑–∞
                order_id = msg_data.get('order_id')
                message_text = msg_data.get('text', '')

                if order_id and message_text:
                    await self.notify_order_participants(order_id, message_text)
                    self.processed_messages.add(msg_id)
                    new_notifications_sent += 1

            # –û–±–Ω–æ–≤–ª—è–µ–º –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–π –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –±—ã–ª–∏ –Ω–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
            if new_notifications_sent > 0:
                self.last_check = newest_message_time
                self.save_last_check_time()
                print(f"–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ {new_notifications_sent} —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –æ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞")
                print(f"–û–±–Ω–æ–≤–ª–µ–Ω–æ –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–π –ø—Ä–æ–≤–µ—Ä–∫–∏: {self.last_check}")

        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —Å–æ–æ–±—â–µ–Ω–∏–π –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞: {e}")
            import traceback
            traceback.print_exc()

    async def notify_order_participants(self, order_id, admin_message):
        """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è —É—á–∞—Å—Ç–Ω–∏–∫–∞–º –∑–∞–∫–∞–∑–∞ –æ —Å–æ–æ–±—â–µ–Ω–∏–∏ –æ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞"""
        try:
            # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∑–∞–∫–∞–∑–µ
            order = self.firebase.get_order_by_id(order_id)
            if not order:
                return

            order_title = order.get('title', '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è')
            notification_text = (
                f"üì® –ù–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞\n\n"
                f"–ó–∞–∫–∞–∑: {order_title}\n"
                f"–°–æ–æ–±—â–µ–Ω–∏–µ: {admin_message}\n\n"
                f"–û—Ç–∫—Ä–æ–π—Ç–µ —á–∞—Ç –∑–∞–∫–∞–∑–∞ –¥–ª—è –æ—Ç–≤–µ—Ç–∞."
            )

            # –£–≤–µ–¥–æ–º–ª—è–µ–º –∑–∞–∫–∞–∑—á–∏–∫–∞
            customer_info = order.get('customer', {})
            customer_chat_id = None

            if customer_info.get('username'):
                customer_chat_id = self.firebase.get_user_chat_id_by_username(customer_info['username'])

            if customer_chat_id:
                try:
                    await self.application.bot.send_message(
                        chat_id=customer_chat_id,
                        text=notification_text
                    )
                    print(f"–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –∑–∞–∫–∞–∑—á–∏–∫—É {customer_info.get('username')}")
                except Exception as e:
                    print(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∑–∞–∫–∞–∑—á–∏–∫—É: {e}")

            # –£–≤–µ–¥–æ–º–ª—è–µ–º –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è
            executor_info = order.get('executor', {})
            executor_chat_id = None

            if executor_info.get('username'):
                executor_chat_id = self.firebase.get_user_chat_id_by_username(executor_info['username'])

            if executor_chat_id and executor_chat_id != customer_chat_id:
                try:
                    await self.application.bot.send_message(
                        chat_id=executor_chat_id,
                        text=notification_text
                    )
                    print(f"–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—é {executor_info.get('username')}")
                except Exception as e:
                    print(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—é: {e}")

        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –¥–ª—è –∑–∞–∫–∞–∑–∞ {order_id}: {e}")


async def start_background_tasks(firebase_manager, application):
    """–ó–∞–ø—É—Å–∫–∞–µ—Ç —Ñ–æ–Ω–æ–≤—ã–µ –∑–∞–¥–∞—á–∏"""
    print("–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Ñ–æ–Ω–æ–≤—ã—Ö –∑–∞–¥–∞—á...")

    # –°–æ–∑–¥–∞–µ–º —Å–µ—Ä–≤–∏—Å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –æ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
    admin_notification_service = AdminNotificationService(firebase_manager, application)

    # –ó–∞–ø—É—Å–∫–∞–µ–º –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –≤ —Ñ–æ–Ω–æ–≤–æ–º —Ä–µ–∂–∏–º–µ
    task = asyncio.create_task(admin_notification_service.start_monitoring())
    print("–ó–∞–¥–∞—á–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ —Å–æ–∑–¥–∞–Ω–∞")

    return admin_notification_service


def main() -> None:
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞"""
    print("–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ —Å –ø–æ–ª–Ω–æ–π —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å—é...")
    
    setup_logging()

    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Firebase
    firebase_manager = setup_firebase()

    # –°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
    application = ApplicationBuilder().token(BOT_TOKEN).build()

    # –ü–µ—Ä–µ–¥–∞—á–∞ firebase_manager –≤ context
    application.bot_data['firebase'] = firebase_manager

    # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤
    application.add_handler(CommandHandler("start", start))
    application.add_handler(CallbackQueryHandler(button))
    application.add_handler(MessageHandler(filters.PHOTO, handle_photo))
    application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_text))
    application.add_handler(MessageHandler(filters.COMMAND, handle_unknown_command))

    print("–ë–æ—Ç –∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –æ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞...")

    # –ò–°–ü–†–ê–í–õ–ï–ù–û: –£–ø—Ä–æ—â–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è –∑–∞–ø—É—Å–∫–∞ –¥–ª—è Railway
    try:
        # –°–æ–∑–¥–∞–µ–º event loop –¥–ª—è Railway
        loop = asyncio.new_event_loop()
        asyncio.set_event_loop(loop)
        
        async def init_and_run():
            # –ó–∞–ø—É—Å–∫–∞–µ–º —Ñ–æ–Ω–æ–≤—ã–µ –∑–∞–¥–∞—á–∏
            admin_service = await start_background_tasks(firebase_manager, application)
            
            print("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –∏ –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ!")
            print("–°–∏—Å—Ç–µ–º–∞ —á–∞—Ç–æ–≤ –∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –∞–∫—Ç–∏–≤–Ω–∞!")
            
            # –ó–∞–ø—É—Å–∫–∞–µ–º –æ—Å–Ω–æ–≤–Ω–æ–π polling (—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π —Å–ø–æ—Å–æ–±)
            application.run_polling()

        # –ò—Å–ø–æ–ª—å–∑—É–µ–º run_until_complete –¥–ª—è —Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç–∏
        loop.run_until_complete(init_and_run())
        
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞: {e}")
        import traceback
        traceback.print_exc()
        
        # Fallback - –∑–∞–ø—É—Å–∫ –±–µ–∑ —Ñ–æ–Ω–æ–≤—ã—Ö –∑–∞–¥–∞—á
        print("–ü–æ–ø—ã—Ç–∫–∞ –∑–∞–ø—É—Å–∫–∞ –≤ —É–ø—Ä–æ—â–µ–Ω–Ω–æ–º —Ä–µ–∂–∏–º–µ...")
        application.run_polling()


if __name__ == '__main__':
    main()
